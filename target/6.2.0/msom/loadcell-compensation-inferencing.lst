
/Users/eric/Documents/projects/loadcell-compensation-inferencing/target/6.2.0/msom/loadcell-compensation-inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f5000  085f5000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f5018  085f5018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085f50a4  085f50a4  000050a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023f5850  085f50b0  00005850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   0000a798  023f5860  085f50b8  00005860  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  7 .data         00000384  1007a2ec  085ff850  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000098c  1007a670  1007a670  0002a670  2**2
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ffbd4  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 000003e0  085ffbd8  085ffbd8  0001fbd8  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001fbd8  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0028c838  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0002125a  00000000  00000000  002ac838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0007f904  00000000  00000000  002cda92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004060  00000000  00000000  0034d396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00014e50  00000000  00000000  003513f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000366e6  00000000  00000000  00366246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0007b828  00000000  00000000  0039c92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00218236  00000000  00000000  00418154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000cf50  00000000  00000000  0063038c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f5018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f5018:	4813      	ldr	r0, [pc, #76]	; (85f5068 <module_user_pre_init+0x50>)
 85f501a:	4914      	ldr	r1, [pc, #80]	; (85f506c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f501c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f501e:	4288      	cmp	r0, r1
 85f5020:	d005      	beq.n	85f502e <module_user_pre_init+0x16>
 85f5022:	4a13      	ldr	r2, [pc, #76]	; (85f5070 <module_user_pre_init+0x58>)
 85f5024:	4282      	cmp	r2, r0
 85f5026:	d002      	beq.n	85f502e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f5028:	4b12      	ldr	r3, [pc, #72]	; (85f5074 <module_user_pre_init+0x5c>)
 85f502a:	1a12      	subs	r2, r2, r0
 85f502c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f502e:	4812      	ldr	r0, [pc, #72]	; (85f5078 <module_user_pre_init+0x60>)
 85f5030:	4a12      	ldr	r2, [pc, #72]	; (85f507c <module_user_pre_init+0x64>)
 85f5032:	2100      	movs	r1, #0
 85f5034:	4b12      	ldr	r3, [pc, #72]	; (85f5080 <module_user_pre_init+0x68>)
 85f5036:	1a12      	subs	r2, r2, r0
 85f5038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f503a:	4812      	ldr	r0, [pc, #72]	; (85f5084 <module_user_pre_init+0x6c>)
 85f503c:	4912      	ldr	r1, [pc, #72]	; (85f5088 <module_user_pre_init+0x70>)
 85f503e:	4288      	cmp	r0, r1
 85f5040:	d005      	beq.n	85f504e <module_user_pre_init+0x36>
 85f5042:	4a12      	ldr	r2, [pc, #72]	; (85f508c <module_user_pre_init+0x74>)
 85f5044:	4282      	cmp	r2, r0
 85f5046:	d002      	beq.n	85f504e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f5048:	4b0a      	ldr	r3, [pc, #40]	; (85f5074 <module_user_pre_init+0x5c>)
 85f504a:	1a12      	subs	r2, r2, r0
 85f504c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f504e:	4810      	ldr	r0, [pc, #64]	; (85f5090 <module_user_pre_init+0x78>)
 85f5050:	4910      	ldr	r1, [pc, #64]	; (85f5094 <module_user_pre_init+0x7c>)
 85f5052:	4288      	cmp	r0, r1
 85f5054:	d005      	beq.n	85f5062 <module_user_pre_init+0x4a>
 85f5056:	4a10      	ldr	r2, [pc, #64]	; (85f5098 <module_user_pre_init+0x80>)
 85f5058:	4282      	cmp	r2, r0
 85f505a:	d002      	beq.n	85f5062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f505c:	4b05      	ldr	r3, [pc, #20]	; (85f5074 <module_user_pre_init+0x5c>)
 85f505e:	1a12      	subs	r2, r2, r0
 85f5060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f5062:	4801      	ldr	r0, [pc, #4]	; (85f5068 <module_user_pre_init+0x50>)
 85f5064:	bd08      	pop	{r3, pc}
 85f5066:	bf00      	nop
 85f5068:	1007a2ec 	.word	0x1007a2ec
 85f506c:	085ff850 	.word	0x085ff850
 85f5070:	1007a670 	.word	0x1007a670
 85f5074:	10110d2d 	.word	0x10110d2d
 85f5078:	1007a670 	.word	0x1007a670
 85f507c:	1007affc 	.word	0x1007affc
 85f5080:	10110ea1 	.word	0x10110ea1
 85f5084:	023f5850 	.word	0x023f5850
 85f5088:	085f50b0 	.word	0x085f50b0
 85f508c:	023f5858 	.word	0x023f5858
 85f5090:	023f5860 	.word	0x023f5860
 85f5094:	085f50b8 	.word	0x085f50b8
 85f5098:	023ffff8 	.word	0x023ffff8

085f509c <dynalib_preinit>:
 85f509c:	085f5019 00000000                       .P_.....

Disassembly of section .psram_text:

023f5860 <__aeabi_drsub>:
 23f5860:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f5864:	e002      	b.n	23f586c <__adddf3>
 23f5866:	bf00      	nop

023f5868 <__aeabi_dsub>:
 23f5868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f586c <__adddf3>:
 23f586c:	b530      	push	{r4, r5, lr}
 23f586e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f5872:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f5876:	ea94 0f05 	teq	r4, r5
 23f587a:	bf08      	it	eq
 23f587c:	ea90 0f02 	teqeq	r0, r2
 23f5880:	bf1f      	itttt	ne
 23f5882:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f5886:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f588a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f588e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f5892:	f000 80e2 	beq.w	23f5a5a <__adddf3+0x1ee>
 23f5896:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f589a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f589e:	bfb8      	it	lt
 23f58a0:	426d      	neglt	r5, r5
 23f58a2:	dd0c      	ble.n	23f58be <__adddf3+0x52>
 23f58a4:	442c      	add	r4, r5
 23f58a6:	ea80 0202 	eor.w	r2, r0, r2
 23f58aa:	ea81 0303 	eor.w	r3, r1, r3
 23f58ae:	ea82 0000 	eor.w	r0, r2, r0
 23f58b2:	ea83 0101 	eor.w	r1, r3, r1
 23f58b6:	ea80 0202 	eor.w	r2, r0, r2
 23f58ba:	ea81 0303 	eor.w	r3, r1, r3
 23f58be:	2d36      	cmp	r5, #54	; 0x36
 23f58c0:	bf88      	it	hi
 23f58c2:	bd30      	pophi	{r4, r5, pc}
 23f58c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f58c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f58cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f58d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f58d4:	d002      	beq.n	23f58dc <__adddf3+0x70>
 23f58d6:	4240      	negs	r0, r0
 23f58d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f58dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f58e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f58e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f58e8:	d002      	beq.n	23f58f0 <__adddf3+0x84>
 23f58ea:	4252      	negs	r2, r2
 23f58ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f58f0:	ea94 0f05 	teq	r4, r5
 23f58f4:	f000 80a7 	beq.w	23f5a46 <__adddf3+0x1da>
 23f58f8:	f1a4 0401 	sub.w	r4, r4, #1
 23f58fc:	f1d5 0e20 	rsbs	lr, r5, #32
 23f5900:	db0d      	blt.n	23f591e <__adddf3+0xb2>
 23f5902:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f5906:	fa22 f205 	lsr.w	r2, r2, r5
 23f590a:	1880      	adds	r0, r0, r2
 23f590c:	f141 0100 	adc.w	r1, r1, #0
 23f5910:	fa03 f20e 	lsl.w	r2, r3, lr
 23f5914:	1880      	adds	r0, r0, r2
 23f5916:	fa43 f305 	asr.w	r3, r3, r5
 23f591a:	4159      	adcs	r1, r3
 23f591c:	e00e      	b.n	23f593c <__adddf3+0xd0>
 23f591e:	f1a5 0520 	sub.w	r5, r5, #32
 23f5922:	f10e 0e20 	add.w	lr, lr, #32
 23f5926:	2a01      	cmp	r2, #1
 23f5928:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f592c:	bf28      	it	cs
 23f592e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f5932:	fa43 f305 	asr.w	r3, r3, r5
 23f5936:	18c0      	adds	r0, r0, r3
 23f5938:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f593c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5940:	d507      	bpl.n	23f5952 <__adddf3+0xe6>
 23f5942:	f04f 0e00 	mov.w	lr, #0
 23f5946:	f1dc 0c00 	rsbs	ip, ip, #0
 23f594a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f594e:	eb6e 0101 	sbc.w	r1, lr, r1
 23f5952:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f5956:	d31b      	bcc.n	23f5990 <__adddf3+0x124>
 23f5958:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f595c:	d30c      	bcc.n	23f5978 <__adddf3+0x10c>
 23f595e:	0849      	lsrs	r1, r1, #1
 23f5960:	ea5f 0030 	movs.w	r0, r0, rrx
 23f5964:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f5968:	f104 0401 	add.w	r4, r4, #1
 23f596c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f5970:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f5974:	f080 809a 	bcs.w	23f5aac <__adddf3+0x240>
 23f5978:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f597c:	bf08      	it	eq
 23f597e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f5982:	f150 0000 	adcs.w	r0, r0, #0
 23f5986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f598a:	ea41 0105 	orr.w	r1, r1, r5
 23f598e:	bd30      	pop	{r4, r5, pc}
 23f5990:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f5994:	4140      	adcs	r0, r0
 23f5996:	eb41 0101 	adc.w	r1, r1, r1
 23f599a:	3c01      	subs	r4, #1
 23f599c:	bf28      	it	cs
 23f599e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f59a2:	d2e9      	bcs.n	23f5978 <__adddf3+0x10c>
 23f59a4:	f091 0f00 	teq	r1, #0
 23f59a8:	bf04      	itt	eq
 23f59aa:	4601      	moveq	r1, r0
 23f59ac:	2000      	moveq	r0, #0
 23f59ae:	fab1 f381 	clz	r3, r1
 23f59b2:	bf08      	it	eq
 23f59b4:	3320      	addeq	r3, #32
 23f59b6:	f1a3 030b 	sub.w	r3, r3, #11
 23f59ba:	f1b3 0220 	subs.w	r2, r3, #32
 23f59be:	da0c      	bge.n	23f59da <__adddf3+0x16e>
 23f59c0:	320c      	adds	r2, #12
 23f59c2:	dd08      	ble.n	23f59d6 <__adddf3+0x16a>
 23f59c4:	f102 0c14 	add.w	ip, r2, #20
 23f59c8:	f1c2 020c 	rsb	r2, r2, #12
 23f59cc:	fa01 f00c 	lsl.w	r0, r1, ip
 23f59d0:	fa21 f102 	lsr.w	r1, r1, r2
 23f59d4:	e00c      	b.n	23f59f0 <__adddf3+0x184>
 23f59d6:	f102 0214 	add.w	r2, r2, #20
 23f59da:	bfd8      	it	le
 23f59dc:	f1c2 0c20 	rsble	ip, r2, #32
 23f59e0:	fa01 f102 	lsl.w	r1, r1, r2
 23f59e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f59e8:	bfdc      	itt	le
 23f59ea:	ea41 010c 	orrle.w	r1, r1, ip
 23f59ee:	4090      	lslle	r0, r2
 23f59f0:	1ae4      	subs	r4, r4, r3
 23f59f2:	bfa2      	ittt	ge
 23f59f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f59f8:	4329      	orrge	r1, r5
 23f59fa:	bd30      	popge	{r4, r5, pc}
 23f59fc:	ea6f 0404 	mvn.w	r4, r4
 23f5a00:	3c1f      	subs	r4, #31
 23f5a02:	da1c      	bge.n	23f5a3e <__adddf3+0x1d2>
 23f5a04:	340c      	adds	r4, #12
 23f5a06:	dc0e      	bgt.n	23f5a26 <__adddf3+0x1ba>
 23f5a08:	f104 0414 	add.w	r4, r4, #20
 23f5a0c:	f1c4 0220 	rsb	r2, r4, #32
 23f5a10:	fa20 f004 	lsr.w	r0, r0, r4
 23f5a14:	fa01 f302 	lsl.w	r3, r1, r2
 23f5a18:	ea40 0003 	orr.w	r0, r0, r3
 23f5a1c:	fa21 f304 	lsr.w	r3, r1, r4
 23f5a20:	ea45 0103 	orr.w	r1, r5, r3
 23f5a24:	bd30      	pop	{r4, r5, pc}
 23f5a26:	f1c4 040c 	rsb	r4, r4, #12
 23f5a2a:	f1c4 0220 	rsb	r2, r4, #32
 23f5a2e:	fa20 f002 	lsr.w	r0, r0, r2
 23f5a32:	fa01 f304 	lsl.w	r3, r1, r4
 23f5a36:	ea40 0003 	orr.w	r0, r0, r3
 23f5a3a:	4629      	mov	r1, r5
 23f5a3c:	bd30      	pop	{r4, r5, pc}
 23f5a3e:	fa21 f004 	lsr.w	r0, r1, r4
 23f5a42:	4629      	mov	r1, r5
 23f5a44:	bd30      	pop	{r4, r5, pc}
 23f5a46:	f094 0f00 	teq	r4, #0
 23f5a4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f5a4e:	bf06      	itte	eq
 23f5a50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f5a54:	3401      	addeq	r4, #1
 23f5a56:	3d01      	subne	r5, #1
 23f5a58:	e74e      	b.n	23f58f8 <__adddf3+0x8c>
 23f5a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f5a5e:	bf18      	it	ne
 23f5a60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f5a64:	d029      	beq.n	23f5aba <__adddf3+0x24e>
 23f5a66:	ea94 0f05 	teq	r4, r5
 23f5a6a:	bf08      	it	eq
 23f5a6c:	ea90 0f02 	teqeq	r0, r2
 23f5a70:	d005      	beq.n	23f5a7e <__adddf3+0x212>
 23f5a72:	ea54 0c00 	orrs.w	ip, r4, r0
 23f5a76:	bf04      	itt	eq
 23f5a78:	4619      	moveq	r1, r3
 23f5a7a:	4610      	moveq	r0, r2
 23f5a7c:	bd30      	pop	{r4, r5, pc}
 23f5a7e:	ea91 0f03 	teq	r1, r3
 23f5a82:	bf1e      	ittt	ne
 23f5a84:	2100      	movne	r1, #0
 23f5a86:	2000      	movne	r0, #0
 23f5a88:	bd30      	popne	{r4, r5, pc}
 23f5a8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f5a8e:	d105      	bne.n	23f5a9c <__adddf3+0x230>
 23f5a90:	0040      	lsls	r0, r0, #1
 23f5a92:	4149      	adcs	r1, r1
 23f5a94:	bf28      	it	cs
 23f5a96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f5a9a:	bd30      	pop	{r4, r5, pc}
 23f5a9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f5aa0:	bf3c      	itt	cc
 23f5aa2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f5aa6:	bd30      	popcc	{r4, r5, pc}
 23f5aa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5aac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f5ab0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f5ab4:	f04f 0000 	mov.w	r0, #0
 23f5ab8:	bd30      	pop	{r4, r5, pc}
 23f5aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f5abe:	bf1a      	itte	ne
 23f5ac0:	4619      	movne	r1, r3
 23f5ac2:	4610      	movne	r0, r2
 23f5ac4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f5ac8:	bf1c      	itt	ne
 23f5aca:	460b      	movne	r3, r1
 23f5acc:	4602      	movne	r2, r0
 23f5ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f5ad2:	bf06      	itte	eq
 23f5ad4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f5ad8:	ea91 0f03 	teqeq	r1, r3
 23f5adc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f5ae0:	bd30      	pop	{r4, r5, pc}
 23f5ae2:	bf00      	nop

023f5ae4 <__aeabi_ui2d>:
 23f5ae4:	f090 0f00 	teq	r0, #0
 23f5ae8:	bf04      	itt	eq
 23f5aea:	2100      	moveq	r1, #0
 23f5aec:	4770      	bxeq	lr
 23f5aee:	b530      	push	{r4, r5, lr}
 23f5af0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5af4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5af8:	f04f 0500 	mov.w	r5, #0
 23f5afc:	f04f 0100 	mov.w	r1, #0
 23f5b00:	e750      	b.n	23f59a4 <__adddf3+0x138>
 23f5b02:	bf00      	nop

023f5b04 <__aeabi_i2d>:
 23f5b04:	f090 0f00 	teq	r0, #0
 23f5b08:	bf04      	itt	eq
 23f5b0a:	2100      	moveq	r1, #0
 23f5b0c:	4770      	bxeq	lr
 23f5b0e:	b530      	push	{r4, r5, lr}
 23f5b10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5b14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5b18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f5b1c:	bf48      	it	mi
 23f5b1e:	4240      	negmi	r0, r0
 23f5b20:	f04f 0100 	mov.w	r1, #0
 23f5b24:	e73e      	b.n	23f59a4 <__adddf3+0x138>
 23f5b26:	bf00      	nop

023f5b28 <__aeabi_f2d>:
 23f5b28:	0042      	lsls	r2, r0, #1
 23f5b2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f5b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 23f5b32:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f5b36:	bf1f      	itttt	ne
 23f5b38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f5b3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f5b40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f5b44:	4770      	bxne	lr
 23f5b46:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f5b4a:	bf08      	it	eq
 23f5b4c:	4770      	bxeq	lr
 23f5b4e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f5b52:	bf04      	itt	eq
 23f5b54:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f5b58:	4770      	bxeq	lr
 23f5b5a:	b530      	push	{r4, r5, lr}
 23f5b5c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f5b60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f5b64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f5b68:	e71c      	b.n	23f59a4 <__adddf3+0x138>
 23f5b6a:	bf00      	nop

023f5b6c <__aeabi_ul2d>:
 23f5b6c:	ea50 0201 	orrs.w	r2, r0, r1
 23f5b70:	bf08      	it	eq
 23f5b72:	4770      	bxeq	lr
 23f5b74:	b530      	push	{r4, r5, lr}
 23f5b76:	f04f 0500 	mov.w	r5, #0
 23f5b7a:	e00a      	b.n	23f5b92 <__aeabi_l2d+0x16>

023f5b7c <__aeabi_l2d>:
 23f5b7c:	ea50 0201 	orrs.w	r2, r0, r1
 23f5b80:	bf08      	it	eq
 23f5b82:	4770      	bxeq	lr
 23f5b84:	b530      	push	{r4, r5, lr}
 23f5b86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f5b8a:	d502      	bpl.n	23f5b92 <__aeabi_l2d+0x16>
 23f5b8c:	4240      	negs	r0, r0
 23f5b8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f5b92:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f5b96:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f5b9a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f5b9e:	f43f aed8 	beq.w	23f5952 <__adddf3+0xe6>
 23f5ba2:	f04f 0203 	mov.w	r2, #3
 23f5ba6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f5baa:	bf18      	it	ne
 23f5bac:	3203      	addne	r2, #3
 23f5bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f5bb2:	bf18      	it	ne
 23f5bb4:	3203      	addne	r2, #3
 23f5bb6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f5bba:	f1c2 0320 	rsb	r3, r2, #32
 23f5bbe:	fa00 fc03 	lsl.w	ip, r0, r3
 23f5bc2:	fa20 f002 	lsr.w	r0, r0, r2
 23f5bc6:	fa01 fe03 	lsl.w	lr, r1, r3
 23f5bca:	ea40 000e 	orr.w	r0, r0, lr
 23f5bce:	fa21 f102 	lsr.w	r1, r1, r2
 23f5bd2:	4414      	add	r4, r2
 23f5bd4:	e6bd      	b.n	23f5952 <__adddf3+0xe6>
 23f5bd6:	bf00      	nop

023f5bd8 <__aeabi_dmul>:
 23f5bd8:	b570      	push	{r4, r5, r6, lr}
 23f5bda:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f5bde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f5be2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f5be6:	bf1d      	ittte	ne
 23f5be8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f5bec:	ea94 0f0c 	teqne	r4, ip
 23f5bf0:	ea95 0f0c 	teqne	r5, ip
 23f5bf4:	f000 f8de 	bleq	23f5db4 <__aeabi_dmul+0x1dc>
 23f5bf8:	442c      	add	r4, r5
 23f5bfa:	ea81 0603 	eor.w	r6, r1, r3
 23f5bfe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f5c02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f5c06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f5c0a:	bf18      	it	ne
 23f5c0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f5c10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f5c18:	d038      	beq.n	23f5c8c <__aeabi_dmul+0xb4>
 23f5c1a:	fba0 ce02 	umull	ip, lr, r0, r2
 23f5c1e:	f04f 0500 	mov.w	r5, #0
 23f5c22:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f5c26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f5c2a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f5c2e:	f04f 0600 	mov.w	r6, #0
 23f5c32:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f5c36:	f09c 0f00 	teq	ip, #0
 23f5c3a:	bf18      	it	ne
 23f5c3c:	f04e 0e01 	orrne.w	lr, lr, #1
 23f5c40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f5c44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f5c48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f5c4c:	d204      	bcs.n	23f5c58 <__aeabi_dmul+0x80>
 23f5c4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f5c52:	416d      	adcs	r5, r5
 23f5c54:	eb46 0606 	adc.w	r6, r6, r6
 23f5c58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f5c5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f5c60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f5c64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f5c68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f5c6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f5c70:	bf88      	it	hi
 23f5c72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f5c76:	d81e      	bhi.n	23f5cb6 <__aeabi_dmul+0xde>
 23f5c78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f5c7c:	bf08      	it	eq
 23f5c7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f5c82:	f150 0000 	adcs.w	r0, r0, #0
 23f5c86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f5c8a:	bd70      	pop	{r4, r5, r6, pc}
 23f5c8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f5c90:	ea46 0101 	orr.w	r1, r6, r1
 23f5c94:	ea40 0002 	orr.w	r0, r0, r2
 23f5c98:	ea81 0103 	eor.w	r1, r1, r3
 23f5c9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f5ca0:	bfc2      	ittt	gt
 23f5ca2:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f5ca6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f5caa:	bd70      	popgt	{r4, r5, r6, pc}
 23f5cac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5cb0:	f04f 0e00 	mov.w	lr, #0
 23f5cb4:	3c01      	subs	r4, #1
 23f5cb6:	f300 80ab 	bgt.w	23f5e10 <__aeabi_dmul+0x238>
 23f5cba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f5cbe:	bfde      	ittt	le
 23f5cc0:	2000      	movle	r0, #0
 23f5cc2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f5cc6:	bd70      	pople	{r4, r5, r6, pc}
 23f5cc8:	f1c4 0400 	rsb	r4, r4, #0
 23f5ccc:	3c20      	subs	r4, #32
 23f5cce:	da35      	bge.n	23f5d3c <__aeabi_dmul+0x164>
 23f5cd0:	340c      	adds	r4, #12
 23f5cd2:	dc1b      	bgt.n	23f5d0c <__aeabi_dmul+0x134>
 23f5cd4:	f104 0414 	add.w	r4, r4, #20
 23f5cd8:	f1c4 0520 	rsb	r5, r4, #32
 23f5cdc:	fa00 f305 	lsl.w	r3, r0, r5
 23f5ce0:	fa20 f004 	lsr.w	r0, r0, r4
 23f5ce4:	fa01 f205 	lsl.w	r2, r1, r5
 23f5ce8:	ea40 0002 	orr.w	r0, r0, r2
 23f5cec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f5cf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f5cf4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f5cf8:	fa21 f604 	lsr.w	r6, r1, r4
 23f5cfc:	eb42 0106 	adc.w	r1, r2, r6
 23f5d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f5d04:	bf08      	it	eq
 23f5d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f5d0a:	bd70      	pop	{r4, r5, r6, pc}
 23f5d0c:	f1c4 040c 	rsb	r4, r4, #12
 23f5d10:	f1c4 0520 	rsb	r5, r4, #32
 23f5d14:	fa00 f304 	lsl.w	r3, r0, r4
 23f5d18:	fa20 f005 	lsr.w	r0, r0, r5
 23f5d1c:	fa01 f204 	lsl.w	r2, r1, r4
 23f5d20:	ea40 0002 	orr.w	r0, r0, r2
 23f5d24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5d28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f5d2c:	f141 0100 	adc.w	r1, r1, #0
 23f5d30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f5d34:	bf08      	it	eq
 23f5d36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f5d3a:	bd70      	pop	{r4, r5, r6, pc}
 23f5d3c:	f1c4 0520 	rsb	r5, r4, #32
 23f5d40:	fa00 f205 	lsl.w	r2, r0, r5
 23f5d44:	ea4e 0e02 	orr.w	lr, lr, r2
 23f5d48:	fa20 f304 	lsr.w	r3, r0, r4
 23f5d4c:	fa01 f205 	lsl.w	r2, r1, r5
 23f5d50:	ea43 0302 	orr.w	r3, r3, r2
 23f5d54:	fa21 f004 	lsr.w	r0, r1, r4
 23f5d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5d5c:	fa21 f204 	lsr.w	r2, r1, r4
 23f5d60:	ea20 0002 	bic.w	r0, r0, r2
 23f5d64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f5d68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f5d6c:	bf08      	it	eq
 23f5d6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f5d72:	bd70      	pop	{r4, r5, r6, pc}
 23f5d74:	f094 0f00 	teq	r4, #0
 23f5d78:	d10f      	bne.n	23f5d9a <__aeabi_dmul+0x1c2>
 23f5d7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f5d7e:	0040      	lsls	r0, r0, #1
 23f5d80:	eb41 0101 	adc.w	r1, r1, r1
 23f5d84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f5d88:	bf08      	it	eq
 23f5d8a:	3c01      	subeq	r4, #1
 23f5d8c:	d0f7      	beq.n	23f5d7e <__aeabi_dmul+0x1a6>
 23f5d8e:	ea41 0106 	orr.w	r1, r1, r6
 23f5d92:	f095 0f00 	teq	r5, #0
 23f5d96:	bf18      	it	ne
 23f5d98:	4770      	bxne	lr
 23f5d9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f5d9e:	0052      	lsls	r2, r2, #1
 23f5da0:	eb43 0303 	adc.w	r3, r3, r3
 23f5da4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f5da8:	bf08      	it	eq
 23f5daa:	3d01      	subeq	r5, #1
 23f5dac:	d0f7      	beq.n	23f5d9e <__aeabi_dmul+0x1c6>
 23f5dae:	ea43 0306 	orr.w	r3, r3, r6
 23f5db2:	4770      	bx	lr
 23f5db4:	ea94 0f0c 	teq	r4, ip
 23f5db8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f5dbc:	bf18      	it	ne
 23f5dbe:	ea95 0f0c 	teqne	r5, ip
 23f5dc2:	d00c      	beq.n	23f5dde <__aeabi_dmul+0x206>
 23f5dc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f5dc8:	bf18      	it	ne
 23f5dca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f5dce:	d1d1      	bne.n	23f5d74 <__aeabi_dmul+0x19c>
 23f5dd0:	ea81 0103 	eor.w	r1, r1, r3
 23f5dd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5dd8:	f04f 0000 	mov.w	r0, #0
 23f5ddc:	bd70      	pop	{r4, r5, r6, pc}
 23f5dde:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f5de2:	bf06      	itte	eq
 23f5de4:	4610      	moveq	r0, r2
 23f5de6:	4619      	moveq	r1, r3
 23f5de8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f5dec:	d019      	beq.n	23f5e22 <__aeabi_dmul+0x24a>
 23f5dee:	ea94 0f0c 	teq	r4, ip
 23f5df2:	d102      	bne.n	23f5dfa <__aeabi_dmul+0x222>
 23f5df4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f5df8:	d113      	bne.n	23f5e22 <__aeabi_dmul+0x24a>
 23f5dfa:	ea95 0f0c 	teq	r5, ip
 23f5dfe:	d105      	bne.n	23f5e0c <__aeabi_dmul+0x234>
 23f5e00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f5e04:	bf1c      	itt	ne
 23f5e06:	4610      	movne	r0, r2
 23f5e08:	4619      	movne	r1, r3
 23f5e0a:	d10a      	bne.n	23f5e22 <__aeabi_dmul+0x24a>
 23f5e0c:	ea81 0103 	eor.w	r1, r1, r3
 23f5e10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f5e14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f5e18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f5e1c:	f04f 0000 	mov.w	r0, #0
 23f5e20:	bd70      	pop	{r4, r5, r6, pc}
 23f5e22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f5e26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f5e2a:	bd70      	pop	{r4, r5, r6, pc}

023f5e2c <__aeabi_ddiv>:
 23f5e2c:	b570      	push	{r4, r5, r6, lr}
 23f5e2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f5e32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f5e36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f5e3a:	bf1d      	ittte	ne
 23f5e3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f5e40:	ea94 0f0c 	teqne	r4, ip
 23f5e44:	ea95 0f0c 	teqne	r5, ip
 23f5e48:	f000 f8a7 	bleq	23f5f9a <__aeabi_ddiv+0x16e>
 23f5e4c:	eba4 0405 	sub.w	r4, r4, r5
 23f5e50:	ea81 0e03 	eor.w	lr, r1, r3
 23f5e54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f5e58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f5e5c:	f000 8088 	beq.w	23f5f70 <__aeabi_ddiv+0x144>
 23f5e60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f5e64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f5e68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f5e6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f5e70:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f5e74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f5e78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f5e7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f5e80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f5e84:	429d      	cmp	r5, r3
 23f5e86:	bf08      	it	eq
 23f5e88:	4296      	cmpeq	r6, r2
 23f5e8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f5e8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f5e92:	d202      	bcs.n	23f5e9a <__aeabi_ddiv+0x6e>
 23f5e94:	085b      	lsrs	r3, r3, #1
 23f5e96:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5e9a:	1ab6      	subs	r6, r6, r2
 23f5e9c:	eb65 0503 	sbc.w	r5, r5, r3
 23f5ea0:	085b      	lsrs	r3, r3, #1
 23f5ea2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5ea6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f5eaa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f5eae:	ebb6 0e02 	subs.w	lr, r6, r2
 23f5eb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f5eb6:	bf22      	ittt	cs
 23f5eb8:	1ab6      	subcs	r6, r6, r2
 23f5eba:	4675      	movcs	r5, lr
 23f5ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 23f5ec0:	085b      	lsrs	r3, r3, #1
 23f5ec2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5ec6:	ebb6 0e02 	subs.w	lr, r6, r2
 23f5eca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f5ece:	bf22      	ittt	cs
 23f5ed0:	1ab6      	subcs	r6, r6, r2
 23f5ed2:	4675      	movcs	r5, lr
 23f5ed4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f5ed8:	085b      	lsrs	r3, r3, #1
 23f5eda:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5ede:	ebb6 0e02 	subs.w	lr, r6, r2
 23f5ee2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f5ee6:	bf22      	ittt	cs
 23f5ee8:	1ab6      	subcs	r6, r6, r2
 23f5eea:	4675      	movcs	r5, lr
 23f5eec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f5ef0:	085b      	lsrs	r3, r3, #1
 23f5ef2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f5ef6:	ebb6 0e02 	subs.w	lr, r6, r2
 23f5efa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f5efe:	bf22      	ittt	cs
 23f5f00:	1ab6      	subcs	r6, r6, r2
 23f5f02:	4675      	movcs	r5, lr
 23f5f04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f5f08:	ea55 0e06 	orrs.w	lr, r5, r6
 23f5f0c:	d018      	beq.n	23f5f40 <__aeabi_ddiv+0x114>
 23f5f0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f5f12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f5f16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f5f1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f5f1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f5f22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f5f26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f5f2a:	d1c0      	bne.n	23f5eae <__aeabi_ddiv+0x82>
 23f5f2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f5f30:	d10b      	bne.n	23f5f4a <__aeabi_ddiv+0x11e>
 23f5f32:	ea41 0100 	orr.w	r1, r1, r0
 23f5f36:	f04f 0000 	mov.w	r0, #0
 23f5f3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f5f3e:	e7b6      	b.n	23f5eae <__aeabi_ddiv+0x82>
 23f5f40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f5f44:	bf04      	itt	eq
 23f5f46:	4301      	orreq	r1, r0
 23f5f48:	2000      	moveq	r0, #0
 23f5f4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f5f4e:	bf88      	it	hi
 23f5f50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f5f54:	f63f aeaf 	bhi.w	23f5cb6 <__aeabi_dmul+0xde>
 23f5f58:	ebb5 0c03 	subs.w	ip, r5, r3
 23f5f5c:	bf04      	itt	eq
 23f5f5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f5f62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f5f66:	f150 0000 	adcs.w	r0, r0, #0
 23f5f6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f5f6e:	bd70      	pop	{r4, r5, r6, pc}
 23f5f70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f5f74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f5f78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f5f7c:	bfc2      	ittt	gt
 23f5f7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f5f82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f5f86:	bd70      	popgt	{r4, r5, r6, pc}
 23f5f88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f5f8c:	f04f 0e00 	mov.w	lr, #0
 23f5f90:	3c01      	subs	r4, #1
 23f5f92:	e690      	b.n	23f5cb6 <__aeabi_dmul+0xde>
 23f5f94:	ea45 0e06 	orr.w	lr, r5, r6
 23f5f98:	e68d      	b.n	23f5cb6 <__aeabi_dmul+0xde>
 23f5f9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f5f9e:	ea94 0f0c 	teq	r4, ip
 23f5fa2:	bf08      	it	eq
 23f5fa4:	ea95 0f0c 	teqeq	r5, ip
 23f5fa8:	f43f af3b 	beq.w	23f5e22 <__aeabi_dmul+0x24a>
 23f5fac:	ea94 0f0c 	teq	r4, ip
 23f5fb0:	d10a      	bne.n	23f5fc8 <__aeabi_ddiv+0x19c>
 23f5fb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f5fb6:	f47f af34 	bne.w	23f5e22 <__aeabi_dmul+0x24a>
 23f5fba:	ea95 0f0c 	teq	r5, ip
 23f5fbe:	f47f af25 	bne.w	23f5e0c <__aeabi_dmul+0x234>
 23f5fc2:	4610      	mov	r0, r2
 23f5fc4:	4619      	mov	r1, r3
 23f5fc6:	e72c      	b.n	23f5e22 <__aeabi_dmul+0x24a>
 23f5fc8:	ea95 0f0c 	teq	r5, ip
 23f5fcc:	d106      	bne.n	23f5fdc <__aeabi_ddiv+0x1b0>
 23f5fce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f5fd2:	f43f aefd 	beq.w	23f5dd0 <__aeabi_dmul+0x1f8>
 23f5fd6:	4610      	mov	r0, r2
 23f5fd8:	4619      	mov	r1, r3
 23f5fda:	e722      	b.n	23f5e22 <__aeabi_dmul+0x24a>
 23f5fdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f5fe0:	bf18      	it	ne
 23f5fe2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f5fe6:	f47f aec5 	bne.w	23f5d74 <__aeabi_dmul+0x19c>
 23f5fea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f5fee:	f47f af0d 	bne.w	23f5e0c <__aeabi_dmul+0x234>
 23f5ff2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f5ff6:	f47f aeeb 	bne.w	23f5dd0 <__aeabi_dmul+0x1f8>
 23f5ffa:	e712      	b.n	23f5e22 <__aeabi_dmul+0x24a>

023f5ffc <__gedf2>:
 23f5ffc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f6000:	e006      	b.n	23f6010 <__cmpdf2+0x4>
 23f6002:	bf00      	nop

023f6004 <__ledf2>:
 23f6004:	f04f 0c01 	mov.w	ip, #1
 23f6008:	e002      	b.n	23f6010 <__cmpdf2+0x4>
 23f600a:	bf00      	nop

023f600c <__cmpdf2>:
 23f600c:	f04f 0c01 	mov.w	ip, #1
 23f6010:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f6014:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f6018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f601c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f6020:	bf18      	it	ne
 23f6022:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f6026:	d01b      	beq.n	23f6060 <__cmpdf2+0x54>
 23f6028:	b001      	add	sp, #4
 23f602a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f602e:	bf0c      	ite	eq
 23f6030:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f6034:	ea91 0f03 	teqne	r1, r3
 23f6038:	bf02      	ittt	eq
 23f603a:	ea90 0f02 	teqeq	r0, r2
 23f603e:	2000      	moveq	r0, #0
 23f6040:	4770      	bxeq	lr
 23f6042:	f110 0f00 	cmn.w	r0, #0
 23f6046:	ea91 0f03 	teq	r1, r3
 23f604a:	bf58      	it	pl
 23f604c:	4299      	cmppl	r1, r3
 23f604e:	bf08      	it	eq
 23f6050:	4290      	cmpeq	r0, r2
 23f6052:	bf2c      	ite	cs
 23f6054:	17d8      	asrcs	r0, r3, #31
 23f6056:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f605a:	f040 0001 	orr.w	r0, r0, #1
 23f605e:	4770      	bx	lr
 23f6060:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f6064:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f6068:	d102      	bne.n	23f6070 <__cmpdf2+0x64>
 23f606a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f606e:	d107      	bne.n	23f6080 <__cmpdf2+0x74>
 23f6070:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f6074:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f6078:	d1d6      	bne.n	23f6028 <__cmpdf2+0x1c>
 23f607a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f607e:	d0d3      	beq.n	23f6028 <__cmpdf2+0x1c>
 23f6080:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f6084:	4770      	bx	lr
 23f6086:	bf00      	nop

023f6088 <__aeabi_cdrcmple>:
 23f6088:	4684      	mov	ip, r0
 23f608a:	4610      	mov	r0, r2
 23f608c:	4662      	mov	r2, ip
 23f608e:	468c      	mov	ip, r1
 23f6090:	4619      	mov	r1, r3
 23f6092:	4663      	mov	r3, ip
 23f6094:	e000      	b.n	23f6098 <__aeabi_cdcmpeq>
 23f6096:	bf00      	nop

023f6098 <__aeabi_cdcmpeq>:
 23f6098:	b501      	push	{r0, lr}
 23f609a:	f7ff ffb7 	bl	23f600c <__cmpdf2>
 23f609e:	2800      	cmp	r0, #0
 23f60a0:	bf48      	it	mi
 23f60a2:	f110 0f00 	cmnmi.w	r0, #0
 23f60a6:	bd01      	pop	{r0, pc}

023f60a8 <__aeabi_dcmpeq>:
 23f60a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f60ac:	f7ff fff4 	bl	23f6098 <__aeabi_cdcmpeq>
 23f60b0:	bf0c      	ite	eq
 23f60b2:	2001      	moveq	r0, #1
 23f60b4:	2000      	movne	r0, #0
 23f60b6:	f85d fb08 	ldr.w	pc, [sp], #8
 23f60ba:	bf00      	nop

023f60bc <__aeabi_dcmplt>:
 23f60bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f60c0:	f7ff ffea 	bl	23f6098 <__aeabi_cdcmpeq>
 23f60c4:	bf34      	ite	cc
 23f60c6:	2001      	movcc	r0, #1
 23f60c8:	2000      	movcs	r0, #0
 23f60ca:	f85d fb08 	ldr.w	pc, [sp], #8
 23f60ce:	bf00      	nop

023f60d0 <__aeabi_dcmple>:
 23f60d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f60d4:	f7ff ffe0 	bl	23f6098 <__aeabi_cdcmpeq>
 23f60d8:	bf94      	ite	ls
 23f60da:	2001      	movls	r0, #1
 23f60dc:	2000      	movhi	r0, #0
 23f60de:	f85d fb08 	ldr.w	pc, [sp], #8
 23f60e2:	bf00      	nop

023f60e4 <__aeabi_dcmpge>:
 23f60e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f60e8:	f7ff ffce 	bl	23f6088 <__aeabi_cdrcmple>
 23f60ec:	bf94      	ite	ls
 23f60ee:	2001      	movls	r0, #1
 23f60f0:	2000      	movhi	r0, #0
 23f60f2:	f85d fb08 	ldr.w	pc, [sp], #8
 23f60f6:	bf00      	nop

023f60f8 <__aeabi_dcmpgt>:
 23f60f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f60fc:	f7ff ffc4 	bl	23f6088 <__aeabi_cdrcmple>
 23f6100:	bf34      	ite	cc
 23f6102:	2001      	movcc	r0, #1
 23f6104:	2000      	movcs	r0, #0
 23f6106:	f85d fb08 	ldr.w	pc, [sp], #8
 23f610a:	bf00      	nop

023f610c <__aeabi_dcmpun>:
 23f610c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f6110:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f6114:	d102      	bne.n	23f611c <__aeabi_dcmpun+0x10>
 23f6116:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f611a:	d10a      	bne.n	23f6132 <__aeabi_dcmpun+0x26>
 23f611c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f6120:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f6124:	d102      	bne.n	23f612c <__aeabi_dcmpun+0x20>
 23f6126:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f612a:	d102      	bne.n	23f6132 <__aeabi_dcmpun+0x26>
 23f612c:	f04f 0000 	mov.w	r0, #0
 23f6130:	4770      	bx	lr
 23f6132:	f04f 0001 	mov.w	r0, #1
 23f6136:	4770      	bx	lr

023f6138 <__aeabi_d2iz>:
 23f6138:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f613c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f6140:	d215      	bcs.n	23f616e <__aeabi_d2iz+0x36>
 23f6142:	d511      	bpl.n	23f6168 <__aeabi_d2iz+0x30>
 23f6144:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f6148:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f614c:	d912      	bls.n	23f6174 <__aeabi_d2iz+0x3c>
 23f614e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f6152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f6156:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f615a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f615e:	fa23 f002 	lsr.w	r0, r3, r2
 23f6162:	bf18      	it	ne
 23f6164:	4240      	negne	r0, r0
 23f6166:	4770      	bx	lr
 23f6168:	f04f 0000 	mov.w	r0, #0
 23f616c:	4770      	bx	lr
 23f616e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f6172:	d105      	bne.n	23f6180 <__aeabi_d2iz+0x48>
 23f6174:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23f6178:	bf08      	it	eq
 23f617a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23f617e:	4770      	bx	lr
 23f6180:	f04f 0000 	mov.w	r0, #0
 23f6184:	4770      	bx	lr
 23f6186:	bf00      	nop

023f6188 <__aeabi_d2uiz>:
 23f6188:	004a      	lsls	r2, r1, #1
 23f618a:	d211      	bcs.n	23f61b0 <__aeabi_d2uiz+0x28>
 23f618c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f6190:	d211      	bcs.n	23f61b6 <__aeabi_d2uiz+0x2e>
 23f6192:	d50d      	bpl.n	23f61b0 <__aeabi_d2uiz+0x28>
 23f6194:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f6198:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f619c:	d40e      	bmi.n	23f61bc <__aeabi_d2uiz+0x34>
 23f619e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f61a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f61a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f61aa:	fa23 f002 	lsr.w	r0, r3, r2
 23f61ae:	4770      	bx	lr
 23f61b0:	f04f 0000 	mov.w	r0, #0
 23f61b4:	4770      	bx	lr
 23f61b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f61ba:	d102      	bne.n	23f61c2 <__aeabi_d2uiz+0x3a>
 23f61bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f61c0:	4770      	bx	lr
 23f61c2:	f04f 0000 	mov.w	r0, #0
 23f61c6:	4770      	bx	lr

023f61c8 <__aeabi_d2f>:
 23f61c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f61cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f61d0:	bf24      	itt	cs
 23f61d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f61d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f61da:	d90d      	bls.n	23f61f8 <__aeabi_d2f+0x30>
 23f61dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f61e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f61e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f61e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f61ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f61f0:	bf08      	it	eq
 23f61f2:	f020 0001 	biceq.w	r0, r0, #1
 23f61f6:	4770      	bx	lr
 23f61f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f61fc:	d121      	bne.n	23f6242 <__aeabi_d2f+0x7a>
 23f61fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f6202:	bfbc      	itt	lt
 23f6204:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f6208:	4770      	bxlt	lr
 23f620a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f620e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f6212:	f1c2 0218 	rsb	r2, r2, #24
 23f6216:	f1c2 0c20 	rsb	ip, r2, #32
 23f621a:	fa10 f30c 	lsls.w	r3, r0, ip
 23f621e:	fa20 f002 	lsr.w	r0, r0, r2
 23f6222:	bf18      	it	ne
 23f6224:	f040 0001 	orrne.w	r0, r0, #1
 23f6228:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f622c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f6230:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f6234:	ea40 000c 	orr.w	r0, r0, ip
 23f6238:	fa23 f302 	lsr.w	r3, r3, r2
 23f623c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f6240:	e7cc      	b.n	23f61dc <__aeabi_d2f+0x14>
 23f6242:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f6246:	d107      	bne.n	23f6258 <__aeabi_d2f+0x90>
 23f6248:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f624c:	bf1e      	ittt	ne
 23f624e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f6252:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f6256:	4770      	bxne	lr
 23f6258:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f625c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f6260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f6264:	4770      	bx	lr
 23f6266:	bf00      	nop

023f6268 <__aeabi_ldivmod>:
 23f6268:	b97b      	cbnz	r3, 23f628a <__aeabi_ldivmod+0x22>
 23f626a:	b972      	cbnz	r2, 23f628a <__aeabi_ldivmod+0x22>
 23f626c:	2900      	cmp	r1, #0
 23f626e:	bfbe      	ittt	lt
 23f6270:	2000      	movlt	r0, #0
 23f6272:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23f6276:	e006      	blt.n	23f6286 <__aeabi_ldivmod+0x1e>
 23f6278:	bf08      	it	eq
 23f627a:	2800      	cmpeq	r0, #0
 23f627c:	bf1c      	itt	ne
 23f627e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23f6282:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23f6286:	f000 b9eb 	b.w	23f6660 <__aeabi_idiv0>
 23f628a:	f1ad 0c08 	sub.w	ip, sp, #8
 23f628e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23f6292:	2900      	cmp	r1, #0
 23f6294:	db09      	blt.n	23f62aa <__aeabi_ldivmod+0x42>
 23f6296:	2b00      	cmp	r3, #0
 23f6298:	db1a      	blt.n	23f62d0 <__aeabi_ldivmod+0x68>
 23f629a:	f000 f86b 	bl	23f6374 <__udivmoddi4>
 23f629e:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f62a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f62a6:	b004      	add	sp, #16
 23f62a8:	4770      	bx	lr
 23f62aa:	4240      	negs	r0, r0
 23f62ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f62b0:	2b00      	cmp	r3, #0
 23f62b2:	db1b      	blt.n	23f62ec <__aeabi_ldivmod+0x84>
 23f62b4:	f000 f85e 	bl	23f6374 <__udivmoddi4>
 23f62b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f62bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f62c0:	b004      	add	sp, #16
 23f62c2:	4240      	negs	r0, r0
 23f62c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f62c8:	4252      	negs	r2, r2
 23f62ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f62ce:	4770      	bx	lr
 23f62d0:	4252      	negs	r2, r2
 23f62d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f62d6:	f000 f84d 	bl	23f6374 <__udivmoddi4>
 23f62da:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f62de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f62e2:	b004      	add	sp, #16
 23f62e4:	4240      	negs	r0, r0
 23f62e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f62ea:	4770      	bx	lr
 23f62ec:	4252      	negs	r2, r2
 23f62ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f62f2:	f000 f83f 	bl	23f6374 <__udivmoddi4>
 23f62f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 23f62fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23f62fe:	b004      	add	sp, #16
 23f6300:	4252      	negs	r2, r2
 23f6302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f6306:	4770      	bx	lr

023f6308 <__aeabi_d2lz>:
 23f6308:	b538      	push	{r3, r4, r5, lr}
 23f630a:	2200      	movs	r2, #0
 23f630c:	2300      	movs	r3, #0
 23f630e:	4604      	mov	r4, r0
 23f6310:	460d      	mov	r5, r1
 23f6312:	f7ff fed3 	bl	23f60bc <__aeabi_dcmplt>
 23f6316:	b928      	cbnz	r0, 23f6324 <__aeabi_d2lz+0x1c>
 23f6318:	4620      	mov	r0, r4
 23f631a:	4629      	mov	r1, r5
 23f631c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f6320:	f000 b80a 	b.w	23f6338 <__aeabi_d2ulz>
 23f6324:	4620      	mov	r0, r4
 23f6326:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23f632a:	f000 f805 	bl	23f6338 <__aeabi_d2ulz>
 23f632e:	4240      	negs	r0, r0
 23f6330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f6334:	bd38      	pop	{r3, r4, r5, pc}
 23f6336:	bf00      	nop

023f6338 <__aeabi_d2ulz>:
 23f6338:	b5d0      	push	{r4, r6, r7, lr}
 23f633a:	2200      	movs	r2, #0
 23f633c:	4b0b      	ldr	r3, [pc, #44]	; (23f636c <__aeabi_d2ulz+0x34>)
 23f633e:	4606      	mov	r6, r0
 23f6340:	460f      	mov	r7, r1
 23f6342:	f7ff fc49 	bl	23f5bd8 <__aeabi_dmul>
 23f6346:	f7ff ff1f 	bl	23f6188 <__aeabi_d2uiz>
 23f634a:	4604      	mov	r4, r0
 23f634c:	f7ff fbca 	bl	23f5ae4 <__aeabi_ui2d>
 23f6350:	2200      	movs	r2, #0
 23f6352:	4b07      	ldr	r3, [pc, #28]	; (23f6370 <__aeabi_d2ulz+0x38>)
 23f6354:	f7ff fc40 	bl	23f5bd8 <__aeabi_dmul>
 23f6358:	4602      	mov	r2, r0
 23f635a:	460b      	mov	r3, r1
 23f635c:	4630      	mov	r0, r6
 23f635e:	4639      	mov	r1, r7
 23f6360:	f7ff fa82 	bl	23f5868 <__aeabi_dsub>
 23f6364:	f7ff ff10 	bl	23f6188 <__aeabi_d2uiz>
 23f6368:	4621      	mov	r1, r4
 23f636a:	bdd0      	pop	{r4, r6, r7, pc}
 23f636c:	3df00000 	.word	0x3df00000
 23f6370:	41f00000 	.word	0x41f00000

023f6374 <__udivmoddi4>:
 23f6374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6378:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23f637a:	4604      	mov	r4, r0
 23f637c:	460f      	mov	r7, r1
 23f637e:	2b00      	cmp	r3, #0
 23f6380:	d148      	bne.n	23f6414 <__udivmoddi4+0xa0>
 23f6382:	428a      	cmp	r2, r1
 23f6384:	4694      	mov	ip, r2
 23f6386:	d961      	bls.n	23f644c <__udivmoddi4+0xd8>
 23f6388:	fab2 f382 	clz	r3, r2
 23f638c:	b143      	cbz	r3, 23f63a0 <__udivmoddi4+0x2c>
 23f638e:	f1c3 0120 	rsb	r1, r3, #32
 23f6392:	409f      	lsls	r7, r3
 23f6394:	fa02 fc03 	lsl.w	ip, r2, r3
 23f6398:	409c      	lsls	r4, r3
 23f639a:	fa20 f101 	lsr.w	r1, r0, r1
 23f639e:	430f      	orrs	r7, r1
 23f63a0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23f63a4:	fa1f fe8c 	uxth.w	lr, ip
 23f63a8:	0c22      	lsrs	r2, r4, #16
 23f63aa:	fbb7 f6f1 	udiv	r6, r7, r1
 23f63ae:	fb01 7716 	mls	r7, r1, r6, r7
 23f63b2:	fb06 f00e 	mul.w	r0, r6, lr
 23f63b6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23f63ba:	4290      	cmp	r0, r2
 23f63bc:	d908      	bls.n	23f63d0 <__udivmoddi4+0x5c>
 23f63be:	eb1c 0202 	adds.w	r2, ip, r2
 23f63c2:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23f63c6:	d202      	bcs.n	23f63ce <__udivmoddi4+0x5a>
 23f63c8:	4290      	cmp	r0, r2
 23f63ca:	f200 8137 	bhi.w	23f663c <__udivmoddi4+0x2c8>
 23f63ce:	463e      	mov	r6, r7
 23f63d0:	1a12      	subs	r2, r2, r0
 23f63d2:	b2a4      	uxth	r4, r4
 23f63d4:	fbb2 f0f1 	udiv	r0, r2, r1
 23f63d8:	fb01 2210 	mls	r2, r1, r0, r2
 23f63dc:	fb00 fe0e 	mul.w	lr, r0, lr
 23f63e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23f63e4:	45a6      	cmp	lr, r4
 23f63e6:	d908      	bls.n	23f63fa <__udivmoddi4+0x86>
 23f63e8:	eb1c 0404 	adds.w	r4, ip, r4
 23f63ec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23f63f0:	d202      	bcs.n	23f63f8 <__udivmoddi4+0x84>
 23f63f2:	45a6      	cmp	lr, r4
 23f63f4:	f200 811c 	bhi.w	23f6630 <__udivmoddi4+0x2bc>
 23f63f8:	4610      	mov	r0, r2
 23f63fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23f63fe:	eba4 040e 	sub.w	r4, r4, lr
 23f6402:	2600      	movs	r6, #0
 23f6404:	b11d      	cbz	r5, 23f640e <__udivmoddi4+0x9a>
 23f6406:	40dc      	lsrs	r4, r3
 23f6408:	2300      	movs	r3, #0
 23f640a:	e9c5 4300 	strd	r4, r3, [r5]
 23f640e:	4631      	mov	r1, r6
 23f6410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f6414:	428b      	cmp	r3, r1
 23f6416:	d909      	bls.n	23f642c <__udivmoddi4+0xb8>
 23f6418:	2d00      	cmp	r5, #0
 23f641a:	f000 80fd 	beq.w	23f6618 <__udivmoddi4+0x2a4>
 23f641e:	2600      	movs	r6, #0
 23f6420:	e9c5 0100 	strd	r0, r1, [r5]
 23f6424:	4630      	mov	r0, r6
 23f6426:	4631      	mov	r1, r6
 23f6428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f642c:	fab3 f683 	clz	r6, r3
 23f6430:	2e00      	cmp	r6, #0
 23f6432:	d14b      	bne.n	23f64cc <__udivmoddi4+0x158>
 23f6434:	428b      	cmp	r3, r1
 23f6436:	f0c0 80f2 	bcc.w	23f661e <__udivmoddi4+0x2aa>
 23f643a:	4282      	cmp	r2, r0
 23f643c:	f240 80ef 	bls.w	23f661e <__udivmoddi4+0x2aa>
 23f6440:	4630      	mov	r0, r6
 23f6442:	2d00      	cmp	r5, #0
 23f6444:	d0e3      	beq.n	23f640e <__udivmoddi4+0x9a>
 23f6446:	e9c5 4700 	strd	r4, r7, [r5]
 23f644a:	e7e0      	b.n	23f640e <__udivmoddi4+0x9a>
 23f644c:	b902      	cbnz	r2, 23f6450 <__udivmoddi4+0xdc>
 23f644e:	deff      	udf	#255	; 0xff
 23f6450:	fab2 f382 	clz	r3, r2
 23f6454:	2b00      	cmp	r3, #0
 23f6456:	f040 809d 	bne.w	23f6594 <__udivmoddi4+0x220>
 23f645a:	1a89      	subs	r1, r1, r2
 23f645c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23f6460:	b297      	uxth	r7, r2
 23f6462:	2601      	movs	r6, #1
 23f6464:	0c20      	lsrs	r0, r4, #16
 23f6466:	fbb1 f2fe 	udiv	r2, r1, lr
 23f646a:	fb0e 1112 	mls	r1, lr, r2, r1
 23f646e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f6472:	fb07 f002 	mul.w	r0, r7, r2
 23f6476:	4288      	cmp	r0, r1
 23f6478:	d90f      	bls.n	23f649a <__udivmoddi4+0x126>
 23f647a:	eb1c 0101 	adds.w	r1, ip, r1
 23f647e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23f6482:	bf2c      	ite	cs
 23f6484:	f04f 0901 	movcs.w	r9, #1
 23f6488:	f04f 0900 	movcc.w	r9, #0
 23f648c:	4288      	cmp	r0, r1
 23f648e:	d903      	bls.n	23f6498 <__udivmoddi4+0x124>
 23f6490:	f1b9 0f00 	cmp.w	r9, #0
 23f6494:	f000 80cf 	beq.w	23f6636 <__udivmoddi4+0x2c2>
 23f6498:	4642      	mov	r2, r8
 23f649a:	1a09      	subs	r1, r1, r0
 23f649c:	b2a4      	uxth	r4, r4
 23f649e:	fbb1 f0fe 	udiv	r0, r1, lr
 23f64a2:	fb0e 1110 	mls	r1, lr, r0, r1
 23f64a6:	fb00 f707 	mul.w	r7, r0, r7
 23f64aa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23f64ae:	42a7      	cmp	r7, r4
 23f64b0:	d908      	bls.n	23f64c4 <__udivmoddi4+0x150>
 23f64b2:	eb1c 0404 	adds.w	r4, ip, r4
 23f64b6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23f64ba:	d202      	bcs.n	23f64c2 <__udivmoddi4+0x14e>
 23f64bc:	42a7      	cmp	r7, r4
 23f64be:	f200 80b4 	bhi.w	23f662a <__udivmoddi4+0x2b6>
 23f64c2:	4608      	mov	r0, r1
 23f64c4:	1be4      	subs	r4, r4, r7
 23f64c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23f64ca:	e79b      	b.n	23f6404 <__udivmoddi4+0x90>
 23f64cc:	f1c6 0720 	rsb	r7, r6, #32
 23f64d0:	40b3      	lsls	r3, r6
 23f64d2:	fa01 f406 	lsl.w	r4, r1, r6
 23f64d6:	fa22 fc07 	lsr.w	ip, r2, r7
 23f64da:	40f9      	lsrs	r1, r7
 23f64dc:	40b2      	lsls	r2, r6
 23f64de:	ea4c 0c03 	orr.w	ip, ip, r3
 23f64e2:	fa20 f307 	lsr.w	r3, r0, r7
 23f64e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23f64ea:	431c      	orrs	r4, r3
 23f64ec:	fa1f fe8c 	uxth.w	lr, ip
 23f64f0:	fa00 f306 	lsl.w	r3, r0, r6
 23f64f4:	0c20      	lsrs	r0, r4, #16
 23f64f6:	fbb1 f8f9 	udiv	r8, r1, r9
 23f64fa:	fb09 1118 	mls	r1, r9, r8, r1
 23f64fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23f6502:	fb08 f00e 	mul.w	r0, r8, lr
 23f6506:	4288      	cmp	r0, r1
 23f6508:	d90f      	bls.n	23f652a <__udivmoddi4+0x1b6>
 23f650a:	eb1c 0101 	adds.w	r1, ip, r1
 23f650e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23f6512:	bf2c      	ite	cs
 23f6514:	f04f 0b01 	movcs.w	fp, #1
 23f6518:	f04f 0b00 	movcc.w	fp, #0
 23f651c:	4288      	cmp	r0, r1
 23f651e:	d903      	bls.n	23f6528 <__udivmoddi4+0x1b4>
 23f6520:	f1bb 0f00 	cmp.w	fp, #0
 23f6524:	f000 808d 	beq.w	23f6642 <__udivmoddi4+0x2ce>
 23f6528:	46d0      	mov	r8, sl
 23f652a:	1a09      	subs	r1, r1, r0
 23f652c:	b2a4      	uxth	r4, r4
 23f652e:	fbb1 f0f9 	udiv	r0, r1, r9
 23f6532:	fb09 1110 	mls	r1, r9, r0, r1
 23f6536:	fb00 fe0e 	mul.w	lr, r0, lr
 23f653a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23f653e:	458e      	cmp	lr, r1
 23f6540:	d907      	bls.n	23f6552 <__udivmoddi4+0x1de>
 23f6542:	eb1c 0101 	adds.w	r1, ip, r1
 23f6546:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23f654a:	d201      	bcs.n	23f6550 <__udivmoddi4+0x1dc>
 23f654c:	458e      	cmp	lr, r1
 23f654e:	d87f      	bhi.n	23f6650 <__udivmoddi4+0x2dc>
 23f6550:	4620      	mov	r0, r4
 23f6552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23f6556:	eba1 010e 	sub.w	r1, r1, lr
 23f655a:	fba0 9802 	umull	r9, r8, r0, r2
 23f655e:	4541      	cmp	r1, r8
 23f6560:	464c      	mov	r4, r9
 23f6562:	46c6      	mov	lr, r8
 23f6564:	d302      	bcc.n	23f656c <__udivmoddi4+0x1f8>
 23f6566:	d106      	bne.n	23f6576 <__udivmoddi4+0x202>
 23f6568:	454b      	cmp	r3, r9
 23f656a:	d204      	bcs.n	23f6576 <__udivmoddi4+0x202>
 23f656c:	3801      	subs	r0, #1
 23f656e:	ebb9 0402 	subs.w	r4, r9, r2
 23f6572:	eb68 0e0c 	sbc.w	lr, r8, ip
 23f6576:	2d00      	cmp	r5, #0
 23f6578:	d070      	beq.n	23f665c <__udivmoddi4+0x2e8>
 23f657a:	1b1a      	subs	r2, r3, r4
 23f657c:	eb61 010e 	sbc.w	r1, r1, lr
 23f6580:	fa22 f306 	lsr.w	r3, r2, r6
 23f6584:	fa01 f707 	lsl.w	r7, r1, r7
 23f6588:	40f1      	lsrs	r1, r6
 23f658a:	2600      	movs	r6, #0
 23f658c:	431f      	orrs	r7, r3
 23f658e:	e9c5 7100 	strd	r7, r1, [r5]
 23f6592:	e73c      	b.n	23f640e <__udivmoddi4+0x9a>
 23f6594:	fa02 fc03 	lsl.w	ip, r2, r3
 23f6598:	f1c3 0020 	rsb	r0, r3, #32
 23f659c:	fa01 f203 	lsl.w	r2, r1, r3
 23f65a0:	fa21 f600 	lsr.w	r6, r1, r0
 23f65a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23f65a8:	fa24 f100 	lsr.w	r1, r4, r0
 23f65ac:	fa1f f78c 	uxth.w	r7, ip
 23f65b0:	409c      	lsls	r4, r3
 23f65b2:	4311      	orrs	r1, r2
 23f65b4:	fbb6 f0fe 	udiv	r0, r6, lr
 23f65b8:	0c0a      	lsrs	r2, r1, #16
 23f65ba:	fb0e 6610 	mls	r6, lr, r0, r6
 23f65be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23f65c2:	fb00 f607 	mul.w	r6, r0, r7
 23f65c6:	4296      	cmp	r6, r2
 23f65c8:	d90e      	bls.n	23f65e8 <__udivmoddi4+0x274>
 23f65ca:	eb1c 0202 	adds.w	r2, ip, r2
 23f65ce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23f65d2:	bf2c      	ite	cs
 23f65d4:	f04f 0901 	movcs.w	r9, #1
 23f65d8:	f04f 0900 	movcc.w	r9, #0
 23f65dc:	4296      	cmp	r6, r2
 23f65de:	d902      	bls.n	23f65e6 <__udivmoddi4+0x272>
 23f65e0:	f1b9 0f00 	cmp.w	r9, #0
 23f65e4:	d031      	beq.n	23f664a <__udivmoddi4+0x2d6>
 23f65e6:	4640      	mov	r0, r8
 23f65e8:	1b92      	subs	r2, r2, r6
 23f65ea:	b289      	uxth	r1, r1
 23f65ec:	fbb2 f6fe 	udiv	r6, r2, lr
 23f65f0:	fb0e 2216 	mls	r2, lr, r6, r2
 23f65f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23f65f8:	fb06 f207 	mul.w	r2, r6, r7
 23f65fc:	428a      	cmp	r2, r1
 23f65fe:	d907      	bls.n	23f6610 <__udivmoddi4+0x29c>
 23f6600:	eb1c 0101 	adds.w	r1, ip, r1
 23f6604:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23f6608:	d201      	bcs.n	23f660e <__udivmoddi4+0x29a>
 23f660a:	428a      	cmp	r2, r1
 23f660c:	d823      	bhi.n	23f6656 <__udivmoddi4+0x2e2>
 23f660e:	4646      	mov	r6, r8
 23f6610:	1a89      	subs	r1, r1, r2
 23f6612:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23f6616:	e725      	b.n	23f6464 <__udivmoddi4+0xf0>
 23f6618:	462e      	mov	r6, r5
 23f661a:	4628      	mov	r0, r5
 23f661c:	e6f7      	b.n	23f640e <__udivmoddi4+0x9a>
 23f661e:	1a84      	subs	r4, r0, r2
 23f6620:	eb61 0303 	sbc.w	r3, r1, r3
 23f6624:	2001      	movs	r0, #1
 23f6626:	461f      	mov	r7, r3
 23f6628:	e70b      	b.n	23f6442 <__udivmoddi4+0xce>
 23f662a:	4464      	add	r4, ip
 23f662c:	3802      	subs	r0, #2
 23f662e:	e749      	b.n	23f64c4 <__udivmoddi4+0x150>
 23f6630:	4464      	add	r4, ip
 23f6632:	3802      	subs	r0, #2
 23f6634:	e6e1      	b.n	23f63fa <__udivmoddi4+0x86>
 23f6636:	3a02      	subs	r2, #2
 23f6638:	4461      	add	r1, ip
 23f663a:	e72e      	b.n	23f649a <__udivmoddi4+0x126>
 23f663c:	3e02      	subs	r6, #2
 23f663e:	4462      	add	r2, ip
 23f6640:	e6c6      	b.n	23f63d0 <__udivmoddi4+0x5c>
 23f6642:	f1a8 0802 	sub.w	r8, r8, #2
 23f6646:	4461      	add	r1, ip
 23f6648:	e76f      	b.n	23f652a <__udivmoddi4+0x1b6>
 23f664a:	3802      	subs	r0, #2
 23f664c:	4462      	add	r2, ip
 23f664e:	e7cb      	b.n	23f65e8 <__udivmoddi4+0x274>
 23f6650:	3802      	subs	r0, #2
 23f6652:	4461      	add	r1, ip
 23f6654:	e77d      	b.n	23f6552 <__udivmoddi4+0x1de>
 23f6656:	3e02      	subs	r6, #2
 23f6658:	4461      	add	r1, ip
 23f665a:	e7d9      	b.n	23f6610 <__udivmoddi4+0x29c>
 23f665c:	462e      	mov	r6, r5
 23f665e:	e6d6      	b.n	23f640e <__udivmoddi4+0x9a>

023f6660 <__aeabi_idiv0>:
 23f6660:	4770      	bx	lr
 23f6662:	bf00      	nop

023f6664 <strcmp>:
 23f6664:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f6668:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f666c:	2a01      	cmp	r2, #1
 23f666e:	bf28      	it	cs
 23f6670:	429a      	cmpcs	r2, r3
 23f6672:	d0f7      	beq.n	23f6664 <strcmp>
 23f6674:	1ad0      	subs	r0, r2, r3
 23f6676:	4770      	bx	lr

023f6678 <strlen>:
 23f6678:	4603      	mov	r3, r0
 23f667a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f667e:	2a00      	cmp	r2, #0
 23f6680:	d1fb      	bne.n	23f667a <strlen+0x2>
 23f6682:	1a18      	subs	r0, r3, r0
 23f6684:	3801      	subs	r0, #1
 23f6686:	4770      	bx	lr

023f6688 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f6688:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f668a:	f005 fdb7 	bl	23fc1fc <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f668e:	2500      	movs	r5, #0
 23f6690:	4e05      	ldr	r6, [pc, #20]	; (23f66a8 <module_user_init+0x20>)
 23f6692:	4c06      	ldr	r4, [pc, #24]	; (23f66ac <module_user_init+0x24>)
 23f6694:	1ba4      	subs	r4, r4, r6
 23f6696:	08a4      	lsrs	r4, r4, #2
 23f6698:	42ac      	cmp	r4, r5
 23f669a:	d100      	bne.n	23f669e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f669c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f669e:	f856 3b04 	ldr.w	r3, [r6], #4
 23f66a2:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f66a4:	3501      	adds	r5, #1
 23f66a6:	e7f7      	b.n	23f6698 <module_user_init+0x10>
 23f66a8:	023fffc4 	.word	0x023fffc4
 23f66ac:	023ffff8 	.word	0x023ffff8

023f66b0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f66b0:	f000 bd1e 	b.w	23f70f0 <setup>

023f66b4 <module_user_loop>:
}

void module_user_loop() {
 23f66b4:	b508      	push	{r3, lr}
    loop();
 23f66b6:	f001 fbed 	bl	23f7e94 <loop>
    _post_loop();
}
 23f66ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f66be:	f005 bd55 	b.w	23fc16c <_post_loop>

023f66c2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f66c2:	f003 bd3b 	b.w	23fa13c <malloc>

023f66c6 <_Znaj>:
 23f66c6:	f003 bd39 	b.w	23fa13c <malloc>

023f66ca <_ZdaPv>:
 23f66ca:	f003 bd45 	b.w	23fa158 <free>

023f66ce <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f66ce:	f003 bd43 	b.w	23fa158 <free>

023f66d2 <_ZdaPvj>:
 23f66d2:	f003 bd41 	b.w	23fa158 <free>
	...

023f66d8 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f66d8:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f66da:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f66dc:	4a02      	ldr	r2, [pc, #8]	; (23f66e8 <__cxa_pure_virtual+0x10>)
 23f66de:	4903      	ldr	r1, [pc, #12]	; (23f66ec <__cxa_pure_virtual+0x14>)
 23f66e0:	f003 fbdc 	bl	23f9e9c <panic_>
  while (1);
 23f66e4:	e7fe      	b.n	23f66e4 <__cxa_pure_virtual+0xc>
 23f66e6:	bf00      	nop
 23f66e8:	023f9a75 	.word	0x023f9a75
 23f66ec:	023fe608 	.word	0x023fe608

023f66f0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f66f0:	7800      	ldrb	r0, [r0, #0]
 23f66f2:	fab0 f080 	clz	r0, r0
 23f66f6:	0940      	lsrs	r0, r0, #5
 23f66f8:	4770      	bx	lr

023f66fa <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f66fa:	2301      	movs	r3, #1
 23f66fc:	7003      	strb	r3, [r0, #0]
 23f66fe:	4770      	bx	lr

023f6700 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23f6700:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 23f6702:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23f6704:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 23f6706:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23f6708:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 23f670a:	b900      	cbnz	r0, 23f670e <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23f670c:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
 23f670e:	ecf2 7a01 	vldmia	r2!, {s15}
 23f6712:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
 23f6716:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
 23f6718:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
 23f671c:	e7f5      	b.n	23f670a <arm_mat_scale_f32+0xa>

023f671e <arm_fully_connected_s8>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int32_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q7_t *output)
{
 23f671e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6722:	460c      	mov	r4, r1
 23f6724:	4616      	mov	r6, r2

    int32_t batch_cnt = input_dims->n;

    while (batch_cnt)
    {
        arm_nn_vec_mat_mult_t_s8(input,
 23f6726:	f04f 0b00 	mov.w	fp, #0
    int32_t batch_cnt = input_dims->n;
 23f672a:	681d      	ldr	r5, [r3, #0]
{
 23f672c:	b08b      	sub	sp, #44	; 0x2c
 23f672e:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 23f6732:	e9dd 9a19 	ldrd	r9, sl, [sp, #100]	; 0x64
    while (batch_cnt)
 23f6736:	b91d      	cbnz	r5, 23f6740 <arm_fully_connected_s8+0x22>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_CMSIS_NN_SUCCESS);
}
 23f6738:	4628      	mov	r0, r5
 23f673a:	b00b      	add	sp, #44	; 0x2c
 23f673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        arm_nn_vec_mat_mult_t_s8(input,
 23f6740:	2301      	movs	r3, #1
 23f6742:	9309      	str	r3, [sp, #36]	; 0x24
 23f6744:	6923      	ldr	r3, [r4, #16]
 23f6746:	4638      	mov	r0, r7
 23f6748:	9308      	str	r3, [sp, #32]
 23f674a:	68e3      	ldr	r3, [r4, #12]
 23f674c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23f674e:	9307      	str	r3, [sp, #28]
 23f6750:	f8d9 300c 	ldr.w	r3, [r9, #12]
 23f6754:	9916      	ldr	r1, [sp, #88]	; 0x58
 23f6756:	9306      	str	r3, [sp, #24]
 23f6758:	f8d8 3000 	ldr.w	r3, [r8]
        batch_cnt--;
 23f675c:	3d01      	subs	r5, #1
        arm_nn_vec_mat_mult_t_s8(input,
 23f675e:	9305      	str	r3, [sp, #20]
 23f6760:	6873      	ldr	r3, [r6, #4]
 23f6762:	9304      	str	r3, [sp, #16]
 23f6764:	6833      	ldr	r3, [r6, #0]
 23f6766:	9303      	str	r3, [sp, #12]
 23f6768:	68a3      	ldr	r3, [r4, #8]
 23f676a:	e9cd b301 	strd	fp, r3, [sp, #4]
 23f676e:	6823      	ldr	r3, [r4, #0]
 23f6770:	9300      	str	r3, [sp, #0]
 23f6772:	4653      	mov	r3, sl
 23f6774:	f000 f809 	bl	23f678a <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
 23f6778:	f8d8 3000 	ldr.w	r3, [r8]
 23f677c:	441f      	add	r7, r3
        output += output_dims->c;
 23f677e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 23f6782:	449a      	add	sl, r3
        batch_cnt--;
 23f6784:	e7d7      	b.n	23f6736 <arm_fully_connected_s8+0x18>

023f6786 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 23f6786:	2000      	movs	r0, #0
 23f6788:	4770      	bx	lr

023f678a <arm_nn_vec_mat_mult_t_s8>:
                                             const int32_t rhs_cols,
                                             const int32_t rhs_rows,
                                             const int32_t activation_min,
                                             const int32_t activation_max,
                                             const int32_t address_offset)
{
 23f678a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f678e:	b095      	sub	sp, #84	; 0x54
 23f6790:	9107      	str	r1, [sp, #28]
 23f6792:	930f      	str	r3, [sp, #60]	; 0x3c
        *dst = MIN(acc_0, activation_max);
        dst += address_offset;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t row_loop_cnt = rhs_rows / 2;
 23f6794:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
 23f6798:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23f679c:	1049      	asrs	r1, r1, #1
 23f679e:	910a      	str	r1, [sp, #40]	; 0x28
    const int16_t lhs_offset_s16 = (int16_t)lhs_offset;
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23f67a0:	991e      	ldr	r1, [sp, #120]	; 0x78
        {
            acc_0 = *bias++;
            acc_1 = *bias++;
        }

        const int32_t col_loop_cnt = rhs_cols / 4;
 23f67a2:	2b00      	cmp	r3, #0
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23f67a4:	b209      	sxth	r1, r1
 23f67a6:	eac1 4b01 	pkhbt	fp, r1, r1, lsl #16
        const int32_t col_loop_cnt = rhs_cols / 4;
 23f67aa:	4619      	mov	r1, r3
 23f67ac:	bfb8      	it	lt
 23f67ae:	1cd9      	addlt	r1, r3, #3
{
 23f67b0:	4681      	mov	r9, r0
        const int32_t col_loop_cnt = rhs_cols / 4;
 23f67b2:	1088      	asrs	r0, r1, #2
 23f67b4:	9001      	str	r0, [sp, #4]

        const int8_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;
        const int8_t *rhs_1 = rhs + rhs_cols;
        rhs += 2 * rhs_cols;
 23f67b6:	0058      	lsls	r0, r3, #1
 23f67b8:	9009      	str	r0, [sp, #36]	; 0x24
 23f67ba:	9822      	ldr	r0, [sp, #136]	; 0x88

            acc_1 = __SMLAD(ker_1, vec_1, acc_1);
            acc_1 = __SMLAD(ker_0, vec_0, acc_1);
        }

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23f67bc:	f021 0a03 	bic.w	sl, r1, #3
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f67c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 23f67c2:	2800      	cmp	r0, #0
 23f67c4:	f1c1 0100 	rsb	r1, r1, #0
 23f67c8:	bfc8      	it	gt
 23f67ca:	2100      	movgt	r1, #0
 23f67cc:	9104      	str	r1, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23f67ce:	2101      	movs	r1, #1
 23f67d0:	9804      	ldr	r0, [sp, #16]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23f67d2:	9e07      	ldr	r6, [sp, #28]
 23f67d4:	4081      	lsls	r1, r0
 23f67d6:	3901      	subs	r1, #1
 23f67d8:	9105      	str	r1, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23f67da:	1049      	asrs	r1, r1, #1
 23f67dc:	9106      	str	r1, [sp, #24]
        threshold++;
 23f67de:	3101      	adds	r1, #1
 23f67e0:	910b      	str	r1, [sp, #44]	; 0x2c
        acc_0 = MIN(acc_0, activation_max);
        acc_1 = MAX(acc_1, activation_min);
        acc_1 = MIN(acc_1, activation_max);
        *dst = (int8_t)acc_0;
        *(dst + address_offset) = (int8_t)acc_1;
        dst += 2 * address_offset;
 23f67e2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 23f67e4:	0049      	lsls	r1, r1, #1
 23f67e6:	9108      	str	r1, [sp, #32]
 23f67e8:	9907      	ldr	r1, [sp, #28]
 23f67ea:	eb01 050a 	add.w	r5, r1, sl
 23f67ee:	eb09 010a 	add.w	r1, r9, sl
 23f67f2:	910e      	str	r1, [sp, #56]	; 0x38
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23f67f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23f67f6:	9102      	str	r1, [sp, #8]
 23f67f8:	2100      	movs	r1, #0
 23f67fa:	9103      	str	r1, [sp, #12]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23f67fc:	f1c9 0100 	rsb	r1, r9, #0
 23f6800:	9113      	str	r1, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f6802:	9922      	ldr	r1, [sp, #136]	; 0x88
 23f6804:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 23f6808:	9111      	str	r1, [sp, #68]	; 0x44
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23f680a:	9903      	ldr	r1, [sp, #12]
 23f680c:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f680e:	4281      	cmp	r1, r0
 23f6810:	db4d      	blt.n	23f68ae <arm_nn_vec_mat_mult_t_s8+0x124>
 23f6812:	9d08      	ldr	r5, [sp, #32]
 23f6814:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f6818:	9c09      	ldr	r4, [sp, #36]	; 0x24
 23f681a:	9907      	ldr	r1, [sp, #28]
 23f681c:	4345      	muls	r5, r0
 23f681e:	fb00 1104 	mla	r1, r0, r4, r1
    }

    if (rhs_rows & 0x1)
 23f6822:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23f6824:	4628      	mov	r0, r5
 23f6826:	07e4      	lsls	r4, r4, #31
 23f6828:	d53d      	bpl.n	23f68a6 <arm_nn_vec_mat_mult_t_s8+0x11c>
    {
        int32_t acc_0 = 0;
        if (bias)
 23f682a:	b102      	cbz	r2, 23f682e <arm_nn_vec_mat_mult_t_s8+0xa4>
        {
            acc_0 = *bias++;
 23f682c:	6812      	ldr	r2, [r2, #0]
        const int32_t col_loop_cnt = rhs_cols / 4;

        const int8_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;

        for (int i = col_loop_cnt; i != 0; i--)
 23f682e:	468c      	mov	ip, r1
 23f6830:	9c01      	ldr	r4, [sp, #4]
 23f6832:	2c00      	cmp	r4, #0
 23f6834:	f040 80db 	bne.w	23f69ee <arm_nn_vec_mat_mult_t_s8+0x264>

            acc_0 = __SMLAD(ker_1, vec_1, acc_0);
            acc_0 = __SMLAD(ker_0, vec_0, acc_0);
        }

        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 23f6838:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 23f683a:	4451      	add	r1, sl
 23f683c:	ebaa 0506 	sub.w	r5, sl, r6
 23f6840:	1977      	adds	r7, r6, r5
 23f6842:	42bb      	cmp	r3, r7
 23f6844:	f300 80e7 	bgt.w	23f6a16 <arm_nn_vec_mat_mult_t_s8+0x28c>
 23f6848:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23f684a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f684e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23f6852:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23f6854:	2300      	movs	r3, #0
 23f6856:	9c21      	ldr	r4, [sp, #132]	; 0x84
 23f6858:	fbc2 1304 	smlal	r1, r3, r2, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f685c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23f685e:	461d      	mov	r5, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f6860:	2a00      	cmp	r2, #0
 23f6862:	bfdc      	itt	le
 23f6864:	4252      	negle	r2, r2
 23f6866:	9201      	strle	r2, [sp, #4]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23f6868:	2201      	movs	r2, #1
    result = (int32_t)(mult.long_long >> 31);
 23f686a:	0fcb      	lsrs	r3, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23f686c:	9901      	ldr	r1, [sp, #4]
    if (result < 0)
 23f686e:	9c01      	ldr	r4, [sp, #4]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23f6870:	408a      	lsls	r2, r1
    result = (int32_t)(mult.long_long >> 31);
 23f6872:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23f6876:	3a01      	subs	r2, #1
    if (result < 0)
 23f6878:	fa53 f404 	asrs.w	r4, r3, r4
    int32_t remainder = remainder_mask & dividend;
 23f687c:	ea03 0102 	and.w	r1, r3, r2
    q31_t threshold = remainder_mask >> 1;
 23f6880:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 23f6884:	bf48      	it	mi
 23f6886:	3201      	addmi	r2, #1
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);

        // Add offset
        acc_0 += dst_offset;
 23f6888:	9b20      	ldr	r3, [sp, #128]	; 0x80
    if (remainder > threshold)
 23f688a:	4291      	cmp	r1, r2
        result++;
 23f688c:	bfc8      	it	gt
 23f688e:	3401      	addgt	r4, #1
 23f6890:	441c      	add	r4, r3
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
 23f6892:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23f6894:	429c      	cmp	r4, r3
 23f6896:	bfb8      	it	lt
 23f6898:	461c      	movlt	r4, r3
        acc_0 = MIN(acc_0, activation_max);
 23f689a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23f689c:	429c      	cmp	r4, r3
 23f689e:	bfa8      	it	ge
 23f68a0:	461c      	movge	r4, r3
        *dst = (int8_t)acc_0;
 23f68a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f68a4:	541c      	strb	r4, [r3, r0]
        dst += address_offset;
        rhs += rhs_cols;
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
 23f68a6:	2000      	movs	r0, #0
 23f68a8:	b015      	add	sp, #84	; 0x54
 23f68aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
 23f68ae:	2a00      	cmp	r2, #0
 23f68b0:	d06a      	beq.n	23f6988 <arm_nn_vec_mat_mult_t_s8+0x1fe>
            acc_0 = *bias++;
 23f68b2:	4617      	mov	r7, r2
 23f68b4:	f857 0b08 	ldr.w	r0, [r7], #8
            acc_1 = *bias++;
 23f68b8:	6851      	ldr	r1, [r2, #4]
 23f68ba:	463a      	mov	r2, r7
        const int8_t *rhs_1 = rhs + rhs_cols;
 23f68bc:	18f7      	adds	r7, r6, r3
 23f68be:	970d      	str	r7, [sp, #52]	; 0x34
        rhs += 2 * rhs_cols;
 23f68c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
        for (int j = col_loop_cnt; j != 0; j--)
 23f68c2:	f8dd e004 	ldr.w	lr, [sp, #4]
        rhs += 2 * rhs_cols;
 23f68c6:	19f7      	adds	r7, r6, r7
 23f68c8:	9712      	str	r7, [sp, #72]	; 0x48
        const int8_t *lhs_vec = lhs;
 23f68ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        for (int j = col_loop_cnt; j != 0; j--)
 23f68ce:	f1be 0f00 	cmp.w	lr, #0
 23f68d2:	d15c      	bne.n	23f698e <arm_nn_vec_mat_mult_t_s8+0x204>
 23f68d4:	eb05 0c03 	add.w	ip, r5, r3
 23f68d8:	46e6      	mov	lr, ip
 23f68da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23f68dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 23f68de:	193e      	adds	r6, r7, r4
 23f68e0:	42b3      	cmp	r3, r6
 23f68e2:	dc77      	bgt.n	23f69d4 <arm_nn_vec_mat_mult_t_s8+0x24a>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23f68e4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 23f68e8:	2500      	movs	r5, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f68ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
 23f68ec:	40a0      	lsls	r0, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23f68ee:	9c21      	ldr	r4, [sp, #132]	; 0x84
 23f68f0:	fbc0 6504 	smlal	r6, r5, r0, r4
    int32_t remainder = remainder_mask & dividend;
 23f68f4:	9c05      	ldr	r4, [sp, #20]
    result = (int32_t)(mult.long_long >> 31);
 23f68f6:	0ff0      	lsrs	r0, r6, #31
 23f68f8:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23f68fc:	ea00 0504 	and.w	r5, r0, r4
    q31_t threshold = remainder_mask >> 1;
 23f6900:	9c04      	ldr	r4, [sp, #16]
 23f6902:	9e06      	ldr	r6, [sp, #24]
 23f6904:	4120      	asrs	r0, r4
 23f6906:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23f6908:	bf48      	it	mi
 23f690a:	4626      	movmi	r6, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f690c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    if (remainder > threshold)
 23f690e:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23f6910:	fa01 f604 	lsl.w	r6, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23f6914:	f04f 0500 	mov.w	r5, #0
 23f6918:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23f691c:	9c21      	ldr	r4, [sp, #132]	; 0x84
        result++;
 23f691e:	bfc8      	it	gt
 23f6920:	3001      	addgt	r0, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23f6922:	fbc6 1504 	smlal	r1, r5, r6, r4
    int32_t remainder = remainder_mask & dividend;
 23f6926:	9c05      	ldr	r4, [sp, #20]
    result = (int32_t)(mult.long_long >> 31);
 23f6928:	0fc9      	lsrs	r1, r1, #31
 23f692a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23f692e:	ea01 0504 	and.w	r5, r1, r4
    q31_t threshold = remainder_mask >> 1;
 23f6932:	9c04      	ldr	r4, [sp, #16]
 23f6934:	9e06      	ldr	r6, [sp, #24]
 23f6936:	4121      	asrs	r1, r4
 23f6938:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23f693a:	bf48      	it	mi
 23f693c:	4626      	movmi	r6, r4
        acc_0 += dst_offset;
 23f693e:	9c20      	ldr	r4, [sp, #128]	; 0x80
    if (remainder > threshold)
 23f6940:	42b5      	cmp	r5, r6
        result++;
 23f6942:	bfc8      	it	gt
 23f6944:	3101      	addgt	r1, #1
 23f6946:	4420      	add	r0, r4
        acc_1 += dst_offset;
 23f6948:	4421      	add	r1, r4
        acc_0 = MAX(acc_0, activation_min);
 23f694a:	9c25      	ldr	r4, [sp, #148]	; 0x94
        rhs += 2 * rhs_cols;
 23f694c:	9e12      	ldr	r6, [sp, #72]	; 0x48
        acc_0 = MAX(acc_0, activation_min);
 23f694e:	42a0      	cmp	r0, r4
 23f6950:	bfb8      	it	lt
 23f6952:	4620      	movlt	r0, r4
        acc_1 = MAX(acc_1, activation_min);
 23f6954:	42a1      	cmp	r1, r4
 23f6956:	bfb8      	it	lt
 23f6958:	4621      	movlt	r1, r4
        acc_0 = MIN(acc_0, activation_max);
 23f695a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 23f695c:	eb03 050c 	add.w	r5, r3, ip
 23f6960:	42a0      	cmp	r0, r4
 23f6962:	bfa8      	it	ge
 23f6964:	4620      	movge	r0, r4
        *dst = (int8_t)acc_0;
 23f6966:	9c02      	ldr	r4, [sp, #8]
 23f6968:	7020      	strb	r0, [r4, #0]
        acc_1 = MIN(acc_1, activation_max);
 23f696a:	9826      	ldr	r0, [sp, #152]	; 0x98
 23f696c:	4281      	cmp	r1, r0
 23f696e:	bfa8      	it	ge
 23f6970:	4601      	movge	r1, r0
        *(dst + address_offset) = (int8_t)acc_1;
 23f6972:	4620      	mov	r0, r4
 23f6974:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 23f6976:	5501      	strb	r1, [r0, r4]
        dst += 2 * address_offset;
 23f6978:	4601      	mov	r1, r0
 23f697a:	9808      	ldr	r0, [sp, #32]
 23f697c:	4401      	add	r1, r0
 23f697e:	9102      	str	r1, [sp, #8]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23f6980:	9903      	ldr	r1, [sp, #12]
 23f6982:	3101      	adds	r1, #1
 23f6984:	9103      	str	r1, [sp, #12]
 23f6986:	e740      	b.n	23f680a <arm_nn_vec_mat_mult_t_s8+0x80>
        int32_t acc_1 = 0;
 23f6988:	4611      	mov	r1, r2
        int32_t acc_0 = 0;
 23f698a:	4610      	mov	r0, r2
 23f698c:	e796      	b.n	23f68bc <arm_nn_vec_mat_mult_t_s8+0x132>
    memcpy(&val, *in_q7, 4);
 23f698e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23f6990:	f854 7b04 	ldr.w	r7, [r4], #4
 23f6994:	940c      	str	r4, [sp, #48]	; 0x30

__STATIC_FORCEINLINE uint32_t __SXTAB16_RORn(uint32_t op1, uint32_t op2, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
 23f6996:	fa2b f497 	sxtab16	r4, fp, r7, ror #8
 23f699a:	f856 cb04 	ldr.w	ip, [r6], #4
 23f699e:	9410      	str	r4, [sp, #64]	; 0x40
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23f69a0:	fa2b f787 	sxtab16	r7, fp, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23f69a4:	fa2f f89c 	sxtb16	r8, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23f69a8:	fa2f fc8c 	sxtb16	ip, ip

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23f69ac:	fb28 0004 	smlad	r0, r8, r4, r0
 23f69b0:	fb2c 0007 	smlad	r0, ip, r7, r0
 23f69b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23f69b6:	f854 cb04 	ldr.w	ip, [r4], #4
 23f69ba:	940d      	str	r4, [sp, #52]	; 0x34
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23f69bc:	fa2f f89c 	sxtb16	r8, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23f69c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23f69c2:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23f69c6:	fb28 1104 	smlad	r1, r8, r4, r1
 23f69ca:	fb2c 1107 	smlad	r1, ip, r7, r1
        for (int j = col_loop_cnt; j != 0; j--)
 23f69ce:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 23f69d2:	e77c      	b.n	23f68ce <arm_nn_vec_mat_mult_t_s8+0x144>
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23f69d4:	f917 6b01 	ldrsb.w	r6, [r7], #1
 23f69d8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
            acc_0 += lhs_temp * (*rhs_0);
 23f69da:	f915 8b01 	ldrsb.w	r8, [r5], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23f69de:	4426      	add	r6, r4
            acc_0 += lhs_temp * (*rhs_0);
 23f69e0:	fb06 0008 	mla	r0, r6, r8, r0
            acc_1 += lhs_temp * (*rhs_1);
 23f69e4:	f91e 8b01 	ldrsb.w	r8, [lr], #1
 23f69e8:	fb06 1108 	mla	r1, r6, r8, r1
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23f69ec:	e776      	b.n	23f68dc <arm_nn_vec_mat_mult_t_s8+0x152>
 23f69ee:	f859 6b04 	ldr.w	r6, [r9], #4
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
 23f69f2:	fa2b fe96 	sxtab16	lr, fp, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23f69f6:	f85c 5b04 	ldr.w	r5, [ip], #4
 23f69fa:	fa2b f686 	sxtab16	r6, fp, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23f69fe:	fa2f f795 	sxtb16	r7, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23f6a02:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23f6a06:	fb27 220e 	smlad	r2, r7, lr, r2
 23f6a0a:	fb25 2206 	smlad	r2, r5, r6, r2
        for (int i = col_loop_cnt; i != 0; i--)
 23f6a0e:	9c01      	ldr	r4, [sp, #4]
 23f6a10:	3c01      	subs	r4, #1
 23f6a12:	9401      	str	r4, [sp, #4]
 23f6a14:	e70c      	b.n	23f6830 <arm_nn_vec_mat_mult_t_s8+0xa6>
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23f6a16:	f916 7b01 	ldrsb.w	r7, [r6], #1
 23f6a1a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
            acc_0 += lhs_temp * (*rhs_0);
 23f6a1c:	f911 cb01 	ldrsb.w	ip, [r1], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23f6a20:	4427      	add	r7, r4
            acc_0 += lhs_temp * (*rhs_0);
 23f6a22:	fb07 220c 	mla	r2, r7, ip, r2
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 23f6a26:	e70b      	b.n	23f6840 <arm_nn_vec_mat_mult_t_s8+0xb6>

023f6a28 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f6a28:	4770      	bx	lr
	...

023f6a2c <_Z20raw_feature_get_datajjPf>:
 * @param      out_ptr  The out pointer
 *
 * @return     0
 */
int raw_feature_get_data(size_t offset, size_t length, float *out_ptr)
{
 23f6a2c:	b508      	push	{r3, lr}
 23f6a2e:	4613      	mov	r3, r2
    memcpy(out_ptr, features + offset, length * sizeof(float));
 23f6a30:	008a      	lsls	r2, r1, #2
 23f6a32:	4904      	ldr	r1, [pc, #16]	; (23f6a44 <_Z20raw_feature_get_datajjPf+0x18>)
 23f6a34:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 23f6a38:	4618      	mov	r0, r3
 23f6a3a:	f005 fdb7 	bl	23fc5ac <memcpy>
    return 0;
}
 23f6a3e:	2000      	movs	r0, #0
 23f6a40:	bd08      	pop	{r3, pc}
 23f6a42:	bf00      	nop
 23f6a44:	1007a67c 	.word	0x1007a67c

023f6a48 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 23f6a48:	b508      	push	{r3, lr}
	assert(ptr);
 23f6a4a:	b928      	cbnz	r0, 23f6a58 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
 23f6a4c:	215a      	movs	r1, #90	; 0x5a
 23f6a4e:	4b06      	ldr	r3, [pc, #24]	; (23f6a68 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
 23f6a50:	4a06      	ldr	r2, [pc, #24]	; (23f6a6c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
 23f6a52:	4807      	ldr	r0, [pc, #28]	; (23f6a70 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
 23f6a54:	f003 fbe2 	bl	23fa21c <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 23f6a58:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
 23f6a5c:	1ac0      	subs	r0, r0, r3
}
 23f6a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
 23f6a62:	f001 bc49 	b.w	23f82f8 <_Z7ei_freePv>
 23f6a66:	bf00      	nop
 23f6a68:	023ff12d 	.word	0x023ff12d
 23f6a6c:	023fe633 	.word	0x023fe633
 23f6a70:	023fe65c 	.word	0x023fe65c

023f6a74 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
 23f6a74:	1e43      	subs	r3, r0, #1
 23f6a76:	4203      	tst	r3, r0
{
 23f6a78:	b510      	push	{r4, lr}
 23f6a7a:	4604      	mov	r4, r0
	assert((align & (align - 1)) == 0);
 23f6a7c:	d005      	beq.n	23f6a8a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x16>
 23f6a7e:	2137      	movs	r1, #55	; 0x37
 23f6a80:	4b0c      	ldr	r3, [pc, #48]	; (23f6ab4 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
 23f6a82:	4a0d      	ldr	r2, [pc, #52]	; (23f6ab8 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
 23f6a84:	480d      	ldr	r0, [pc, #52]	; (23f6abc <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
 23f6a86:	f003 fbc9 	bl	23fa21c <__assert_func>
	if(align && size)
 23f6a8a:	b910      	cbnz	r0, 23f6a92 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1e>
	void * ptr = NULL;
 23f6a8c:	2400      	movs	r4, #0
}
 23f6a8e:	4620      	mov	r0, r4
 23f6a90:	bd10      	pop	{r4, pc}
	if(align && size)
 23f6a92:	2900      	cmp	r1, #0
 23f6a94:	d0fa      	beq.n	23f6a8c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
		void * p = ei_calloc(size + hdr_size, 1);
 23f6a96:	1c48      	adds	r0, r1, #1
 23f6a98:	4420      	add	r0, r4
 23f6a9a:	2101      	movs	r1, #1
 23f6a9c:	f001 fc2a 	bl	23f82f4 <_Z9ei_callocjj>
		if(p)
 23f6aa0:	2800      	cmp	r0, #0
 23f6aa2:	d0f3      	beq.n	23f6a8c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x18>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 23f6aa4:	1c63      	adds	r3, r4, #1
 23f6aa6:	4403      	add	r3, r0
 23f6aa8:	4264      	negs	r4, r4
 23f6aaa:	401c      	ands	r4, r3
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 23f6aac:	1a20      	subs	r0, r4, r0
 23f6aae:	f824 0c02 	strh.w	r0, [r4, #-2]
	return ptr;
 23f6ab2:	e7ec      	b.n	23f6a8e <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x1a>
 23f6ab4:	023fe6d2 	.word	0x023fe6d2
 23f6ab8:	023fe6ed 	.word	0x023fe6ed
 23f6abc:	023fe65c 	.word	0x023fe65c

023f6ac0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 23f6ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (scale == 1.0f) return EIDSP_OK;

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 23f6ac2:	6842      	ldr	r2, [r0, #4]
 23f6ac4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 23f6ac8:	d217      	bcs.n	23f6afa <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
 23f6aca:	6883      	ldr	r3, [r0, #8]
 23f6acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 23f6ad0:	d213      	bcs.n	23f6afa <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
            return EIDSP_NARROWING;
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f6ad2:	6801      	ldr	r1, [r0, #0]
 23f6ad4:	b292      	uxth	r2, r2
 23f6ad6:	b29b      	uxth	r3, r3
 23f6ad8:	9101      	str	r1, [sp, #4]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f6ada:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23f6adc:	4668      	mov	r0, sp
 23f6ade:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f6ae0:	f8ad 2000 	strh.w	r2, [sp]
 23f6ae4:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23f6ae8:	f8ad 2008 	strh.w	r2, [sp, #8]
 23f6aec:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23f6af0:	f7ff fe06 	bl	23f6700 <arm_mat_scale_f32>
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
    }
 23f6af4:	b005      	add	sp, #20
 23f6af6:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
 23f6afa:	4801      	ldr	r0, [pc, #4]	; (23f6b00 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
 23f6afc:	e7fa      	b.n	23f6af4 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
 23f6afe:	bf00      	nop
 23f6b00:	fffffc0c 	.word	0xfffffc0c

023f6b04 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
 23f6b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f6b08:	4688      	mov	r8, r1
 23f6b0a:	4617      	mov	r7, r2
 23f6b0c:	461e      	mov	r6, r3
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f6b0e:	6985      	ldr	r5, [r0, #24]
static EI_IMPULSE_ERROR inference_tflite_setup(
 23f6b10:	4604      	mov	r4, r0

    *ctx_start_us = ei_read_timer_us();
 23f6b12:	f001 fb13 	bl	23f813c <_Z16ei_read_timer_usv>
 23f6b16:	e9c8 0100 	strd	r0, r1, [r8]

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
 23f6b1a:	4814      	ldr	r0, [pc, #80]	; (23f6b6c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x68>)
 23f6b1c:	686b      	ldr	r3, [r5, #4]
 23f6b1e:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
 23f6b20:	4601      	mov	r1, r0
 23f6b22:	b130      	cbz	r0, 23f6b32 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x2e>
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
 23f6b24:	4812      	ldr	r0, [pc, #72]	; (23f6b70 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x6c>)
 23f6b26:	f001 fb0f 	bl	23f8148 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 23f6b2a:	f06f 0005 	mvn.w	r0, #5
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
}
 23f6b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = graph_config->model_input(0, input);
 23f6b32:	4639      	mov	r1, r7
 23f6b34:	692b      	ldr	r3, [r5, #16]
 23f6b36:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23f6b38:	b9a8      	cbnz	r0, 23f6b66 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x62>
    status = graph_config->model_output(block_config->output_data_tensor, output);
 23f6b3a:	4631      	mov	r1, r6
 23f6b3c:	696b      	ldr	r3, [r5, #20]
 23f6b3e:	7aa0      	ldrb	r0, [r4, #10]
 23f6b40:	4798      	blx	r3
    if (status != kTfLiteOk) {
 23f6b42:	b980      	cbnz	r0, 23f6b66 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x62>
    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 23f6b44:	f994 3009 	ldrsb.w	r3, [r4, #9]
 23f6b48:	2b01      	cmp	r3, #1
 23f6b4a:	d001      	beq.n	23f6b50 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x4c>
    return EI_IMPULSE_OK;
 23f6b4c:	2000      	movs	r0, #0
 23f6b4e:	e7ee      	b.n	23f6b2e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x2a>
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
 23f6b50:	696b      	ldr	r3, [r5, #20]
 23f6b52:	9907      	ldr	r1, [sp, #28]
 23f6b54:	7b20      	ldrb	r0, [r4, #12]
 23f6b56:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23f6b58:	b928      	cbnz	r0, 23f6b66 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x62>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
 23f6b5a:	696b      	ldr	r3, [r5, #20]
 23f6b5c:	9906      	ldr	r1, [sp, #24]
 23f6b5e:	7ae0      	ldrb	r0, [r4, #11]
 23f6b60:	4798      	blx	r3
        if (status != kTfLiteOk) {
 23f6b62:	2800      	cmp	r0, #0
 23f6b64:	d0f2      	beq.n	23f6b4c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x48>
            return EI_IMPULSE_TFLITE_ERROR;
 23f6b66:	f06f 0002 	mvn.w	r0, #2
 23f6b6a:	e7e0      	b.n	23f6b2e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0+0x2a>
 23f6b6c:	023f6a75 	.word	0x023f6a75
 23f6b70:	023fe722 	.word	0x023fe722

023f6b74 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 23f6b74:	2a01      	cmp	r2, #1
 23f6b76:	d102      	bne.n	23f6b7e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6b78:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 23f6b7a:	2000      	movs	r0, #0
 23f6b7c:	4770      	bx	lr
	  switch (__op)
 23f6b7e:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f6b80:	bf04      	itt	eq
 23f6b82:	680b      	ldreq	r3, [r1, #0]
 23f6b84:	6003      	streq	r3, [r0, #0]
	      break;
 23f6b86:	e7f8      	b.n	23f6b7a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

023f6b88 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f6b88:	2a01      	cmp	r2, #1
 23f6b8a:	d102      	bne.n	23f6b92 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6b8c:	6001      	str	r1, [r0, #0]
      }
 23f6b8e:	2000      	movs	r0, #0
 23f6b90:	4770      	bx	lr
	  switch (__op)
 23f6b92:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f6b94:	bf04      	itt	eq
 23f6b96:	680b      	ldreq	r3, [r1, #0]
 23f6b98:	6003      	streq	r3, [r0, #0]
	      break;
 23f6b9a:	e7f8      	b.n	23f6b8e <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023f6b9c <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f6b9c:	b430      	push	{r4, r5}
 23f6b9e:	460d      	mov	r5, r1
 23f6ba0:	4611      	mov	r1, r2
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f6ba2:	6804      	ldr	r4, [r0, #0]
 23f6ba4:	681a      	ldr	r2, [r3, #0]
 23f6ba6:	6828      	ldr	r0, [r5, #0]
 23f6ba8:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23f6baa:	bc30      	pop	{r4, r5}
 23f6bac:	6809      	ldr	r1, [r1, #0]
 23f6bae:	4718      	bx	r3

023f6bb0 <_ZNSt17_Function_handlerIFvPvEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23f6bb0:	2a01      	cmp	r2, #1
 23f6bb2:	d102      	bne.n	23f6bba <_ZNSt17_Function_handlerIFvPvEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f6bb4:	6001      	str	r1, [r0, #0]
      }
 23f6bb6:	2000      	movs	r0, #0
 23f6bb8:	4770      	bx	lr
	  switch (__op)
 23f6bba:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f6bbc:	bf04      	itt	eq
 23f6bbe:	680b      	ldreq	r3, [r1, #0]
 23f6bc0:	6003      	streq	r3, [r0, #0]
	      break;
 23f6bc2:	e7f8      	b.n	23f6bb6 <_ZNSt17_Function_handlerIFvPvEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023f6bc4 <_ZNSt17_Function_handlerIFvPvEPS1_E9_M_invokeERKSt9_Any_dataOS0_>:
 23f6bc4:	6803      	ldr	r3, [r0, #0]
 23f6bc6:	6808      	ldr	r0, [r1, #0]
 23f6bc8:	4718      	bx	r3
	...

023f6bcc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f6bcc:	b510      	push	{r4, lr}
 23f6bce:	4604      	mov	r4, r0
 23f6bd0:	4b09      	ldr	r3, [pc, #36]	; (23f6bf8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f6bd2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f6bd4:	f004 f8b4 	bl	23fad40 <_ZN5spark10LogManager8instanceEv>
 23f6bd8:	4621      	mov	r1, r4
 23f6bda:	f004 fafd 	bl	23fb1d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f6bde:	f005 fa3b 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f6be2:	f005 fa2b 	bl	23fc03c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f6be6:	4620      	mov	r0, r4
 23f6be8:	4b04      	ldr	r3, [pc, #16]	; (23f6bfc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f6bea:	f840 3b04 	str.w	r3, [r0], #4
 23f6bee:	f004 f97d 	bl	23faeec <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f6bf2:	4620      	mov	r0, r4
 23f6bf4:	bd10      	pop	{r4, pc}
 23f6bf6:	bf00      	nop
 23f6bf8:	023fec10 	.word	0x023fec10
 23f6bfc:	023febf8 	.word	0x023febf8

023f6c00 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f6c00:	b510      	push	{r4, lr}
 23f6c02:	4604      	mov	r4, r0
    }
 23f6c04:	f7ff ffe2 	bl	23f6bcc <_ZN5spark16SerialLogHandlerD1Ev>
 23f6c08:	4620      	mov	r0, r4
 23f6c0a:	2124      	movs	r1, #36	; 0x24
 23f6c0c:	f7ff fd5f 	bl	23f66ce <_ZdlPvj>
 23f6c10:	4620      	mov	r0, r4
 23f6c12:	bd10      	pop	{r4, pc}

023f6c14 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f6c14:	b510      	push	{r4, lr}
      if (_M_manager)
 23f6c16:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f6c18:	4604      	mov	r4, r0
      if (_M_manager)
 23f6c1a:	b113      	cbz	r3, 23f6c22 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f6c1c:	2203      	movs	r2, #3
 23f6c1e:	4601      	mov	r1, r0
 23f6c20:	4798      	blx	r3
    }
 23f6c22:	4620      	mov	r0, r4
 23f6c24:	bd10      	pop	{r4, pc}

023f6c26 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 23f6c26:	b570      	push	{r4, r5, r6, lr}
 23f6c28:	4604      	mov	r4, r0
 23f6c2a:	460e      	mov	r6, r1
 23f6c2c:	4615      	mov	r5, r2
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23f6c2e:	b133      	cbz	r3, 23f6c3e <_ZN2ei9ei_matrixC1EmmPf+0x18>
            buffer = a_buffer;
 23f6c30:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
 23f6c32:	2300      	movs	r3, #0
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 23f6c34:	4620      	mov	r0, r4
        cols = n_cols;
 23f6c36:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
 23f6c3a:	7323      	strb	r3, [r4, #12]
    }
 23f6c3c:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23f6c3e:	fb02 f001 	mul.w	r0, r2, r1
 23f6c42:	2101      	movs	r1, #1
 23f6c44:	0080      	lsls	r0, r0, #2
 23f6c46:	f001 fb55 	bl	23f82f4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f6c4a:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23f6c4c:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
 23f6c4e:	e7f1      	b.n	23f6c34 <_ZN2ei9ei_matrixC1EmmPf+0xe>

023f6c50 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 23f6c50:	b510      	push	{r4, lr}
 23f6c52:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
 23f6c54:	6800      	ldr	r0, [r0, #0]
 23f6c56:	b118      	cbz	r0, 23f6c60 <_ZN2ei9ei_matrixD1Ev+0x10>
 23f6c58:	7b23      	ldrb	r3, [r4, #12]
 23f6c5a:	b10b      	cbz	r3, 23f6c60 <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
 23f6c5c:	f001 fb4c 	bl	23f82f8 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 23f6c60:	4620      	mov	r0, r4
 23f6c62:	bd10      	pop	{r4, pc}

023f6c64 <run_postprocessing>:
    return EI_IMPULSE_OK;
}

extern "C" EI_IMPULSE_ERROR run_postprocessing(ei_impulse_handle_t *handle,
                                               ei_impulse_result_t *result,
                                               bool debug) {
 23f6c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f6c68:	4689      	mov	r9, r1
    if (!handle) {
 23f6c6a:	4604      	mov	r4, r0
 23f6c6c:	b1a0      	cbz	r0, 23f6c98 <run_postprocessing+0x34>
        return EI_IMPULSE_OUT_OF_MEMORY;
    }
    auto impulse = handle->impulse;

    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
 23f6c6e:	2500      	movs	r5, #0
        void* state = NULL;
        if (handle->post_processing_state != NULL) {
            state = handle->post_processing_state[i];
        }

        EI_IMPULSE_ERROR res = impulse->postprocessing_blocks[i].postprocess_fn(handle,
 23f6c70:	2714      	movs	r7, #20
    auto impulse = handle->impulse;
 23f6c72:	68c6      	ldr	r6, [r0, #12]
    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
 23f6c74:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 23f6c76:	42ab      	cmp	r3, r5
 23f6c78:	d912      	bls.n	23f6ca0 <run_postprocessing+0x3c>
        if (handle->post_processing_state != NULL) {
 23f6c7a:	6923      	ldr	r3, [r4, #16]
 23f6c7c:	b10b      	cbz	r3, 23f6c82 <run_postprocessing+0x1e>
            state = handle->post_processing_state[i];
 23f6c7e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
        EI_IMPULSE_ERROR res = impulse->postprocessing_blocks[i].postprocess_fn(handle,
 23f6c82:	6e32      	ldr	r2, [r6, #96]	; 0x60
 23f6c84:	4649      	mov	r1, r9
 23f6c86:	fb07 2205 	mla	r2, r7, r5, r2
 23f6c8a:	4620      	mov	r0, r4
 23f6c8c:	e9d2 8203 	ldrd	r8, r2, [r2, #12]
 23f6c90:	47c0      	blx	r8
                                                                                result,
                                                                                impulse->postprocessing_blocks[i].config,
                                                                                state);
        if (res != EI_IMPULSE_OK) {
 23f6c92:	b918      	cbnz	r0, 23f6c9c <run_postprocessing+0x38>
    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
 23f6c94:	3501      	adds	r5, #1
 23f6c96:	e7ed      	b.n	23f6c74 <run_postprocessing+0x10>
        return EI_IMPULSE_OUT_OF_MEMORY;
 23f6c98:	f06f 000a 	mvn.w	r0, #10
            return res;
        }
    }

    return EI_IMPULSE_OK;
}
 23f6c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return EI_IMPULSE_OK;
 23f6ca0:	2000      	movs	r0, #0
 23f6ca2:	e7fb      	b.n	23f6c9c <run_postprocessing+0x38>

023f6ca4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
 23f6ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    size_t matrix_els = 0;
    uint32_t input_idx = 0;

    for (size_t i = 0; i < input_block_ids_size; i++) {
 23f6ca8:	2400      	movs	r4, #0
) {
 23f6caa:	4680      	mov	r8, r0
 23f6cac:	469e      	mov	lr, r3
    uint32_t input_idx = 0;
 23f6cae:	4625      	mov	r5, r4
    size_t matrix_els = 0;
 23f6cb0:	4622      	mov	r2, r4
                break;
            }
            case kTfLiteInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
                    float val = (float)matrix->buffer[ix];
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 23f6cb2:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
    for (size_t i = 0; i < input_block_ids_size; i++) {
 23f6cb6:	4574      	cmp	r4, lr
 23f6cb8:	d070      	beq.n	23f6d9c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf8>
        ei::matrix_t* matrix = fmatrix[0].matrix;
 23f6cba:	f8d8 3000 	ldr.w	r3, [r8]
        matrix_els += matrix->rows * matrix->cols;
 23f6cbe:	e9d3 0601 	ldrd	r0, r6, [r3, #4]
 23f6cc2:	fb06 2200 	mla	r2, r6, r0, r2
        switch (input->type) {
 23f6cc6:	7808      	ldrb	r0, [r1, #0]
 23f6cc8:	2803      	cmp	r0, #3
 23f6cca:	d03b      	beq.n	23f6d44 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa0>
 23f6ccc:	2809      	cmp	r0, #9
 23f6cce:	d013      	beq.n	23f6cf8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x54>
 23f6cd0:	2801      	cmp	r0, #1
 23f6cd2:	d158      	bne.n	23f6d86 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe2>
 23f6cd4:	4628      	mov	r0, r5
 23f6cd6:	2700      	movs	r7, #0
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6cd8:	e9d3 5601 	ldrd	r5, r6, [r3, #4]
 23f6cdc:	4375      	muls	r5, r6
 23f6cde:	42bd      	cmp	r5, r7
 23f6ce0:	d959      	bls.n	23f6d96 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
                    input->data.f[input_idx++] = matrix->buffer[ix];
 23f6ce2:	681d      	ldr	r5, [r3, #0]
 23f6ce4:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 23f6ce8:	682e      	ldr	r6, [r5, #0]
 23f6cea:	684d      	ldr	r5, [r1, #4]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6cec:	3701      	adds	r7, #1
                    input->data.f[input_idx++] = matrix->buffer[ix];
 23f6cee:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 23f6cf2:	602e      	str	r6, [r5, #0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6cf4:	3001      	adds	r0, #1
 23f6cf6:	e7ef      	b.n	23f6cd8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x34>
        switch (input->type) {
 23f6cf8:	f04f 0900 	mov.w	r9, #0
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6cfc:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
 23f6d00:	437e      	muls	r6, r7
 23f6d02:	454e      	cmp	r6, r9
 23f6d04:	eb05 0009 	add.w	r0, r5, r9
 23f6d08:	d945      	bls.n	23f6d96 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
                    float val = (float)matrix->buffer[ix];
 23f6d0a:	681e      	ldr	r6, [r3, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 23f6d0c:	ed91 7a03 	vldr	s14, [r1, #12]
 23f6d10:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 23f6d14:	edd6 6a00 	vldr	s13, [r6]
 23f6d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 23f6d1c:	fef8 7a67 	vrinta.f32	s15, s15
 23f6d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f6d24:	ee17 aa90 	vmov	sl, s15
 23f6d28:	690e      	ldr	r6, [r1, #16]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 23f6d2a:	684f      	ldr	r7, [r1, #4]
 23f6d2c:	44b2      	add	sl, r6
 23f6d2e:	4656      	mov	r6, sl
 23f6d30:	2e7f      	cmp	r6, #127	; 0x7f
 23f6d32:	bfa8      	it	ge
 23f6d34:	267f      	movge	r6, #127	; 0x7f
 23f6d36:	4566      	cmp	r6, ip
 23f6d38:	bfb8      	it	lt
 23f6d3a:	4666      	movlt	r6, ip
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6d3c:	f109 0901 	add.w	r9, r9, #1
                    input->data.int8[input_idx++] = static_cast<int8_t>(
 23f6d40:	543e      	strb	r6, [r7, r0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6d42:	e7db      	b.n	23f6cfc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x58>
        switch (input->type) {
 23f6d44:	f04f 0900 	mov.w	r9, #0
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, true));
                }
                break;
            }
            case kTfLiteUInt8: {
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6d48:	e9d3 6701 	ldrd	r6, r7, [r3, #4]
 23f6d4c:	437e      	muls	r6, r7
 23f6d4e:	454e      	cmp	r6, r9
 23f6d50:	eb05 0009 	add.w	r0, r5, r9
 23f6d54:	d91f      	bls.n	23f6d96 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
                    float val = (float)matrix->buffer[ix];
 23f6d56:	681e      	ldr	r6, [r3, #0]
 23f6d58:	ed91 7a03 	vldr	s14, [r1, #12]
 23f6d5c:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 23f6d60:	edd6 6a00 	vldr	s13, [r6]
 23f6d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 23f6d68:	fef8 7a67 	vrinta.f32	s15, s15
 23f6d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f6d70:	ee17 aa90 	vmov	sl, s15
 23f6d74:	690e      	ldr	r6, [r1, #16]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
 23f6d76:	684f      	ldr	r7, [r1, #4]
 23f6d78:	44b2      	add	sl, r6
 23f6d7a:	f38a 0608 	usat	r6, #8, sl
 23f6d7e:	543e      	strb	r6, [r7, r0]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23f6d80:	f109 0901 	add.w	r9, r9, #1
 23f6d84:	e7e0      	b.n	23f6d48 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa4>
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
                break;
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 23f6d86:	4601      	mov	r1, r0
 23f6d88:	480b      	ldr	r0, [pc, #44]	; (23f6db8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x114>)
 23f6d8a:	f001 f9dd 	bl	23f8148 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 23f6d8e:	f06f 000c 	mvn.w	r0, #12
            (int)input->bytes, (int)matrix_els);
        return EI_IMPULSE_INVALID_SIZE;
    }

    return EI_IMPULSE_OK;
}
 23f6d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (size_t i = 0; i < input_block_ids_size; i++) {
 23f6d96:	4605      	mov	r5, r0
 23f6d98:	3401      	adds	r4, #1
 23f6d9a:	e78c      	b.n	23f6cb6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x12>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
 23f6d9c:	6989      	ldr	r1, [r1, #24]
 23f6d9e:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 23f6da2:	d007      	beq.n	23f6db4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x110>
 23f6da4:	4291      	cmp	r1, r2
 23f6da6:	d005      	beq.n	23f6db4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x110>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
 23f6da8:	4804      	ldr	r0, [pc, #16]	; (23f6dbc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x118>)
 23f6daa:	f001 f9cd 	bl	23f8148 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
 23f6dae:	f06f 0017 	mvn.w	r0, #23
 23f6db2:	e7ee      	b.n	23f6d92 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xee>
    return EI_IMPULSE_OK;
 23f6db4:	2000      	movs	r0, #0
 23f6db6:	e7ec      	b.n	23f6d92 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xee>
 23f6db8:	023fe752 	.word	0x023fe752
 23f6dbc:	023fe776 	.word	0x023fe776

023f6dc0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
 23f6dc0:	b538      	push	{r3, r4, r5, lr}
 23f6dc2:	460c      	mov	r4, r1
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 23f6dc4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]

    switch (output->type) {
 23f6dc8:	7801      	ldrb	r1, [r0, #0]
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
 23f6dca:	435a      	muls	r2, r3
    switch (output->type) {
 23f6dcc:	2903      	cmp	r1, #3
 23f6dce:	d032      	beq.n	23f6e36 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x76>
 23f6dd0:	2909      	cmp	r1, #9
 23f6dd2:	d016      	beq.n	23f6e02 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x42>
 23f6dd4:	2901      	cmp	r1, #1
 23f6dd6:	d148      	bne.n	23f6e6a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xaa>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
 23f6dd8:	6981      	ldr	r1, [r0, #24]
 23f6dda:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 23f6dde:	d009      	beq.n	23f6df4 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x34>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 23f6de0:	2900      	cmp	r1, #0
 23f6de2:	bfb8      	it	lt
 23f6de4:	3103      	addlt	r1, #3
 23f6de6:	1089      	asrs	r1, r1, #2
            }
            break;
        }
        case kTfLiteUInt8: {
            if (output->bytes != matrix_els) {
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
 23f6de8:	4823      	ldr	r0, [pc, #140]	; (23f6e78 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xb8>)
 23f6dea:	f001 f9ad 	bl	23f8148 <_Z9ei_printfPKcz>
                    (int)output->bytes, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
 23f6dee:	f06f 0017 	mvn.w	r0, #23
 23f6df2:	e005      	b.n	23f6e00 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x40>
            memcpy(output_matrix->buffer, output->data.f, output->bytes);
 23f6df4:	460a      	mov	r2, r1
 23f6df6:	6841      	ldr	r1, [r0, #4]
 23f6df8:	6820      	ldr	r0, [r4, #0]
 23f6dfa:	f005 fbd7 	bl	23fc5ac <memcpy>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
 23f6dfe:	2000      	movs	r0, #0
}
 23f6e00:	bd38      	pop	{r3, r4, r5, pc}
            if (output->bytes != matrix_els) {
 23f6e02:	6981      	ldr	r1, [r0, #24]
 23f6e04:	4291      	cmp	r1, r2
 23f6e06:	d1ef      	bne.n	23f6de8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x28>
            for (size_t ix = 0; ix < output->bytes; ix++) {
 23f6e08:	2200      	movs	r2, #0
 23f6e0a:	6983      	ldr	r3, [r0, #24]
 23f6e0c:	4293      	cmp	r3, r2
 23f6e0e:	d9f6      	bls.n	23f6dfe <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x3e>
                output_matrix->buffer[ix] = value;
 23f6e10:	6823      	ldr	r3, [r4, #0]
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 23f6e12:	6905      	ldr	r5, [r0, #16]
                output_matrix->buffer[ix] = value;
 23f6e14:	eb03 0182 	add.w	r1, r3, r2, lsl #2
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 23f6e18:	6843      	ldr	r3, [r0, #4]
 23f6e1a:	ed90 7a03 	vldr	s14, [r0, #12]
 23f6e1e:	569b      	ldrsb	r3, [r3, r2]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 23f6e20:	3201      	adds	r2, #1
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 23f6e22:	1b5b      	subs	r3, r3, r5
 23f6e24:	ee07 3a90 	vmov	s15, r3
 23f6e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f6e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
 23f6e30:	edc1 7a00 	vstr	s15, [r1]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 23f6e34:	e7e9      	b.n	23f6e0a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x4a>
            if (output->bytes != matrix_els) {
 23f6e36:	6981      	ldr	r1, [r0, #24]
 23f6e38:	4291      	cmp	r1, r2
 23f6e3a:	d1d5      	bne.n	23f6de8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x28>
            for (size_t ix = 0; ix < output->bytes; ix++) {
 23f6e3c:	2200      	movs	r2, #0
 23f6e3e:	6983      	ldr	r3, [r0, #24]
 23f6e40:	4293      	cmp	r3, r2
 23f6e42:	d9dc      	bls.n	23f6dfe <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x3e>
                output_matrix->buffer[ix] = value;
 23f6e44:	6823      	ldr	r3, [r4, #0]
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 23f6e46:	6905      	ldr	r5, [r0, #16]
                output_matrix->buffer[ix] = value;
 23f6e48:	eb03 0182 	add.w	r1, r3, r2, lsl #2
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 23f6e4c:	6843      	ldr	r3, [r0, #4]
 23f6e4e:	ed90 7a03 	vldr	s14, [r0, #12]
 23f6e52:	5c9b      	ldrb	r3, [r3, r2]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 23f6e54:	3201      	adds	r2, #1
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
 23f6e56:	1b5b      	subs	r3, r3, r5
 23f6e58:	ee07 3a90 	vmov	s15, r3
 23f6e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f6e60:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
 23f6e64:	edc1 7a00 	vstr	s15, [r1]
            for (size_t ix = 0; ix < output->bytes; ix++) {
 23f6e68:	e7e9      	b.n	23f6e3e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x7e>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
 23f6e6a:	4804      	ldr	r0, [pc, #16]	; (23f6e7c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xbc>)
 23f6e6c:	f001 f96c 	bl	23f8148 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
 23f6e70:	f06f 000d 	mvn.w	r0, #13
 23f6e74:	e7c4      	b.n	23f6e00 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x40>
 23f6e76:	bf00      	nop
 23f6e78:	023fe7c3 	.word	0x023fe7c3
 23f6e7c:	023fe805 	.word	0x023fe805

023f6e80 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 23f6e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f6e84:	ed2d 8b04 	vpush	{d8-d9}
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 23f6e88:	788b      	ldrb	r3, [r1, #2]
) {
 23f6e8a:	4605      	mov	r5, r0
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 23f6e8c:	2b03      	cmp	r3, #3
) {
 23f6e8e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 23f6e90:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
 23f6e94:	d14b      	bne.n	23f6f2e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xae>
        switch (block_config->object_detection_last_layer) {
 23f6e96:	f991 3009 	ldrsb.w	r3, [r1, #9]
 23f6e9a:	1e58      	subs	r0, r3, #1
 23f6e9c:	2809      	cmp	r0, #9
 23f6e9e:	d843      	bhi.n	23f6f28 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xa8>
 23f6ea0:	e8df f000 	tbb	[pc, r0]
 23f6ea4:	1b0ea605 	.word	0x1b0ea605
 23f6ea8:	2727210e 	.word	0x2727210e
 23f6eac:	3930      	.short	0x3930
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 23f6eae:	4852      	ldr	r0, [pc, #328]	; (23f6ff8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>)
                }
                break;
            }
            case EI_CLASSIFIER_LAST_LAYER_YOLOX: {
                if (block_config->quantized == 1) {
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
 23f6eb0:	f001 f94a 	bl	23f8148 <_Z9ei_printfPKcz>
                break;
            }
            default: {
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
                    block_config->object_detection_last_layer);
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 23f6eb4:	f06f 0009 	mvn.w	r0, #9
            }
        }
    }

    return fill_res;
}
 23f6eb8:	ecbd 8b04 	vpop	{d8-d9}
 23f6ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
 23f6ec0:	7811      	ldrb	r1, [r2, #0]
 23f6ec2:	2909      	cmp	r1, #9
 23f6ec4:	f000 8094 	beq.w	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                else if (output->type == kTfLiteFloat32) {
 23f6ec8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23f6ecc:	2b01      	cmp	r3, #1
 23f6ece:	f000 808f 	beq.w	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 23f6ed2:	484a      	ldr	r0, [pc, #296]	; (23f6ffc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x17c>)
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 23f6ed4:	f001 f938 	bl	23f8148 <_Z9ei_printfPKcz>
 23f6ed8:	e7ec      	b.n	23f6eb4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x34>
                if (block_config->quantized == 1) {
 23f6eda:	7d0b      	ldrb	r3, [r1, #20]
 23f6edc:	2b00      	cmp	r3, #0
 23f6ede:	f000 8087 	beq.w	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
 23f6ee2:	4847      	ldr	r0, [pc, #284]	; (23f7000 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x180>)
 23f6ee4:	e7e4      	b.n	23f6eb0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x30>
                if (block_config->quantized == 1) {
 23f6ee6:	7d0b      	ldrb	r3, [r1, #20]
 23f6ee8:	2b00      	cmp	r3, #0
 23f6eea:	f000 8081 	beq.w	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
 23f6eee:	4845      	ldr	r0, [pc, #276]	; (23f7004 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x184>)
 23f6ef0:	e7de      	b.n	23f6eb0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x30>
                if (output->type == kTfLiteInt8) {
 23f6ef2:	7811      	ldrb	r1, [r2, #0]
 23f6ef4:	2909      	cmp	r1, #9
 23f6ef6:	d07b      	beq.n	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                else if (output->type == kTfLiteFloat32) {
 23f6ef8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23f6efc:	2b01      	cmp	r3, #1
 23f6efe:	d077      	beq.n	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
 23f6f00:	4841      	ldr	r0, [pc, #260]	; (23f7008 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x188>)
 23f6f02:	e7e7      	b.n	23f6ed4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x54>
                if (output->type == kTfLiteInt8) {
 23f6f04:	7811      	ldrb	r1, [r2, #0]
 23f6f06:	2909      	cmp	r1, #9
 23f6f08:	d072      	beq.n	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                else if (output->type == kTfLiteFloat32) {
 23f6f0a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23f6f0e:	2b01      	cmp	r3, #1
 23f6f10:	d06e      	beq.n	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
 23f6f12:	483e      	ldr	r0, [pc, #248]	; (23f700c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x18c>)
 23f6f14:	e7de      	b.n	23f6ed4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x54>
                if (output->type == kTfLiteInt8) {
 23f6f16:	7811      	ldrb	r1, [r2, #0]
 23f6f18:	2909      	cmp	r1, #9
 23f6f1a:	d069      	beq.n	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                else if (output->type == kTfLiteFloat32) {
 23f6f1c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23f6f20:	2b01      	cmp	r3, #1
 23f6f22:	d065      	beq.n	23f6ff0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x170>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
 23f6f24:	483a      	ldr	r0, [pc, #232]	; (23f7010 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x190>)
 23f6f26:	e7d5      	b.n	23f6ed4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x54>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 23f6f28:	4619      	mov	r1, r3
 23f6f2a:	483a      	ldr	r0, [pc, #232]	; (23f7014 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x194>)
 23f6f2c:	e7d2      	b.n	23f6ed4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x54>
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
 23f6f2e:	2b05      	cmp	r3, #5
 23f6f30:	d101      	bne.n	23f6f36 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xb6>
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;
 23f6f32:	2000      	movs	r0, #0
 23f6f34:	e7c0      	b.n	23f6eb8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x38>
        if (!result->copy_output) {
 23f6f36:	f897 4040 	ldrb.w	r4, [r7, #64]	; 0x40
 23f6f3a:	2c00      	cmp	r4, #0
 23f6f3c:	d1f9      	bne.n	23f6f32 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xb2>
            if (int8_output) {
 23f6f3e:	7813      	ldrb	r3, [r2, #0]
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23f6f40:	f8d2 8004 	ldr.w	r8, [r2, #4]
            if (int8_output) {
 23f6f44:	2b09      	cmp	r3, #9
 23f6f46:	d022      	beq.n	23f6f8e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x10e>
                                                                       float *data,
                                                                       bool debug) {
#ifdef EI_DSP_RESULT_OVERRIDE
    uint32_t stop_count = EI_DSP_RESULT_OVERRIDE;
#else
    uint32_t stop_count = impulse->label_count;
 23f6f48:	f8b0 9072 	ldrh.w	r9, [r0, #114]	; 0x72
    for (uint32_t ix = 0; ix < stop_count; ix++) {

        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
 23f6f4c:	4a32      	ldr	r2, [pc, #200]	; (23f7018 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x198>)
            ei_printf_float(value);
            ei_printf("\n");
 23f6f4e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 23f701c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x19c>
    for (uint32_t ix = 0; ix < stop_count; ix++) {
 23f6f52:	454c      	cmp	r4, r9
 23f6f54:	d2ed      	bcs.n	23f6f32 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xb2>
        float value = data[ix];
 23f6f56:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
 23f6f5a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 23f6f5e:	b16e      	cbz	r6, 23f6f7c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfc>
            ei_printf("%s:\t", impulse->categories[ix]);
 23f6f60:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 23f6f62:	4610      	mov	r0, r2
 23f6f64:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23f6f68:	f001 f8ee 	bl	23f8148 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23f6f6c:	eeb0 0a48 	vmov.f32	s0, s16
 23f6f70:	f001 f90a 	bl	23f8188 <_Z15ei_printf_floatf>
            ei_printf("\n");
 23f6f74:	4650      	mov	r0, sl
 23f6f76:	f001 f8e7 	bl	23f8148 <_Z9ei_printfPKcz>
 23f6f7a:	4a27      	ldr	r2, [pc, #156]	; (23f7018 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x198>)
        }
// For testing purposes, we will have more values than labels
#ifndef EI_DSP_RESULT_OVERRIDE
        result->classification[ix].label = impulse->categories[ix];
 23f6f7c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    for (uint32_t ix = 0; ix < stop_count; ix++) {
 23f6f7e:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23f6f80:	f853 300b 	ldr.w	r3, [r3, fp]
 23f6f84:	3708      	adds	r7, #8
 23f6f86:	603b      	str	r3, [r7, #0]
#endif
        result->classification[ix].value = value;
 23f6f88:	ed87 8a01 	vstr	s16, [r7, #4]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
 23f6f8c:	e7e1      	b.n	23f6f52 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xd2>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23f6f8e:	edd2 7a04 	vldr	s15, [r2, #16]
 23f6f92:	ed92 9a03 	vldr	s18, [r2, #12]
 23f6f96:	eef8 8ae7 	vcvt.f32.s32	s17, s15
            ei_printf("%s:\t", impulse->categories[ix]);
 23f6f9a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 23f7018 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x198>
            ei_printf("\n");
 23f6f9e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 23f701c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x19c>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f6fa2:	f8b5 3072 	ldrh.w	r3, [r5, #114]	; 0x72
 23f6fa6:	42a3      	cmp	r3, r4
 23f6fa8:	d9c3      	bls.n	23f6f32 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xb2>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 23f6faa:	f918 3004 	ldrsb.w	r3, [r8, r4]
 23f6fae:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 23f6fb2:	ee08 3a10 	vmov	s16, r3
 23f6fb6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23f6fba:	ee38 8a68 	vsub.f32	s16, s16, s17
 23f6fbe:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
 23f6fc2:	b166      	cbz	r6, 23f6fde <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x15e>
            ei_printf("%s:\t", impulse->categories[ix]);
 23f6fc4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 23f6fc6:	4658      	mov	r0, fp
 23f6fc8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23f6fcc:	f001 f8bc 	bl	23f8148 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23f6fd0:	eeb0 0a48 	vmov.f32	s0, s16
 23f6fd4:	f001 f8d8 	bl	23f8188 <_Z15ei_printf_floatf>
            ei_printf("\n");
 23f6fd8:	4648      	mov	r0, r9
 23f6fda:	f001 f8b5 	bl	23f8148 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
 23f6fde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f6fe0:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23f6fe2:	f853 300a 	ldr.w	r3, [r3, sl]
 23f6fe6:	3708      	adds	r7, #8
 23f6fe8:	603b      	str	r3, [r7, #0]
        result->classification[ix].value = value;
 23f6fea:	ed87 8a01 	vstr	s16, [r7, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23f6fee:	e7d8      	b.n	23f6fa2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x122>
                    fill_res = fill_result_struct_quantized_yolov5(
 23f6ff0:	f06f 0014 	mvn.w	r0, #20
 23f6ff4:	e760      	b.n	23f6eb8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x38>
 23f6ff6:	bf00      	nop
 23f6ff8:	023fe82a 	.word	0x023fe82a
 23f6ffc:	023fe86f 	.word	0x023fe86f
 23f7000:	023fe8a4 	.word	0x023fe8a4
 23f7004:	023fe8d5 	.word	0x023fe8d5
 23f7008:	023fe907 	.word	0x023fe907
 23f700c:	023fe939 	.word	0x023fe939
 23f7010:	023fe96d 	.word	0x023fe96d
 23f7014:	023fe9a1 	.word	0x023fe9a1
 23f7018:	023fe9d4 	.word	0x023fe9d4
 23f701c:	023fea29 	.word	0x023fea29

023f7020 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
 23f7020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f7024:	4699      	mov	r9, r3
    ei_impulse_result_t *result,
    bool debug) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;

    if (graph_config->model_invoke() != kTfLiteOk) {
 23f7026:	698b      	ldr	r3, [r1, #24]
static EI_IMPULSE_ERROR inference_tflite_run(
 23f7028:	b085      	sub	sp, #20
    if (graph_config->model_invoke() != kTfLiteOk) {
 23f702a:	689b      	ldr	r3, [r3, #8]
static EI_IMPULSE_ERROR inference_tflite_run(
 23f702c:	4607      	mov	r7, r0
 23f702e:	460d      	mov	r5, r1
 23f7030:	4614      	mov	r4, r2
 23f7032:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23f7034:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    if (graph_config->model_invoke() != kTfLiteOk) {
 23f7038:	4798      	blx	r3
 23f703a:	bb48      	cbnz	r0, 23f7090 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x70>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
 23f703c:	f001 f87e 	bl	23f813c <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23f7040:	1b00      	subs	r0, r0, r4
 23f7042:	eb61 0109 	sbc.w	r1, r1, r9
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23f7046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f704a:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23f704c:	e9c6 010c 	strd	r0, r1, [r6, #48]	; 0x30
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23f7050:	f7ff f90a 	bl	23f6268 <__aeabi_ldivmod>
 23f7054:	4601      	mov	r1, r0
 23f7056:	6230      	str	r0, [r6, #32]

    // Read the predicted y value from the model's output tensor
    if (debug) {
 23f7058:	f1b8 0f00 	cmp.w	r8, #0
 23f705c:	d002      	beq.n	23f7064 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x44>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 23f705e:	480e      	ldr	r0, [pc, #56]	; (23f7098 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x78>)
 23f7060:	f001 f872 	bl	23f8148 <_Z9ei_printfPKcz>
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 23f7064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23f7066:	4629      	mov	r1, r5
 23f7068:	9300      	str	r3, [sp, #0]
 23f706a:	4638      	mov	r0, r7
 23f706c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 23f7070:	e9cd 6801 	strd	r6, r8, [sp, #4]
 23f7074:	f7ff ff04 	bl	23f6e80 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
 23f7078:	4604      	mov	r4, r0
 23f707a:	b928      	cbnz	r0, 23f7088 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f707c:	f001 f85c 	bl	23f8138 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
 23f7080:	3002      	adds	r0, #2
 23f7082:	bf08      	it	eq
 23f7084:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
 23f7088:	4620      	mov	r0, r4
 23f708a:	b005      	add	sp, #20
 23f708c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return EI_IMPULSE_TFLITE_ERROR;
 23f7090:	f06f 0402 	mvn.w	r4, #2
 23f7094:	e7f8      	b.n	23f7088 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
 23f7096:	bf00      	nop
 23f7098:	023fe9d9 	.word	0x023fe9d9

023f709c <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f709c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 23f70a0:	4606      	mov	r6, r0
 23f70a2:	468a      	mov	sl, r1
 23f70a4:	4617      	mov	r7, r2
 23f70a6:	4698      	mov	r8, r3
    auto& impulse = handle->impulse;
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f70a8:	2500      	movs	r5, #0
 23f70aa:	68f3      	ldr	r3, [r6, #12]
 23f70ac:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 23f70b0:	42aa      	cmp	r2, r5
 23f70b2:	d914      	bls.n	23f70de <run_inference+0x42>

        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f70b4:	6d9c      	ldr	r4, [r3, #88]	; 0x58
        }
#endif

        result->copy_output = block.keep_output;

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 23f70b6:	4651      	mov	r1, sl
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23f70b8:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 23f70bc:	7e22      	ldrb	r2, [r4, #24]
 23f70be:	e9d4 9002 	ldrd	r9, r0, [r4, #8]
 23f70c2:	6963      	ldr	r3, [r4, #20]
        result->copy_output = block.keep_output;
 23f70c4:	7924      	ldrb	r4, [r4, #4]
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 23f70c6:	e9cd 0802 	strd	r0, r8, [sp, #8]
        result->copy_output = block.keep_output;
 23f70ca:	f887 4040 	strb.w	r4, [r7, #64]	; 0x40
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
 23f70ce:	e9cd 2700 	strd	r2, r7, [sp]
 23f70d2:	68f0      	ldr	r0, [r6, #12]
 23f70d4:	462a      	mov	r2, r5
 23f70d6:	47c8      	blx	r9
        if (res != EI_IMPULSE_OK) {
 23f70d8:	b930      	cbnz	r0, 23f70e8 <run_inference+0x4c>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23f70da:	3501      	adds	r5, #1
 23f70dc:	e7e5      	b.n	23f70aa <run_inference+0xe>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f70de:	f001 f82b 	bl	23f8138 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
 23f70e2:	1c83      	adds	r3, r0, #2
 23f70e4:	bf18      	it	ne
 23f70e6:	2000      	movne	r0, #0
}
 23f70e8:	b004      	add	sp, #16
 23f70ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

023f70f0 <setup>:

/**
 * @brief      Particle setup function
 */
void setup()
{
 23f70f0:	b538      	push	{r3, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f70f2:	2000      	movs	r0, #0
 23f70f4:	f002 fd12 	bl	23f9b1c <hal_timer_millis>
        while (_while() && !_condition()) {
 23f70f8:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23f70fc:	4604      	mov	r4, r0
 23f70fe:	2000      	movs	r0, #0
 23f7100:	f002 fd0c 	bl	23f9b1c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f7104:	1b00      	subs	r0, r0, r4
 23f7106:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f710a:	42a8      	cmp	r0, r5
 23f710c:	f171 0300 	sbcs.w	r3, r1, #0
 23f7110:	d207      	bcs.n	23f7122 <setup+0x32>
    // put your setup code here, to run once:

    // Wait for serial to make it easier to see the serial logs at startup.
    waitFor(Serial.isConnected, 15000);
 23f7112:	f004 ffa1 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f7116:	f004 ff94 	bl	23fc042 <_ZN9USBSerial11isConnectedEv>
 23f711a:	b910      	cbnz	r0, 23f7122 <setup+0x32>
            spark_process();
 23f711c:	f002 ff2e 	bl	23f9f7c <spark_process>
        while (_while() && !_condition()) {
 23f7120:	e7ed      	b.n	23f70fe <setup+0xe>
 23f7122:	f004 ff99 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f7126:	f004 ff8c 	bl	23fc042 <_ZN9USBSerial11isConnectedEv>
    delay(2000);
 23f712a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f712e:	f003 f891 	bl	23fa254 <delay>

    ei_printf("Edge Impulse inference runner for Particle devices\r\n");
 23f7132:	4806      	ldr	r0, [pc, #24]	; (23f714c <setup+0x5c>)
 23f7134:	f001 f808 	bl	23f8148 <_Z9ei_printfPKcz>

    initializeScale();
 23f7138:	f002 f98c 	bl	23f9454 <_Z15initializeScalev>
    for (int i = 0; i < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; i++)
    {
        features[i] = 0.0;
    }
}
 23f713c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        features[i] = 0.0;
 23f7140:	2244      	movs	r2, #68	; 0x44
 23f7142:	2100      	movs	r1, #0
 23f7144:	4802      	ldr	r0, [pc, #8]	; (23f7150 <setup+0x60>)
 23f7146:	f005 ba58 	b.w	23fc5fa <memset>
 23f714a:	bf00      	nop
 23f714c:	023fe9f6 	.word	0x023fe9f6
 23f7150:	1007a67c 	.word	0x1007a67c

023f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f7154:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f7156:	2614      	movs	r6, #20
 23f7158:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f715c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f715e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f7162:	42ae      	cmp	r6, r5
 23f7164:	d004      	beq.n	23f7170 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f7166:	4628      	mov	r0, r5
 23f7168:	f004 fd66 	bl	23fbc38 <_ZN6StringD1Ev>
 23f716c:	3514      	adds	r5, #20
 23f716e:	e7f8      	b.n	23f7162 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f7170:	6820      	ldr	r0, [r4, #0]
 23f7172:	f002 fff1 	bl	23fa158 <free>
    AllocatorT::free(data_);
}
 23f7176:	4620      	mov	r0, r4
 23f7178:	bd70      	pop	{r4, r5, r6, pc}

023f717a <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 23f717a:	b513      	push	{r0, r1, r4, lr}
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23f717c:	6903      	ldr	r3, [r0, #16]
      ~unique_ptr() noexcept
 23f717e:	4604      	mov	r4, r0
	if (__ptr != nullptr)
 23f7180:	b13b      	cbz	r3, 23f7192 <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev+0x18>
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 23f7182:	9301      	str	r3, [sp, #4]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23f7184:	6883      	ldr	r3, [r0, #8]
 23f7186:	b90b      	cbnz	r3, 23f718c <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev+0x12>
	__throw_bad_function_call();
 23f7188:	f005 f956 	bl	23fc438 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f718c:	68c3      	ldr	r3, [r0, #12]
 23f718e:	a901      	add	r1, sp, #4
 23f7190:	4798      	blx	r3
	  get_deleter()(std::move(__ptr));
	__ptr = pointer();
 23f7192:	2300      	movs	r3, #0
    class function<_Res(_ArgTypes...)>
 23f7194:	4620      	mov	r0, r4
 23f7196:	6123      	str	r3, [r4, #16]
 23f7198:	f7ff fd3c 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
      }
 23f719c:	4620      	mov	r0, r4
 23f719e:	b002      	add	sp, #8
 23f71a0:	bd10      	pop	{r4, pc}

023f71a2 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
    function<_Res(_ArgTypes...)>::
 23f71a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f71a4:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f71a6:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23f71a8:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
 23f71ac:	b90b      	cbnz	r3, 23f71b2 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
 23f71ae:	f005 f943 	bl	23fc438 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f71b2:	68c4      	ldr	r4, [r0, #12]
 23f71b4:	ab01      	add	r3, sp, #4
 23f71b6:	aa02      	add	r2, sp, #8
 23f71b8:	a903      	add	r1, sp, #12
 23f71ba:	47a0      	blx	r4
    }
 23f71bc:	b004      	add	sp, #16
 23f71be:	bd10      	pop	{r4, pc}

023f71c0 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    }
#endif
    return EIDSP_NOT_SUPPORTED;
}

__attribute__((unused)) int extract_raw_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23f71c0:	b510      	push	{r4, lr}
 23f71c2:	460c      	mov	r4, r1
 23f71c4:	ed2d 8b02 	vpush	{d8}
    ei_dsp_config_raw_t config = *((ei_dsp_config_raw_t*)config_ptr);
 23f71c8:	ed92 8a03 	vldr	s16, [r2, #12]
    // Because of rounding errors during re-sampling the output size of the block might be
    // smaller than the input of the block. Make sure we don't write outside of the bounds
    // of the array:
    // https://forum.edgeimpulse.com/t/using-custom-sensors-on-raspberry-pi-4/3506/7
    size_t els_to_copy = signal->total_length;
    if (els_to_copy > output_matrix->rows * output_matrix->cols) {
 23f71cc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 23f71d0:	435a      	muls	r2, r3
    size_t els_to_copy = signal->total_length;
 23f71d2:	6901      	ldr	r1, [r0, #16]
        els_to_copy = output_matrix->rows * output_matrix->cols;
    }

    signal->get_data(0, els_to_copy, output_matrix->buffer);
 23f71d4:	6823      	ldr	r3, [r4, #0]
 23f71d6:	428a      	cmp	r2, r1
 23f71d8:	bf28      	it	cs
 23f71da:	460a      	movcs	r2, r1
 23f71dc:	2100      	movs	r1, #0
 23f71de:	f7ff ffe0 	bl	23f71a2 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        if (scale == 1.0f) return EIDSP_OK;
 23f71e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23f71e6:	eeb4 8a67 	vcmp.f32	s16, s15
 23f71ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f71ee:	d008      	beq.n	23f7202 <_ZN12_GLOBAL__N_120extract_raw_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x42>
 23f71f0:	eeb0 0a48 	vmov.f32	s0, s16
    if (ret != EIDSP_OK) {
        EIDSP_ERR(ret);
    }

    return EIDSP_OK;
}
 23f71f4:	ecbd 8b02 	vpop	{d8}
 23f71f8:	4620      	mov	r0, r4
 23f71fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f71fe:	f7ff bc5f 	b.w	23f6ac0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
 23f7202:	2000      	movs	r0, #0
 23f7204:	ecbd 8b02 	vpop	{d8}
 23f7208:	bd10      	pop	{r4, pc}
	...

023f720c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23f720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7210:	ed2d 8b02 	vpush	{d8}
 23f7214:	4606      	mov	r6, r0
 23f7216:	460f      	mov	r7, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f7218:	6950      	ldr	r0, [r2, #20]
 23f721a:	4942      	ldr	r1, [pc, #264]	; (23f7324 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x118>)
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23f721c:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f721e:	f8d2 b008 	ldr.w	fp, [r2, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f7222:	f7ff fa1f 	bl	23f6664 <strcmp>
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f7226:	2400      	movs	r4, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f7228:	2800      	cmp	r0, #0
 23f722a:	bf0c      	ite	eq
 23f722c:	f04f 0a01 	moveq.w	sl, #1
 23f7230:	f04f 0a03 	movne.w	sl, #3
    size_t output_ix = 0;
 23f7234:	4625      	mov	r5, r4

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f7236:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 23f7328 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f723a:	eddf 8a3c 	vldr	s17, [pc, #240]	; 23f732c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x120>
    size_t bytes_left = signal->total_length;
 23f723e:	f8d6 8010 	ldr.w	r8, [r6, #16]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f7242:	6933      	ldr	r3, [r6, #16]
 23f7244:	42a3      	cmp	r3, r4
 23f7246:	d96b      	bls.n	23f7320 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x114>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23f7248:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23f724c:	46c1      	mov	r9, r8
 23f724e:	bf28      	it	cs
 23f7250:	f44f 6980 	movcs.w	r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f7254:	2300      	movs	r3, #0
 23f7256:	465a      	mov	r2, fp
 23f7258:	4649      	mov	r1, r9
 23f725a:	4668      	mov	r0, sp
 23f725c:	f7ff fce3 	bl	23f6c26 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23f7260:	9b00      	ldr	r3, [sp, #0]
 23f7262:	b943      	cbnz	r3, 23f7276 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f7264:	4668      	mov	r0, sp
 23f7266:	f7ff fcf3 	bl	23f6c50 <_ZN2ei9ei_matrixD1Ev>
 23f726a:	4831      	ldr	r0, [pc, #196]	; (23f7330 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
 23f726c:	b005      	add	sp, #20
 23f726e:	ecbd 8b02 	vpop	{d8}
 23f7272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23f7276:	464a      	mov	r2, r9
 23f7278:	4621      	mov	r1, r4
 23f727a:	4630      	mov	r0, r6
 23f727c:	f7ff ff91 	bl	23f71a2 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f7280:	2200      	movs	r2, #0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f7282:	eddf 5a2c 	vldr	s11, [pc, #176]	; 23f7334 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>
 23f7286:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 23f7338 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f728a:	454a      	cmp	r2, r9
 23f728c:	d040      	beq.n	23f7310 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f728e:	9b00      	ldr	r3, [sp, #0]
            if (channel_count == 3) {
 23f7290:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f7294:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f7298:	edd3 7a00 	vldr	s15, [r3]
 23f729c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23f72a0:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f72a4:	f3c3 4107 	ubfx	r1, r3, #16, #8
 23f72a8:	ee07 1a90 	vmov	s15, r1
 23f72ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f72b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23f72b4:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f72b8:	ee07 1a90 	vmov	s15, r1
 23f72bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f72c0:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23f72c2:	ee87 7a88 	vdiv.f32	s14, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f72c6:	ee07 3a90 	vmov	s15, r3
 23f72ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
 23f72ce:	683b      	ldr	r3, [r7, #0]
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23f72d0:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
 23f72d4:	ea4f 0085 	mov.w	r0, r5, lsl #2
 23f72d8:	f105 0101 	add.w	r1, r5, #1
 23f72dc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            if (channel_count == 3) {
 23f72e0:	d10d      	bne.n	23f72fe <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf2>
                output_matrix->buffer[output_ix++] = r;
 23f72e2:	ed83 6a00 	vstr	s12, [r3]
                output_matrix->buffer[output_ix++] = g;
 23f72e6:	683b      	ldr	r3, [r7, #0]
                output_matrix->buffer[output_ix++] = b;
 23f72e8:	1ce9      	adds	r1, r5, #3
                output_matrix->buffer[output_ix++] = g;
 23f72ea:	4403      	add	r3, r0
 23f72ec:	ed83 7a01 	vstr	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
 23f72f0:	683b      	ldr	r3, [r7, #0]
 23f72f2:	4403      	add	r3, r0
 23f72f4:	edc3 6a02 	vstr	s13, [r3, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f72f8:	460d      	mov	r5, r1
 23f72fa:	3201      	adds	r2, #1
 23f72fc:	e7c5      	b.n	23f728a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f72fe:	ee27 7a28 	vmul.f32	s14, s14, s17
 23f7302:	eea6 7a25 	vfma.f32	s14, s12, s11
 23f7306:	eea6 7a85 	vfma.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = v;
 23f730a:	ed83 7a00 	vstr	s14, [r3]
 23f730e:	e7f3      	b.n	23f72f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xec>
        matrix_t input_matrix(elements_to_read, config.axes);
 23f7310:	4668      	mov	r0, sp
        bytes_left -= elements_to_read;
 23f7312:	eba8 0802 	sub.w	r8, r8, r2
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f7316:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f731a:	f7ff fc99 	bl	23f6c50 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f731e:	e790      	b.n	23f7242 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36>
    return EIDSP_OK;
 23f7320:	2000      	movs	r0, #0
 23f7322:	e7a3      	b.n	23f726c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
 23f7324:	023fea2b 	.word	0x023fea2b
 23f7328:	437f0000 	.word	0x437f0000
 23f732c:	3f1645a2 	.word	0x3f1645a2
 23f7330:	fffffc16 	.word	0xfffffc16
 23f7334:	3e991687 	.word	0x3e991687
 23f7338:	3de978d5 	.word	0x3de978d5

023f733c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f7340:	6805      	ldr	r5, [r0, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23f7342:	680c      	ldr	r4, [r1, #0]
 23f7344:	f8d3 9000 	ldr.w	r9, [r3]
 23f7348:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 23f734c:	fbb4 f4f0 	udiv	r4, r4, r0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23f7350:	6816      	ldr	r6, [r2, #0]

        size_t out_ptr_ix = 0;
 23f7352:	f04f 0800 	mov.w	r8, #0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23f7356:	fbb6 f6f0 	udiv	r6, r6, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23f735a:	6a1b      	ldr	r3, [r3, #32]

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23f735c:	435c      	muls	r4, r3
 23f735e:	fb03 4606 	mla	r6, r3, r6, r4
 23f7362:	42a6      	cmp	r6, r4
 23f7364:	d919      	bls.n	23f739a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x5e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23f7366:	2700      	movs	r7, #0
 23f7368:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 23f736c:	68aa      	ldr	r2, [r5, #8]
 23f736e:	eb07 0308 	add.w	r3, r7, r8
 23f7372:	42ba      	cmp	r2, r7
 23f7374:	d90c      	bls.n	23f7390 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 23f7376:	686b      	ldr	r3, [r5, #4]
 23f7378:	2201      	movs	r2, #1
 23f737a:	5dd9      	ldrb	r1, [r3, r7]
 23f737c:	6828      	ldr	r0, [r5, #0]
 23f737e:	4653      	mov	r3, sl
 23f7380:	4421      	add	r1, r4
 23f7382:	f7ff ff0e 	bl	23f71a2 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
 23f7386:	f10a 0a04 	add.w	sl, sl, #4
 23f738a:	b938      	cbnz	r0, 23f739c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x60>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23f738c:	3701      	adds	r7, #1
 23f738e:	e7ed      	b.n	23f736c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23f7390:	68ea      	ldr	r2, [r5, #12]
 23f7392:	4698      	mov	r8, r3
 23f7394:	6a12      	ldr	r2, [r2, #32]
 23f7396:	4414      	add	r4, r2
 23f7398:	e7e3      	b.n	23f7362 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x26>
                    return r;
                }
            }
        }

        return 0;
 23f739a:	2000      	movs	r0, #0
      }
 23f739c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f73a0 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 23f73a0:	b510      	push	{r4, lr}
 23f73a2:	4604      	mov	r4, r0
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23f73a4:	6800      	ldr	r0, [r0, #0]
 23f73a6:	b108      	cbz	r0, 23f73ac <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev+0xc>
	  delete [] __ptr;
 23f73a8:	f7ff f98f 	bl	23f66ca <_ZdaPv>
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
 23f73ac:	4620      	mov	r0, r4
 23f73ae:	bd10      	pop	{r4, pc}

023f73b0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>:
      ~unique_ptr() noexcept
 23f73b0:	b538      	push	{r3, r4, r5, lr}
	if (__ptr != nullptr)
 23f73b2:	6805      	ldr	r5, [r0, #0]
      ~unique_ptr() noexcept
 23f73b4:	4604      	mov	r4, r0
	if (__ptr != nullptr)
 23f73b6:	b135      	cbz	r5, 23f73c6 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev+0x16>
	delete __ptr;
 23f73b8:	4628      	mov	r0, r5
 23f73ba:	f7ff fc49 	bl	23f6c50 <_ZN2ei9ei_matrixD1Ev>
 23f73be:	2110      	movs	r1, #16
 23f73c0:	4628      	mov	r0, r5
 23f73c2:	f7ff f984 	bl	23f66ce <_ZdlPvj>
      }
 23f73c6:	4620      	mov	r0, r4
 23f73c8:	bd38      	pop	{r3, r4, r5, pc}

023f73ca <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>:
      void reset(pointer __p) noexcept
 23f73ca:	b510      	push	{r4, lr}
	const pointer __old_p = _M_ptr();
 23f73cc:	6804      	ldr	r4, [r0, #0]
	_M_ptr() = __p;
 23f73ce:	6001      	str	r1, [r0, #0]
	if (__old_p)
 23f73d0:	b144      	cbz	r4, 23f73e4 <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_+0x1a>
	delete __ptr;
 23f73d2:	4620      	mov	r0, r4
 23f73d4:	f7ff fc3c 	bl	23f6c50 <_ZN2ei9ei_matrixD1Ev>
 23f73d8:	4620      	mov	r0, r4
      }
 23f73da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delete __ptr;
 23f73de:	2110      	movs	r1, #16
 23f73e0:	f7ff b975 	b.w	23f66ce <_ZdlPvj>
      }
 23f73e4:	bd10      	pop	{r4, pc}

023f73e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23f73e6:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f73e8:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23f73ea:	460b      	mov	r3, r1
 23f73ec:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f73ee:	e9d0 0100 	ldrd	r0, r1, [r0]
 23f73f2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f73f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 23f73fa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f73fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f7402:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23f7406:	b002      	add	sp, #8
 23f7408:	bd10      	pop	{r4, pc}

023f740a <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 23f740a:	b538      	push	{r3, r4, r5, lr}
 23f740c:	4605      	mov	r5, r0
 23f740e:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
 23f7410:	f7ff ffe9 	bl	23f73e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7414:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f7416:	68a2      	ldr	r2, [r4, #8]
 23f7418:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f741a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f741c:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f741e:	68e2      	ldr	r2, [r4, #12]
 23f7420:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7422:	60e3      	str	r3, [r4, #12]
      }
 23f7424:	bd38      	pop	{r3, r4, r5, pc}
	...

023f7428 <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 23f7428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23f742a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23f742e:	6a19      	ldr	r1, [r3, #32]
            return this->_original_signal;
 23f7430:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23f7432:	428a      	cmp	r2, r1
 23f7434:	d012      	beq.n	23f745c <_ZN14SignalWithAxes10get_signalEv+0x34>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23f7436:	6923      	ldr	r3, [r4, #16]
        };
 23f7438:	f100 0410 	add.w	r4, r0, #16
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23f743c:	fbb3 f3f1 	udiv	r3, r3, r1
 23f7440:	4353      	muls	r3, r2
 23f7442:	6203      	str	r3, [r0, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 23f7444:	4b07      	ldr	r3, [pc, #28]	; (23f7464 <_ZN14SignalWithAxes10get_signalEv+0x3c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f7446:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f7448:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f744a:	4b07      	ldr	r3, [pc, #28]	; (23f7468 <_ZN14SignalWithAxes10get_signalEv+0x40>)
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f744c:	4668      	mov	r0, sp
 23f744e:	4621      	mov	r1, r4
	    _M_manager = &_My_handler::_M_manager;
 23f7450:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f7452:	f7ff ffda 	bl	23f740a <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f7456:	4668      	mov	r0, sp
 23f7458:	f7ff fbdc 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
    }
 23f745c:	4620      	mov	r0, r4
 23f745e:	b004      	add	sp, #16
 23f7460:	bd10      	pop	{r4, pc}
 23f7462:	bf00      	nop
 23f7464:	023f733d 	.word	0x023f733d
 23f7468:	023f6b75 	.word	0x023f6b75

023f746c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
 23f746c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f746e:	2300      	movs	r3, #0
 23f7470:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
 23f7472:	b121      	cbz	r1, 23f747e <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
 23f7474:	4b07      	ldr	r3, [pc, #28]	; (23f7494 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f7476:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23f7478:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23f747a:	4b07      	ldr	r3, [pc, #28]	; (23f7498 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
 23f747c:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23f747e:	4601      	mov	r1, r0
 23f7480:	4668      	mov	r0, sp
 23f7482:	f7ff ffc2 	bl	23f740a <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23f7486:	4668      	mov	r0, sp
 23f7488:	f7ff fbc4 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
	}
 23f748c:	b005      	add	sp, #20
 23f748e:	f85d fb04 	ldr.w	pc, [sp], #4
 23f7492:	bf00      	nop
 23f7494:	023f6b9d 	.word	0x023f6b9d
 23f7498:	023f6b89 	.word	0x023f6b89

023f749c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f749c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f749e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f74a0:	4604      	mov	r4, r0
 23f74a2:	460d      	mov	r5, r1
 23f74a4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f74a6:	d916      	bls.n	23f74d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f74a8:	4290      	cmp	r0, r2
 23f74aa:	d215      	bcs.n	23f74d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f74ac:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f74b0:	1a75      	subs	r5, r6, r1
 23f74b2:	f1a1 0714 	sub.w	r7, r1, #20
 23f74b6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f74b8:	42b7      	cmp	r7, r6
 23f74ba:	d01c      	beq.n	23f74f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f74bc:	b12c      	cbz	r4, 23f74ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f74be:	4631      	mov	r1, r6
 23f74c0:	4620      	mov	r0, r4
 23f74c2:	f004 fc36 	bl	23fbd32 <_ZN6StringC1EOS_>
 23f74c6:	7c33      	ldrb	r3, [r6, #16]
 23f74c8:	7423      	strb	r3, [r4, #16]
 23f74ca:	4630      	mov	r0, r6
 23f74cc:	f004 fbb4 	bl	23fbc38 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f74d0:	3e14      	subs	r6, #20
 23f74d2:	3c14      	subs	r4, #20
 23f74d4:	e7f0      	b.n	23f74b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f74d6:	d00e      	beq.n	23f74f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f74d8:	42b5      	cmp	r5, r6
 23f74da:	d00c      	beq.n	23f74f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f74dc:	b12c      	cbz	r4, 23f74ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f74de:	4629      	mov	r1, r5
 23f74e0:	4620      	mov	r0, r4
 23f74e2:	f004 fc26 	bl	23fbd32 <_ZN6StringC1EOS_>
 23f74e6:	7c2b      	ldrb	r3, [r5, #16]
 23f74e8:	7423      	strb	r3, [r4, #16]
 23f74ea:	4628      	mov	r0, r5
 23f74ec:	f004 fba4 	bl	23fbc38 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f74f0:	3514      	adds	r5, #20
 23f74f2:	3414      	adds	r4, #20
 23f74f4:	e7f0      	b.n	23f74d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f74f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f74f8:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f74fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f74fe:	e9c0 3300 	strd	r3, r3, [r0]
 23f7502:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7504:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f7506:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f7508:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f750a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f750c:	dd24      	ble.n	23f7558 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f750e:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f7512:	fb08 f007 	mul.w	r0, r8, r7
 23f7516:	f002 fe11 	bl	23fa13c <malloc>
            if (!d) {
 23f751a:	4605      	mov	r5, r0
 23f751c:	b1e0      	cbz	r0, 23f7558 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f751e:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f7522:	fb08 1202 	mla	r2, r8, r2, r1
 23f7526:	f7ff ffb9 	bl	23f749c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f752a:	6820      	ldr	r0, [r4, #0]
 23f752c:	f002 fe14 	bl	23fa158 <free>
        data_ = d;
 23f7530:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f7532:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f7534:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f7538:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f753c:	45b8      	cmp	r8, r7
 23f753e:	d009      	beq.n	23f7554 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f7540:	4639      	mov	r1, r7
 23f7542:	4628      	mov	r0, r5
 23f7544:	f004 fc0f 	bl	23fbd66 <_ZN6StringC1ERKS_>
 23f7548:	7c3b      	ldrb	r3, [r7, #16]
 23f754a:	3514      	adds	r5, #20
 23f754c:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f7550:	3714      	adds	r7, #20
 23f7552:	e7f3      	b.n	23f753c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f7554:	6873      	ldr	r3, [r6, #4]
 23f7556:	6063      	str	r3, [r4, #4]
}
 23f7558:	4620      	mov	r0, r4
 23f755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f755e <_ZNSt8functionIFvPvEEC1EOS2_>:
      function(function&& __x) noexcept : _Function_base()
 23f755e:	b538      	push	{r3, r4, r5, lr}
 23f7560:	460d      	mov	r5, r1
    _Function_base() : _M_manager(nullptr) { }
 23f7562:	2300      	movs	r3, #0
      function(function&& __x) noexcept : _Function_base()
 23f7564:	4604      	mov	r4, r0
	std::swap(_M_functor, __x._M_functor);
 23f7566:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23f7568:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23f756a:	4628      	mov	r0, r5
 23f756c:	f7ff ff3b 	bl	23f73e6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7570:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f7572:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7574:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f7576:	60aa      	str	r2, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f7578:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f757a:	68e2      	ldr	r2, [r4, #12]
      }
 23f757c:	4620      	mov	r0, r4
 23f757e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f7580:	60e3      	str	r3, [r4, #12]
 23f7582:	bd38      	pop	{r3, r4, r5, pc}

023f7584 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 23f7584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7588:	b0d1      	sub	sp, #324	; 0x144
 23f758a:	f8dd 9170 	ldr.w	r9, [sp, #368]	; 0x170
 23f758e:	4690      	mov	r8, r2
 23f7590:	469a      	mov	sl, r3
 23f7592:	4604      	mov	r4, r0
 23f7594:	460d      	mov	r5, r1
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f7596:	f8d9 b018 	ldr.w	fp, [r9, #24]
    TfLiteTensor input;
    TfLiteTensor output;
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    uint64_t ctx_start_us = ei_read_timer_us();
 23f759a:	f000 fdcf 	bl	23f813c <_Z16ei_read_timer_usv>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f759e:	4b2d      	ldr	r3, [pc, #180]	; (23f7654 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd0>)
 23f75a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23f75a4:	9340      	str	r3, [sp, #256]	; 0x100
	    _M_invoker = &_My_handler::_M_invoke;
 23f75a6:	4b2c      	ldr	r3, [pc, #176]	; (23f7658 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd4>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23f75a8:	a940      	add	r1, sp, #256	; 0x100
 23f75aa:	9343      	str	r3, [sp, #268]	; 0x10c
	    _M_manager = &_My_handler::_M_manager;
 23f75ac:	4b2b      	ldr	r3, [pc, #172]	; (23f765c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd8>)
 23f75ae:	a80b      	add	r0, sp, #44	; 0x2c
 23f75b0:	9342      	str	r3, [sp, #264]	; 0x108
 23f75b2:	f7ff ffd4 	bl	23f755e <_ZNSt8functionIFvPvEEC1EOS2_>
 23f75b6:	2300      	movs	r3, #0
    class function<_Res(_ArgTypes...)>
 23f75b8:	a840      	add	r0, sp, #256	; 0x100
 23f75ba:	930f      	str	r3, [sp, #60]	; 0x3c
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f75bc:	ae20      	add	r6, sp, #128	; 0x80
 23f75be:	f7ff fb29 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
 23f75c2:	af30      	add	r7, sp, #192	; 0xc0
 23f75c4:	ab40      	add	r3, sp, #256	; 0x100
 23f75c6:	9300      	str	r3, [sp, #0]
 23f75c8:	4648      	mov	r0, r9
 23f75ca:	4633      	mov	r3, r6
 23f75cc:	9701      	str	r7, [sp, #4]
 23f75ce:	aa10      	add	r2, sp, #64	; 0x40
 23f75d0:	a908      	add	r1, sp, #32
 23f75d2:	f7ff fa97 	bl	23f6b04 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0>
        &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23f75d6:	4603      	mov	r3, r0
 23f75d8:	bb30      	cbnz	r0, 23f7628 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xa4>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 23f75da:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 23f75de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 23f75e2:	4628      	mov	r0, r5
    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
 23f75e4:	4413      	add	r3, r2
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
 23f75e6:	9300      	str	r3, [sp, #0]
 23f75e8:	4652      	mov	r2, sl
 23f75ea:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 23f75ec:	a910      	add	r1, sp, #64	; 0x40
 23f75ee:	f7ff fb59 	bl	23f6ca4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
    if (input_res != EI_IMPULSE_OK) {
 23f75f2:	4603      	mov	r3, r0
 23f75f4:	b9c0      	cbnz	r0, 23f7628 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xa4>
        return input_res;
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f75f6:	f89d 3174 	ldrb.w	r3, [sp, #372]	; 0x174
 23f75fa:	4649      	mov	r1, r9
 23f75fc:	9304      	str	r3, [sp, #16]
 23f75fe:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 23f7600:	4620      	mov	r0, r4
 23f7602:	e9cd 7302 	strd	r7, r3, [sp, #8]
 23f7606:	ab40      	add	r3, sp, #256	; 0x100
 23f7608:	e9cd 6300 	strd	r6, r3, [sp]
 23f760c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 23f7610:	f7ff fd06 	bl	23f7020 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
        &output,
        &output_labels,
        &output_scores,
        tensor_arena, result, debug);

    if (result->copy_output) {
 23f7614:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f7616:	4607      	mov	r7, r0
    if (result->copy_output) {
 23f7618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 23f761c:	b96b      	cbnz	r3, 23f763a <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xb6>
        if (output_res != EI_IMPULSE_OK) {
            return output_res;
        }
    }

    graph_config->model_reset(ei_aligned_free);
 23f761e:	f8db 300c 	ldr.w	r3, [fp, #12]
 23f7622:	480c      	ldr	r0, [pc, #48]	; (23f7654 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xd0>)
 23f7624:	4798      	blx	r3

    if (run_res != EI_IMPULSE_OK) {
 23f7626:	463b      	mov	r3, r7
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23f7628:	a80b      	add	r0, sp, #44	; 0x2c
 23f762a:	9307      	str	r3, [sp, #28]
 23f762c:	f7ff fda5 	bl	23f717a <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>
        return run_res;
    }

    return EI_IMPULSE_OK;
}
 23f7630:	9b07      	ldr	r3, [sp, #28]
 23f7632:	4618      	mov	r0, r3
 23f7634:	b051      	add	sp, #324	; 0x144
 23f7636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
 23f763a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 23f763e:	4630      	mov	r0, r6
 23f7640:	4490      	add	r8, r2
 23f7642:	f855 1038 	ldr.w	r1, [r5, r8, lsl #3]
 23f7646:	f7ff fbbb 	bl	23f6dc0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
        if (output_res != EI_IMPULSE_OK) {
 23f764a:	4603      	mov	r3, r0
 23f764c:	2800      	cmp	r0, #0
 23f764e:	d0e6      	beq.n	23f761e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x9a>
 23f7650:	e7ea      	b.n	23f7628 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xa4>
 23f7652:	bf00      	nop
 23f7654:	023f6a49 	.word	0x023f6a49
 23f7658:	023f6bc5 	.word	0x023f6bc5
 23f765c:	023f6bb1 	.word	0x023f6bb1

023f7660 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
 23f7660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7664:	ed2d 8b06 	vpush	{d8-d10}
 23f7668:	ee0a 3a10 	vmov	s20, r3
 23f766c:	b0dd      	sub	sp, #372	; 0x174
 23f766e:	f89d 31b0 	ldrb.w	r3, [sp, #432]	; 0x1b0
 23f7672:	4617      	mov	r7, r2
 23f7674:	930a      	str	r3, [sp, #40]	; 0x28

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f7676:	ee1a 3a10 	vmov	r3, s20
 23f767a:	699b      	ldr	r3, [r3, #24]

    memset(result, 0, sizeof(ei_impulse_result_t));
 23f767c:	2248      	movs	r2, #72	; 0x48
    bool debug = false) {
 23f767e:	4680      	mov	r8, r0
 23f7680:	4689      	mov	r9, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f7682:	4638      	mov	r0, r7
 23f7684:	2100      	movs	r1, #0
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
 23f7686:	930b      	str	r3, [sp, #44]	; 0x2c
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f7688:	f004 ffb7 	bl	23fc5fa <memset>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23f768c:	4bc8      	ldr	r3, [pc, #800]	; (23f79b0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x350>)
 23f768e:	ac4c      	add	r4, sp, #304	; 0x130
 23f7690:	934c      	str	r3, [sp, #304]	; 0x130
	    _M_invoker = &_My_handler::_M_invoke;
 23f7692:	4bc8      	ldr	r3, [pc, #800]	; (23f79b4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x354>)
 23f7694:	4621      	mov	r1, r4
 23f7696:	934f      	str	r3, [sp, #316]	; 0x13c
	    _M_manager = &_My_handler::_M_manager;
 23f7698:	4bc7      	ldr	r3, [pc, #796]	; (23f79b8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x358>)
 23f769a:	a817      	add	r0, sp, #92	; 0x5c
 23f769c:	934e      	str	r3, [sp, #312]	; 0x138
 23f769e:	f7ff ff5e 	bl	23f755e <_ZNSt8functionIFvPvEEC1EOS2_>
 23f76a2:	2300      	movs	r3, #0
    class function<_Res(_ArgTypes...)>
 23f76a4:	4620      	mov	r0, r4
 23f76a6:	931b      	str	r3, [sp, #108]	; 0x6c
 23f76a8:	f7ff fab4 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23f76ac:	ab3c      	add	r3, sp, #240	; 0xf0
 23f76ae:	e9cd 4300 	strd	r4, r3, [sp]
 23f76b2:	ee1a 0a10 	vmov	r0, s20
 23f76b6:	ab2c      	add	r3, sp, #176	; 0xb0
 23f76b8:	aa1c      	add	r2, sp, #112	; 0x70
 23f76ba:	a910      	add	r1, sp, #64	; 0x40
 23f76bc:	f7ff fa22 	bl	23f6b04 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvSt8functionIFvPvEEE.constprop.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23f76c0:	4605      	mov	r5, r0
 23f76c2:	2800      	cmp	r0, #0
 23f76c4:	d15d      	bne.n	23f7782 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
 23f76c6:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 23f76ca:	2b09      	cmp	r3, #9
 23f76cc:	d002      	beq.n	23f76d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x74>
 23f76ce:	2b03      	cmp	r3, #3
 23f76d0:	f040 8213 	bne.w	23f7afa <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x49a>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 23f76d4:	f000 fd32 	bl	23f813c <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23f76d8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 23f76dc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    uint64_t dsp_start_us = ei_read_timer_us();
 23f76de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
 23f76e2:	9308      	str	r3, [sp, #32]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23f76e4:	2c00      	cmp	r4, #0
 23f76e6:	d155      	bne.n	23f7794 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x134>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23f76e8:	4618      	mov	r0, r3
 23f76ea:	2101      	movs	r1, #1
 23f76ec:	f000 fe02 	bl	23f82f4 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23f76f0:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23f76f2:	4604      	mov	r4, r0
            buffer_managed_by_me = false;
 23f76f4:	9309      	str	r3, [sp, #36]	; 0x24

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f76f6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23f76fa:	f8d8 2058 	ldr.w	r2, [r8, #88]	; 0x58
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f76fe:	68db      	ldr	r3, [r3, #12]
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23f7700:	6916      	ldr	r6, [r2, #16]

#if (EI_CLASSIFIER_QUANTIZATION_ENABLED == 1) && (EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_DRPAI)

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f7702:	689a      	ldr	r2, [r3, #8]

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f7704:	6958      	ldr	r0, [r3, #20]
 23f7706:	49ad      	ldr	r1, [pc, #692]	; (23f79bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x35c>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23f7708:	ee0a 2a90 	vmov	s21, r2
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f770c:	f7fe ffaa 	bl	23f6664 <strcmp>
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
 23f7710:	ed9d 8a20 	vldr	s16, [sp, #128]	; 0x80
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f7714:	f04f 0a00 	mov.w	sl, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f7718:	2800      	cmp	r0, #0
 23f771a:	bf0c      	ite	eq
 23f771c:	2301      	moveq	r3, #1
 23f771e:	2303      	movne	r3, #3
 23f7720:	eddd 8a1f 	vldr	s17, [sp, #124]	; 0x7c
 23f7724:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    size_t output_ix = 0;
 23f7728:	4655      	mov	r5, sl
 23f772a:	ed9f 9aa5 	vldr	s18, [pc, #660]	; 23f79c0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x360>
                        b -= 128.0f;
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f772e:	eddf 9aa5 	vldr	s19, [pc, #660]	; 23f79c4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x364>
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23f7732:	930c      	str	r3, [sp, #48]	; 0x30
    size_t bytes_left = signal->total_length;
 23f7734:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23f7738:	9307      	str	r3, [sp, #28]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f773a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23f773e:	4553      	cmp	r3, sl
 23f7740:	f240 818a 	bls.w	23f7a58 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f8>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23f7744:	9b07      	ldr	r3, [sp, #28]
        matrix_t input_matrix(elements_to_read, config.axes);
 23f7746:	ee1a 2a90 	vmov	r2, s21
 23f774a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23f774e:	bf28      	it	cs
 23f7750:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 23f7754:	469b      	mov	fp, r3
 23f7756:	a813      	add	r0, sp, #76	; 0x4c
 23f7758:	2300      	movs	r3, #0
 23f775a:	4659      	mov	r1, fp
 23f775c:	f7ff fa63 	bl	23f6c26 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23f7760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f7762:	b9cb      	cbnz	r3, 23f7798 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x138>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23f7764:	a813      	add	r0, sp, #76	; 0x4c
 23f7766:	f7ff fa73 	bl	23f6c50 <_ZN2ei9ei_matrixD1Ev>

    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23f776a:	4997      	ldr	r1, [pc, #604]	; (23f79c8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>)
 23f776c:	4897      	ldr	r0, [pc, #604]	; (23f79cc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x36c>)
 23f776e:	f000 fceb 	bl	23f8148 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 23f7772:	f06f 0504 	mvn.w	r5, #4
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
 23f7776:	b124      	cbz	r4, 23f7782 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
 23f7778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f777a:	b113      	cbz	r3, 23f7782 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
            ei_free(buffer);
 23f777c:	4620      	mov	r0, r4
 23f777e:	f000 fdbb 	bl	23f82f8 <_Z7ei_freePv>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23f7782:	a817      	add	r0, sp, #92	; 0x5c
 23f7784:	f7ff fcf9 	bl	23f717a <_ZNSt10unique_ptrIvSt8functionIFvPvEEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
 23f7788:	4628      	mov	r0, r5
 23f778a:	b05d      	add	sp, #372	; 0x174
 23f778c:	ecbd 8b06 	vpop	{d8-d10}
 23f7790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer_managed_by_me = false;
 23f7794:	2300      	movs	r3, #0
 23f7796:	e7ad      	b.n	23f76f4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x94>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23f7798:	4651      	mov	r1, sl
 23f779a:	465a      	mov	r2, fp
 23f779c:	4648      	mov	r0, r9
 23f779e:	f7ff fd00 	bl	23f71a2 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f77a2:	2100      	movs	r1, #0
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f77a4:	eddf 3a8a 	vldr	s7, [pc, #552]	; 23f79d0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
 23f77a8:	ed9f 3a8a 	vldr	s6, [pc, #552]	; 23f79d4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
                        r -= 128.0f;
 23f77ac:	eddf 5a8a 	vldr	s11, [pc, #552]	; 23f79d8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>
                        r /= 255.0f;
 23f77b0:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 23f79dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>
                        r = (r - torch_mean[0]) / torch_std[0];
 23f77b4:	ed9f 5a8a 	vldr	s10, [pc, #552]	; 23f79e0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x380>
 23f77b8:	eddf 4a8a 	vldr	s9, [pc, #552]	; 23f79e4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x384>
                        g = (g - torch_mean[1]) / torch_std[1];
 23f77bc:	ed9f 4a8a 	vldr	s8, [pc, #552]	; 23f79e8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x388>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f77c0:	458b      	cmp	fp, r1
 23f77c2:	f000 813f 	beq.w	23f7a44 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e4>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f77c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f77c8:	f105 0e01 	add.w	lr, r5, #1
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23f77cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23f77d0:	edd3 7a00 	vldr	s15, [r3]
 23f77d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23f77d8:	ee17 3a90 	vmov	r3, s15
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 23f77dc:	0a1a      	lsrs	r2, r3, #8
 23f77de:	920d      	str	r2, [sp, #52]	; 0x34
            if (channel_count == 3) {
 23f77e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f77e2:	1960      	adds	r0, r4, r5
            if (channel_count == 3) {
 23f77e4:	2a03      	cmp	r2, #3
 23f77e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 23f77ea:	ee07 2a10 	vmov	s14, r2
 23f77ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 23f77f2:	ee07 2a90 	vmov	s15, r2
 23f77f6:	b2da      	uxtb	r2, r3
 23f77f8:	ee06 2a90 	vmov	s13, r2
 23f77fc:	f040 808b 	bne.w	23f7916 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2b6>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f7800:	eef4 8a49 	vcmp.f32	s17, s18
 23f7804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f7808:	eb04 0c0e 	add.w	ip, r4, lr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f780c:	f105 0e03 	add.w	lr, r5, #3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f7810:	f105 0502 	add.w	r5, r5, #2
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f7814:	4425      	add	r5, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f7816:	d126      	bne.n	23f7866 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x206>
 23f7818:	eddf 2a74 	vldr	s5, [pc, #464]	; 23f79ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x38c>
 23f781c:	eeb4 8a62 	vcmp.f32	s16, s5
 23f7820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7824:	d11f      	bne.n	23f7866 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x206>
 23f7826:	b9f6      	cbnz	r6, 23f7866 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x206>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f7828:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f782c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f7830:	ee37 7a65 	vsub.f32	s14, s14, s11
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f7834:	ee77 7ae5 	vsub.f32	s15, s15, s11
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f7838:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f783c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f7840:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f7844:	ee76 6ae5 	vsub.f32	s13, s13, s11
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f7848:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f784c:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23f7850:	eefd 7ae6 	vcvt.s32.f32	s15, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23f7854:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23f7856:	f88c 2000 	strb.w	r2, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f785a:	ee17 3a90 	vmov	r3, s15
 23f785e:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23f7860:	4675      	mov	r5, lr
 23f7862:	3101      	adds	r1, #1
 23f7864:	e7ac      	b.n	23f77c0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x160>
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f7866:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
                    float b = static_cast<float>(pixel & 0xff);
 23f786a:	b2db      	uxtb	r3, r3
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f786c:	ee07 2a90 	vmov	s15, r2
 23f7870:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float b = static_cast<float>(pixel & 0xff);
 23f7874:	ee07 3a90 	vmov	s15, r3
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23f7878:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float b = static_cast<float>(pixel & 0xff);
 23f787c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f7880:	bb2e      	cbnz	r6, 23f78ce <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x26e>
                        r /= 255.0f;
 23f7882:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23f7886:	eec6 6a86 	vdiv.f32	s13, s13, s12
                        b /= 255.0f;
 23f788a:	eec7 7a86 	vdiv.f32	s15, s15, s12
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23f788e:	eec7 2a28 	vdiv.f32	s5, s14, s17
 23f7892:	feb8 7a62 	vrinta.f32	s14, s5
 23f7896:	ee38 7a07 	vadd.f32	s14, s16, s14
 23f789a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23f789e:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f78a2:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 23f78a6:	feb8 7a47 	vrinta.f32	s14, s14
 23f78aa:	ee38 7a07 	vadd.f32	s14, s16, s14
 23f78ae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23f78b2:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f78b4:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f78b8:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23f78bc:	fef8 7a47 	vrinta.f32	s15, s14
 23f78c0:	ee78 7a27 	vadd.f32	s15, s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23f78c4:	f88c 3000 	strb.w	r3, [ip]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23f78c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f78cc:	e7c5      	b.n	23f785a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1fa>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23f78ce:	2e02      	cmp	r6, #2
 23f78d0:	d118      	bne.n	23f7904 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2a4>
                        r /= 255.0f;
 23f78d2:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23f78d6:	ee72 2ac5 	vsub.f32	s5, s5, s10
 23f78da:	ee82 7aa4 	vdiv.f32	s14, s5, s9
                        g /= 255.0f;
 23f78de:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23f78e2:	ed9f 2a43 	vldr	s4, [pc, #268]	; 23f79f0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x390>
 23f78e6:	ee72 2ac4 	vsub.f32	s5, s5, s8
 23f78ea:	eec2 6a82 	vdiv.f32	s13, s5, s4
                        b /= 255.0f;
 23f78ee:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23f78f2:	eddf 7a40 	vldr	s15, [pc, #256]	; 23f79f4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x394>
 23f78f6:	ed9f 2a40 	vldr	s4, [pc, #256]	; 23f79f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x398>
 23f78fa:	ee72 2ae7 	vsub.f32	s5, s5, s15
 23f78fe:	eec2 7a82 	vdiv.f32	s15, s5, s4
 23f7902:	e7c4      	b.n	23f788e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x22e>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
 23f7904:	2e04      	cmp	r6, #4
                        r -= 128.0f;
 23f7906:	bf02      	ittt	eq
 23f7908:	ee37 7a65 	vsubeq.f32	s14, s14, s11
                        g -= 128.0f;
 23f790c:	ee76 6ae5 	vsubeq.f32	s13, s13, s11
                        b -= 128.0f;
 23f7910:	ee77 7ae5 	vsubeq.f32	s15, s15, s11
 23f7914:	e7bb      	b.n	23f788e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x22e>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f7916:	eef4 8a49 	vcmp.f32	s17, s18
 23f791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f791e:	d128      	bne.n	23f7972 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
 23f7920:	eddf 2a32 	vldr	s5, [pc, #200]	; 23f79ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x38c>
 23f7924:	eeb4 8a62 	vcmp.f32	s16, s5
 23f7928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f792c:	d121      	bne.n	23f7972 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
 23f792e:	bb06      	cbnz	r6, 23f7972 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x312>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 23f7930:	f249 6245 	movw	r2, #38469	; 0x9645
 23f7934:	ee17 3a90 	vmov	r3, s15
 23f7938:	4353      	muls	r3, r2
 23f793a:	ee17 5a10 	vmov	r5, s14
 23f793e:	461a      	mov	r2, r3
 23f7940:	f644 438b 	movw	r3, #19595	; 0x4c8b
 23f7944:	fb03 2205 	mla	r2, r3, r5, r2
 23f7948:	f641 532f 	movw	r3, #7471	; 0x1d2f
 23f794c:	ee16 5a90 	vmov	r5, s13
 23f7950:	fb03 2305 	mla	r3, r3, r5, r2
                    gray >>= 16; // scale down to int8_t
 23f7954:	141b      	asrs	r3, r3, #16
 23f7956:	ee07 3a90 	vmov	s15, r3
                    gray += zero_point;
 23f795a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f795e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 23f7962:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f7966:	ee17 3a90 	vmov	r3, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 23f796a:	f303 0307 	ssat	r3, #8, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23f796e:	7003      	strb	r3, [r0, #0]
 23f7970:	e776      	b.n	23f7860 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x200>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23f7972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23f7976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    float b = static_cast<float>(pixel & 0xff);
 23f797a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23f797e:	2e00      	cmp	r6, #0
 23f7980:	d13c      	bne.n	23f79fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
                        r /= 255.0f;
 23f7982:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23f7986:	eec7 7a86 	vdiv.f32	s15, s15, s12
                        b /= 255.0f;
 23f798a:	eec6 6a86 	vdiv.f32	s13, s13, s12
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23f798e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23f7992:	eee7 7a23 	vfma.f32	s15, s14, s7
 23f7996:	eee6 7a83 	vfma.f32	s15, s13, s6
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23f799a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23f799e:	fef8 7a47 	vrinta.f32	s15, s14
 23f79a2:	ee78 7a27 	vadd.f32	s15, s16, s15
 23f79a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f79aa:	ee17 3a90 	vmov	r3, s15
 23f79ae:	e7de      	b.n	23f796e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30e>
 23f79b0:	023f6a49 	.word	0x023f6a49
 23f79b4:	023f6bc5 	.word	0x023f6bc5
 23f79b8:	023f6bb1 	.word	0x023f6bb1
 23f79bc:	023fea2b 	.word	0x023fea2b
 23f79c0:	3b808081 	.word	0x3b808081
 23f79c4:	3f1645a2 	.word	0x3f1645a2
 23f79c8:	fffffc16 	.word	0xfffffc16
 23f79cc:	023feaa7 	.word	0x023feaa7
 23f79d0:	3e991687 	.word	0x3e991687
 23f79d4:	3de978d5 	.word	0x3de978d5
 23f79d8:	43000000 	.word	0x43000000
 23f79dc:	437f0000 	.word	0x437f0000
 23f79e0:	3ef851ec 	.word	0x3ef851ec
 23f79e4:	3e6a7efa 	.word	0x3e6a7efa
 23f79e8:	3ee978d5 	.word	0x3ee978d5
 23f79ec:	c3000000 	.word	0xc3000000
 23f79f0:	3e656042 	.word	0x3e656042
 23f79f4:	3ecfdf3b 	.word	0x3ecfdf3b
 23f79f8:	3e666666 	.word	0x3e666666
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23f79fc:	2e02      	cmp	r6, #2
 23f79fe:	d118      	bne.n	23f7a32 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d2>
                        r /= 255.0f;
 23f7a00:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23f7a04:	ee72 2ac5 	vsub.f32	s5, s5, s10
 23f7a08:	ee82 7aa4 	vdiv.f32	s14, s5, s9
                        g /= 255.0f;
 23f7a0c:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23f7a10:	ed1f 2a09 	vldr	s4, [pc, #-36]	; 23f79f0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x390>
 23f7a14:	ee72 2ac4 	vsub.f32	s5, s5, s8
 23f7a18:	eec2 7a82 	vdiv.f32	s15, s5, s4
                        b /= 255.0f;
 23f7a1c:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23f7a20:	ed5f 6a0c 	vldr	s13, [pc, #-48]	; 23f79f4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x394>
 23f7a24:	ed1f 2a0c 	vldr	s4, [pc, #-48]	; 23f79f8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x398>
 23f7a28:	ee72 2ae6 	vsub.f32	s5, s5, s13
 23f7a2c:	eec2 6a82 	vdiv.f32	s13, s5, s4
 23f7a30:	e7ad      	b.n	23f798e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x32e>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
 23f7a32:	2e04      	cmp	r6, #4
                        r -= 128.0f;
 23f7a34:	bf02      	ittt	eq
 23f7a36:	ee37 7a65 	vsubeq.f32	s14, s14, s11
                        g -= 128.0f;
 23f7a3a:	ee77 7ae5 	vsubeq.f32	s15, s15, s11
                        b -= 128.0f;
 23f7a3e:	ee76 6ae5 	vsubeq.f32	s13, s13, s11
 23f7a42:	e7a4      	b.n	23f798e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x32e>
                }
            }
        }

        bytes_left -= elements_to_read;
 23f7a44:	9b07      	ldr	r3, [sp, #28]
        matrix_t input_matrix(elements_to_read, config.axes);
 23f7a46:	a813      	add	r0, sp, #76	; 0x4c
        bytes_left -= elements_to_read;
 23f7a48:	eba3 030b 	sub.w	r3, r3, fp
 23f7a4c:	9307      	str	r3, [sp, #28]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f7a4e:	f50a 6a80 	add.w	sl, sl, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23f7a52:	f7ff f8fd 	bl	23f6c50 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23f7a56:	e670      	b.n	23f773a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xda>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f7a58:	f000 fb6e 	bl	23f8138 <_Z29ei_run_impulse_check_canceledv>
 23f7a5c:	1c83      	adds	r3, r0, #2
 23f7a5e:	4605      	mov	r5, r0
 23f7a60:	f43f ae89 	beq.w	23f7776 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x116>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f7a64:	f000 fb6a 	bl	23f813c <_Z16ei_read_timer_usv>
 23f7a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f7a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f7a6e:	1ac0      	subs	r0, r0, r3
 23f7a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f7a72:	eb61 0103 	sbc.w	r1, r1, r3
 23f7a76:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f7a7a:	2300      	movs	r3, #0
 23f7a7c:	f7fe fbf4 	bl	23f6268 <__aeabi_ldivmod>
    if (debug) {
 23f7a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f7a82:	4601      	mov	r1, r0
 23f7a84:	61f8      	str	r0, [r7, #28]
    if (debug) {
 23f7a86:	b1f3      	cbz	r3, 23f7ac6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x466>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23f7a88:	481d      	ldr	r0, [pc, #116]	; (23f7b00 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4a0>)
 23f7a8a:	f000 fb5d 	bl	23f8148 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f7a8e:	9b08      	ldr	r3, [sp, #32]
 23f7a90:	4625      	mov	r5, r4
 23f7a92:	4423      	add	r3, r4
 23f7a94:	469a      	mov	sl, r3
            ei_printf(" ");
 23f7a96:	4e1b      	ldr	r6, [pc, #108]	; (23f7b04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4a4>)
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f7a98:	45aa      	cmp	sl, r5
 23f7a9a:	d011      	beq.n	23f7ac0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x460>
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
 23f7a9c:	f915 2b01 	ldrsb.w	r2, [r5], #1
 23f7aa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23f7aa2:	ed9d 0a1f 	vldr	s0, [sp, #124]	; 0x7c
 23f7aa6:	1ad3      	subs	r3, r2, r3
 23f7aa8:	ee07 3a90 	vmov	s15, r3
 23f7aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7ab0:	ee27 0a80 	vmul.f32	s0, s15, s0
 23f7ab4:	f000 fb68 	bl	23f8188 <_Z15ei_printf_floatf>
            ei_printf(" ");
 23f7ab8:	4630      	mov	r0, r6
 23f7aba:	f000 fb45 	bl	23f8148 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23f7abe:	e7eb      	b.n	23f7a98 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x438>
        ei_printf("\n");
 23f7ac0:	4811      	ldr	r0, [pc, #68]	; (23f7b08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4a8>)
 23f7ac2:	f000 fb41 	bl	23f8148 <_Z9ei_printfPKcz>
    ctx_start_us = ei_read_timer_us();
 23f7ac6:	f000 fb39 	bl	23f813c <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f7aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ctx_start_us = ei_read_timer_us();
 23f7acc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f7ad0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 23f7ad4:	ab3c      	add	r3, sp, #240	; 0xf0
 23f7ad6:	9302      	str	r3, [sp, #8]
 23f7ad8:	ab4c      	add	r3, sp, #304	; 0x130
 23f7ada:	9301      	str	r3, [sp, #4]
 23f7adc:	ab2c      	add	r3, sp, #176	; 0xb0
    ctx_start_us = ei_read_timer_us();
 23f7ade:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f7ae0:	9300      	str	r3, [sp, #0]
 23f7ae2:	4640      	mov	r0, r8
 23f7ae4:	460b      	mov	r3, r1
 23f7ae6:	ee1a 1a10 	vmov	r1, s20
 23f7aea:	f7ff fa99 	bl	23f7020 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
    graph_config->model_reset(ei_aligned_free);
 23f7aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23f7af0:	4605      	mov	r5, r0
    graph_config->model_reset(ei_aligned_free);
 23f7af2:	68db      	ldr	r3, [r3, #12]
 23f7af4:	4805      	ldr	r0, [pc, #20]	; (23f7b0c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4ac>)
 23f7af6:	4798      	blx	r3
    if (run_res != EI_IMPULSE_OK) {
 23f7af8:	e63d      	b.n	23f7776 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x116>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 23f7afa:	f06f 0508 	mvn.w	r5, #8
 23f7afe:	e640      	b.n	23f7782 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x122>
 23f7b00:	023feb2a 	.word	0x023feb2a
 23f7b04:	023ffa58 	.word	0x023ffa58
 23f7b08:	023fea29 	.word	0x023fea29
 23f7b0c:	023f6a49 	.word	0x023f6a49

023f7b10 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f7b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f7b12:	4615      	mov	r5, r2
 23f7b14:	4604      	mov	r4, r0
 23f7b16:	461f      	mov	r7, r3
 23f7b18:	460e      	mov	r6, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f7b1a:	2248      	movs	r2, #72	; 0x48
 23f7b1c:	2100      	movs	r1, #0
 23f7b1e:	4628      	mov	r0, r5
 23f7b20:	f004 fd6b 	bl	23fc5fa <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
 23f7b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 23f7b26:	9700      	str	r7, [sp, #0]
 23f7b28:	462a      	mov	r2, r5
 23f7b2a:	4631      	mov	r1, r6
 23f7b2c:	4620      	mov	r0, r4
 23f7b2e:	68db      	ldr	r3, [r3, #12]
 23f7b30:	f7ff fd96 	bl	23f7660 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
}
 23f7b34:	b003      	add	sp, #12
 23f7b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f7b38 <process_impulse>:
{
 23f7b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7b3c:	ed2d 8b02 	vpush	{d8}
 23f7b40:	b09b      	sub	sp, #108	; 0x6c
 23f7b42:	4690      	mov	r8, r2
 23f7b44:	4699      	mov	r9, r3
    if(!handle) {
 23f7b46:	4605      	mov	r5, r0
{
 23f7b48:	910c      	str	r1, [sp, #48]	; 0x30
    if(!handle) {
 23f7b4a:	2800      	cmp	r0, #0
 23f7b4c:	f000 816a 	beq.w	23f7e24 <process_impulse+0x2ec>
    ei_learning_block_t block = handle->impulse->learning_blocks[0];
 23f7b50:	68c0      	ldr	r0, [r0, #12]
 23f7b52:	6d84      	ldr	r4, [r0, #88]	; 0x58
 23f7b54:	e9d4 7602 	ldrd	r7, r6, [r4, #8]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23f7b58:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 23f7b5c:	3c02      	subs	r4, #2
 23f7b5e:	b2e4      	uxtb	r4, r4
 23f7b60:	2c09      	cmp	r4, #9
 23f7b62:	d826      	bhi.n	23f7bb2 <process_impulse+0x7a>
 23f7b64:	f240 2c29 	movw	ip, #553	; 0x229
 23f7b68:	fa2c f404 	lsr.w	r4, ip, r4
 23f7b6c:	07e4      	lsls	r4, r4, #31
 23f7b6e:	d520      	bpl.n	23f7bb2 <process_impulse+0x7a>
    if (impulse->has_anomaly){
 23f7b70:	f890 4071 	ldrb.w	r4, [r0, #113]	; 0x71
 23f7b74:	b9ec      	cbnz	r4, 23f7bb2 <process_impulse+0x7a>
    if (block_ptr.infer_fn != run_nn_inference) {
 23f7b76:	4cad      	ldr	r4, [pc, #692]	; (23f7e2c <process_impulse+0x2f4>)
 23f7b78:	42a7      	cmp	r7, r4
 23f7b7a:	d11a      	bne.n	23f7bb2 <process_impulse+0x7a>
    if (block_config->quantized != 1) {
 23f7b7c:	7d34      	ldrb	r4, [r6, #20]
 23f7b7e:	b1c4      	cbz	r4, 23f7bb2 <process_impulse+0x7a>
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 23f7b80:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 23f7b84:	2c01      	cmp	r4, #1
 23f7b86:	d114      	bne.n	23f7bb2 <process_impulse+0x7a>
 23f7b88:	6c04      	ldr	r4, [r0, #64]	; 0x40
 23f7b8a:	68a6      	ldr	r6, [r4, #8]
 23f7b8c:	4ca8      	ldr	r4, [pc, #672]	; (23f7e30 <process_impulse+0x2f8>)
 23f7b8e:	42a6      	cmp	r6, r4
 23f7b90:	d10f      	bne.n	23f7bb2 <process_impulse+0x7a>
        EI_IMPULSE_ERROR res = run_classifier_image_quantized(handle->impulse, signal, result, debug);
 23f7b92:	f7ff ffbd 	bl	23f7b10 <run_classifier_image_quantized>
        if (res != EI_IMPULSE_OK) {
 23f7b96:	4682      	mov	sl, r0
 23f7b98:	2800      	cmp	r0, #0
 23f7b9a:	f040 813d 	bne.w	23f7e18 <process_impulse+0x2e0>
        res = run_postprocessing(handle, result, debug);
 23f7b9e:	464a      	mov	r2, r9
 23f7ba0:	4641      	mov	r1, r8
 23f7ba2:	4628      	mov	r0, r5
}
 23f7ba4:	b01b      	add	sp, #108	; 0x6c
 23f7ba6:	ecbd 8b02 	vpop	{d8}
 23f7baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        res = run_postprocessing(handle, result, debug);
 23f7bae:	f7ff b859 	b.w	23f6c64 <run_postprocessing>
    memset(result, 0, sizeof(ei_impulse_result_t));
 23f7bb2:	2100      	movs	r1, #0
 23f7bb4:	2248      	movs	r2, #72	; 0x48
 23f7bb6:	4640      	mov	r0, r8
 23f7bb8:	f004 fd1f 	bl	23fc5fa <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 23f7bbc:	68eb      	ldr	r3, [r5, #12]
 23f7bbe:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 23f7bc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 23f7bc6:	18d3      	adds	r3, r2, r3
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 23f7bc8:	00da      	lsls	r2, r3, #3
 23f7bca:	4610      	mov	r0, r2
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
 23f7bcc:	9302      	str	r3, [sp, #8]
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 23f7bce:	9203      	str	r2, [sp, #12]
 23f7bd0:	f7fe fd79 	bl	23f66c6 <_Znaj>
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 23f7bd4:	2100      	movs	r1, #0
 23f7bd6:	9a03      	ldr	r2, [sp, #12]
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 23f7bd8:	4607      	mov	r7, r0
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23f7bda:	9010      	str	r0, [sp, #64]	; 0x40
    memset(features, 0, sizeof(ei_feature_t) * block_num);
 23f7bdc:	f004 fd0d 	bl	23fc5fa <memset>
    std::unique_ptr<std::unique_ptr<ei::matrix_t>[]> matrix_ptrs_ptr(new std::unique_ptr<ei::matrix_t>[block_num]);
 23f7be0:	9b02      	ldr	r3, [sp, #8]
 23f7be2:	1c98      	adds	r0, r3, #2
 23f7be4:	0080      	lsls	r0, r0, #2
 23f7be6:	f7fe fd6e 	bl	23f66c6 <_Znaj>
 23f7bea:	4604      	mov	r4, r0
 23f7bec:	b148      	cbz	r0, 23f7c02 <process_impulse+0xca>
 23f7bee:	2304      	movs	r3, #4
 23f7bf0:	6003      	str	r3, [r0, #0]
 23f7bf2:	9b02      	ldr	r3, [sp, #8]
 23f7bf4:	3408      	adds	r4, #8
 23f7bf6:	6043      	str	r3, [r0, #4]
      : _M_head_impl() { }
 23f7bf8:	2100      	movs	r1, #0
 23f7bfa:	4620      	mov	r0, r4
 23f7bfc:	009a      	lsls	r2, r3, #2
 23f7bfe:	f004 fcfc 	bl	23fc5fa <memset>
    uint64_t dsp_start_us = ei_read_timer_us();
 23f7c02:	f000 fa9b 	bl	23f813c <_Z16ei_read_timer_usv>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 23f7c06:	2600      	movs	r6, #0
    uint64_t dsp_start_us = ei_read_timer_us();
 23f7c08:	e9cd 010d 	strd	r0, r1, [sp, #52]	; 0x34
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 23f7c0c:	9403      	str	r4, [sp, #12]
    size_t out_features_index = 0;
 23f7c0e:	9604      	str	r6, [sp, #16]
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 23f7c10:	68eb      	ldr	r3, [r5, #12]
 23f7c12:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 23f7c16:	42b2      	cmp	r2, r6
 23f7c18:	f240 80b7 	bls.w	23f7d8a <process_impulse+0x252>
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 23f7c1c:	0172      	lsls	r2, r6, #5
 23f7c1e:	920a      	str	r2, [sp, #40]	; 0x28
 23f7c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 23f7c22:	0171      	lsls	r1, r6, #5
 23f7c24:	eb02 1346 	add.w	r3, r2, r6, lsl #5
 23f7c28:	5852      	ldr	r2, [r2, r1]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 23f7c2a:	2010      	movs	r0, #16
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
 23f7c2c:	9209      	str	r2, [sp, #36]	; 0x24
 23f7c2e:	e9d3 b201 	ldrd	fp, r2, [r3, #4]
 23f7c32:	920b      	str	r2, [sp, #44]	; 0x2c
 23f7c34:	68da      	ldr	r2, [r3, #12]
 23f7c36:	ee08 2a10 	vmov	s16, r2
 23f7c3a:	691a      	ldr	r2, [r3, #16]
 23f7c3c:	9206      	str	r2, [sp, #24]
 23f7c3e:	695a      	ldr	r2, [r3, #20]
 23f7c40:	69db      	ldr	r3, [r3, #28]
 23f7c42:	9208      	str	r2, [sp, #32]
 23f7c44:	9307      	str	r3, [sp, #28]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
 23f7c46:	f7fe fd3c 	bl	23f66c2 <_Znwj>
 23f7c4a:	4682      	mov	sl, r0
 23f7c4c:	b120      	cbz	r0, 23f7c58 <process_impulse+0x120>
 23f7c4e:	2300      	movs	r3, #0
 23f7c50:	465a      	mov	r2, fp
 23f7c52:	2101      	movs	r1, #1
 23f7c54:	f7fe ffe7 	bl	23f6c26 <_ZN2ei9ei_matrixC1EmmPf>
	_M_ptr() = nullptr;
 23f7c58:	2200      	movs	r2, #0
 23f7c5a:	00b3      	lsls	r3, r6, #2
 23f7c5c:	9305      	str	r3, [sp, #20]
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 23f7c5e:	9b03      	ldr	r3, [sp, #12]
	reset(__u.release());
 23f7c60:	4651      	mov	r1, sl
 23f7c62:	4618      	mov	r0, r3
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 23f7c64:	930f      	str	r3, [sp, #60]	; 0x3c
	_M_ptr() = nullptr;
 23f7c66:	9211      	str	r2, [sp, #68]	; 0x44
	reset(__u.release());
 23f7c68:	f7ff fbaf 	bl	23f73ca <_ZNSt15__uniq_ptr_implIN2ei9ei_matrixESt14default_deleteIS1_EE5resetEPS1_>
 23f7c6c:	a811      	add	r0, sp, #68	; 0x44
 23f7c6e:	f7ff fb9f 	bl	23f73b0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
        features[ix].matrix = matrix_ptrs[ix].get();
 23f7c72:	9a03      	ldr	r2, [sp, #12]
 23f7c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23f7c76:	3204      	adds	r2, #4
 23f7c78:	681b      	ldr	r3, [r3, #0]
 23f7c7a:	9203      	str	r2, [sp, #12]
        features[ix].blockId = block.blockId;
 23f7c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
        features[ix].matrix = matrix_ptrs[ix].get();
 23f7c7e:	f847 3036 	str.w	r3, [r7, r6, lsl #3]
        features[ix].blockId = block.blockId;
 23f7c82:	1d3b      	adds	r3, r7, #4
 23f7c84:	f843 2036 	str.w	r2, [r3, r6, lsl #3]
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
 23f7c88:	9b04      	ldr	r3, [sp, #16]
 23f7c8a:	445b      	add	r3, fp
 23f7c8c:	9304      	str	r3, [sp, #16]
 23f7c8e:	68eb      	ldr	r3, [r5, #12]
 23f7c90:	9a04      	ldr	r2, [sp, #16]
 23f7c92:	6999      	ldr	r1, [r3, #24]
 23f7c94:	428a      	cmp	r2, r1
 23f7c96:	f04f 0200 	mov.w	r2, #0
 23f7c9a:	d913      	bls.n	23f7cc4 <process_impulse+0x18c>
            ei_printf("ERR: Would write outside feature buffer\n");
 23f7c9c:	4865      	ldr	r0, [pc, #404]	; (23f7e34 <process_impulse+0x2fc>)
 23f7c9e:	f000 fa53 	bl	23f8148 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23f7ca2:	f06f 0a04 	mvn.w	sl, #4
	if (__ptr != nullptr)
 23f7ca6:	2c00      	cmp	r4, #0
 23f7ca8:	f000 80b3 	beq.w	23f7e12 <process_impulse+0x2da>
	  delete [] __ptr;
 23f7cac:	f854 5c04 	ldr.w	r5, [r4, #-4]
 23f7cb0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 23f7cb4:	42ac      	cmp	r4, r5
 23f7cb6:	f000 80a4 	beq.w	23f7e02 <process_impulse+0x2ca>
 23f7cba:	3d04      	subs	r5, #4
 23f7cbc:	4628      	mov	r0, r5
 23f7cbe:	f7ff fb77 	bl	23f73b0 <_ZNSt10unique_ptrIN2ei9ei_matrixESt14default_deleteIS1_EED1Ev>
 23f7cc2:	e7f7      	b.n	23f7cb4 <process_impulse+0x17c>
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 23f7cc4:	990c      	ldr	r1, [sp, #48]	; 0x30
        auto internal_signal = swa.get_signal();
 23f7cc6:	a811      	add	r0, sp, #68	; 0x44
 23f7cc8:	9111      	str	r1, [sp, #68]	; 0x44
 23f7cca:	9906      	ldr	r1, [sp, #24]
    _Function_base() : _M_manager(nullptr) { }
 23f7ccc:	9217      	str	r2, [sp, #92]	; 0x5c
 23f7cce:	9112      	str	r1, [sp, #72]	; 0x48
 23f7cd0:	9908      	ldr	r1, [sp, #32]
 23f7cd2:	e9cd 1313 	strd	r1, r3, [sp, #76]	; 0x4c
 23f7cd6:	f7ff fba7 	bl	23f7428 <_ZN14SignalWithAxes10get_signalEv>
        if (block.factory) { // ie, if we're using state
 23f7cda:	9b07      	ldr	r3, [sp, #28]
        auto internal_signal = swa.get_signal();
 23f7cdc:	4682      	mov	sl, r0
        if (block.factory) { // ie, if we're using state
 23f7cde:	2b00      	cmp	r3, #0
 23f7ce0:	d03b      	beq.n	23f7d5a <process_impulse+0x222>
            if (!has_printed) {
 23f7ce2:	4b55      	ldr	r3, [pc, #340]	; (23f7e38 <process_impulse+0x300>)
 23f7ce4:	781b      	ldrb	r3, [r3, #0]
 23f7ce6:	b94b      	cbnz	r3, 23f7cfc <process_impulse+0x1c4>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
 23f7ce8:	4954      	ldr	r1, [pc, #336]	; (23f7e3c <process_impulse+0x304>)
 23f7cea:	4855      	ldr	r0, [pc, #340]	; (23f7e40 <process_impulse+0x308>)
 23f7cec:	f000 fa2c 	bl	23f8148 <_Z9ei_printfPKcz>
 23f7cf0:	4854      	ldr	r0, [pc, #336]	; (23f7e44 <process_impulse+0x30c>)
 23f7cf2:	f000 fa29 	bl	23f8148 <_Z9ei_printfPKcz>
                has_printed = true;
 23f7cf6:	2301      	movs	r3, #1
 23f7cf8:	4a4f      	ldr	r2, [pc, #316]	; (23f7e38 <process_impulse+0x300>)
 23f7cfa:	7013      	strb	r3, [r2, #0]
            dsp_handles[ix] = nullptr;
        }
    }

    DspHandle* get_dsp_handle(size_t ix) {
        if (dsp_handles[ix] == nullptr) {
 23f7cfc:	f8d5 b004 	ldr.w	fp, [r5, #4]
 23f7d00:	9b05      	ldr	r3, [sp, #20]
 23f7d02:	f85b 3003 	ldr.w	r3, [fp, r3]
 23f7d06:	b95b      	cbnz	r3, 23f7d20 <process_impulse+0x1e8>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
 23f7d08:	6829      	ldr	r1, [r5, #0]
 23f7d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23f7d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 23f7d0e:	ed91 0a0e 	vldr	s0, [r1, #56]	; 0x38
 23f7d12:	4413      	add	r3, r2
 23f7d14:	69da      	ldr	r2, [r3, #28]
 23f7d16:	68d8      	ldr	r0, [r3, #12]
 23f7d18:	4790      	blx	r2
 23f7d1a:	9b05      	ldr	r3, [sp, #20]
 23f7d1c:	f84b 0003 	str.w	r0, [fp, r3]
        }
        return dsp_handles[ix];
 23f7d20:	686b      	ldr	r3, [r5, #4]
 23f7d22:	9a05      	ldr	r2, [sp, #20]
 23f7d24:	5898      	ldr	r0, [r3, r2]
            if(dsp_handle) {
 23f7d26:	b368      	cbz	r0, 23f7d84 <process_impulse+0x24c>
                    handle->impulse->frequency,
 23f7d28:	68eb      	ldr	r3, [r5, #12]
                    result);
 23f7d2a:	6802      	ldr	r2, [r0, #0]
                ret = dsp_handle->extract(
 23f7d2c:	f8cd 8000 	str.w	r8, [sp]
 23f7d30:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 23f7d34:	f8d2 b004 	ldr.w	fp, [r2, #4]
 23f7d38:	ee18 3a10 	vmov	r3, s16
 23f7d3c:	4651      	mov	r1, sl
 23f7d3e:	f857 2036 	ldr.w	r2, [r7, r6, lsl #3]
 23f7d42:	47d8      	blx	fp
        if (ret != EIDSP_OK) {
 23f7d44:	b198      	cbz	r0, 23f7d6e <process_impulse+0x236>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23f7d46:	4601      	mov	r1, r0
 23f7d48:	483f      	ldr	r0, [pc, #252]	; (23f7e48 <process_impulse+0x310>)
 23f7d4a:	f000 f9fd 	bl	23f8148 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23f7d4e:	f06f 0a04 	mvn.w	sl, #4
    class function<_Res(_ArgTypes...)>
 23f7d52:	a815      	add	r0, sp, #84	; 0x54
 23f7d54:	f7fe ff5e 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
class SignalWithAxes {
 23f7d58:	e7a5      	b.n	23f7ca6 <process_impulse+0x16e>
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
 23f7d5a:	68eb      	ldr	r3, [r5, #12]
 23f7d5c:	ee18 2a10 	vmov	r2, s16
 23f7d60:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 23f7d64:	f857 1036 	ldr.w	r1, [r7, r6, lsl #3]
 23f7d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f7d6a:	4798      	blx	r3
 23f7d6c:	e7ea      	b.n	23f7d44 <process_impulse+0x20c>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23f7d6e:	f000 f9e3 	bl	23f8138 <_Z29ei_run_impulse_check_canceledv>
 23f7d72:	f110 0f02 	cmn.w	r0, #2
 23f7d76:	4682      	mov	sl, r0
 23f7d78:	d0eb      	beq.n	23f7d52 <process_impulse+0x21a>
 23f7d7a:	a815      	add	r0, sp, #84	; 0x54
 23f7d7c:	f7fe ff4a 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
 23f7d80:	3601      	adds	r6, #1
 23f7d82:	e745      	b.n	23f7c10 <process_impulse+0xd8>
                return EI_IMPULSE_OUT_OF_MEMORY;
 23f7d84:	f06f 0a0a 	mvn.w	sl, #10
 23f7d88:	e7e3      	b.n	23f7d52 <process_impulse+0x21a>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f7d8a:	f000 f9d7 	bl	23f813c <_Z16ei_read_timer_usv>
 23f7d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f7d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23f7d94:	1ac0      	subs	r0, r0, r3
 23f7d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23f7d98:	eb61 0103 	sbc.w	r1, r1, r3
 23f7d9c:	e9c8 010a 	strd	r0, r1, [r8, #40]	; 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23f7da0:	2300      	movs	r3, #0
 23f7da2:	f7fe fa61 	bl	23f6268 <__aeabi_ldivmod>
 23f7da6:	4601      	mov	r1, r0
 23f7da8:	f8c8 001c 	str.w	r0, [r8, #28]
    if (debug) {
 23f7dac:	f1b9 0f00 	cmp.w	r9, #0
 23f7db0:	d055      	beq.n	23f7e5e <process_impulse+0x326>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23f7db2:	4826      	ldr	r0, [pc, #152]	; (23f7e4c <process_impulse+0x314>)
 23f7db4:	f000 f9c8 	bl	23f8148 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 23f7db8:	f04f 0b00 	mov.w	fp, #0
                ei_printf(" ");
 23f7dbc:	4e24      	ldr	r6, [pc, #144]	; (23f7e50 <process_impulse+0x318>)
            ei_printf("\n");
 23f7dbe:	f8df a094 	ldr.w	sl, [pc, #148]	; 23f7e54 <process_impulse+0x31c>
        for (size_t ix = 0; ix < block_num; ix++) {
 23f7dc2:	9b02      	ldr	r3, [sp, #8]
 23f7dc4:	459b      	cmp	fp, r3
 23f7dc6:	d047      	beq.n	23f7e58 <process_impulse+0x320>
            if (features[ix].matrix == nullptr) {
 23f7dc8:	f857 303b 	ldr.w	r3, [r7, fp, lsl #3]
 23f7dcc:	b1b3      	cbz	r3, 23f7dfc <process_impulse+0x2c4>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 23f7dce:	2300      	movs	r3, #0
 23f7dd0:	f857 203b 	ldr.w	r2, [r7, fp, lsl #3]
 23f7dd4:	6891      	ldr	r1, [r2, #8]
 23f7dd6:	4299      	cmp	r1, r3
 23f7dd8:	d90d      	bls.n	23f7df6 <process_impulse+0x2be>
                ei_printf_float(features[ix].matrix->buffer[jx]);
 23f7dda:	6812      	ldr	r2, [r2, #0]
 23f7ddc:	9303      	str	r3, [sp, #12]
 23f7dde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23f7de2:	ed92 0a00 	vldr	s0, [r2]
 23f7de6:	f000 f9cf 	bl	23f8188 <_Z15ei_printf_floatf>
                ei_printf(" ");
 23f7dea:	4630      	mov	r0, r6
 23f7dec:	f000 f9ac 	bl	23f8148 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
 23f7df0:	9b03      	ldr	r3, [sp, #12]
 23f7df2:	3301      	adds	r3, #1
 23f7df4:	e7ec      	b.n	23f7dd0 <process_impulse+0x298>
            ei_printf("\n");
 23f7df6:	4650      	mov	r0, sl
 23f7df8:	f000 f9a6 	bl	23f8148 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
 23f7dfc:	f10b 0b01 	add.w	fp, fp, #1
 23f7e00:	e7df      	b.n	23f7dc2 <process_impulse+0x28a>
 23f7e02:	f854 1c04 	ldr.w	r1, [r4, #-4]
 23f7e06:	f1a4 0008 	sub.w	r0, r4, #8
 23f7e0a:	3102      	adds	r1, #2
 23f7e0c:	0089      	lsls	r1, r1, #2
 23f7e0e:	f7fe fc60 	bl	23f66d2 <_ZdaPvj>
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
 23f7e12:	a810      	add	r0, sp, #64	; 0x40
 23f7e14:	f7ff fac4 	bl	23f73a0 <_ZNSt10unique_ptrIA_12ei_feature_tSt14default_deleteIS1_EED1Ev>
}
 23f7e18:	4650      	mov	r0, sl
 23f7e1a:	b01b      	add	sp, #108	; 0x6c
 23f7e1c:	ecbd 8b02 	vpop	{d8}
 23f7e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return EI_IMPULSE_INFERENCE_ERROR;
 23f7e24:	f06f 0a15 	mvn.w	sl, #21
 23f7e28:	e7f6      	b.n	23f7e18 <process_impulse+0x2e0>
 23f7e2a:	bf00      	nop
 23f7e2c:	023f7585 	.word	0x023f7585
 23f7e30:	023f720d 	.word	0x023f720d
 23f7e34:	023fea35 	.word	0x023fea35
 23f7e38:	1007a6c0 	.word	0x1007a6c0
 23f7e3c:	023feb3e 	.word	0x023feb3e
 23f7e40:	023feb43 	.word	0x023feb43
 23f7e44:	023feb48 	.word	0x023feb48
 23f7e48:	023feaa7 	.word	0x023feaa7
 23f7e4c:	023feb2a 	.word	0x023feb2a
 23f7e50:	023ffa58 	.word	0x023ffa58
 23f7e54:	023fea29 	.word	0x023fea29
        ei_printf("Running impulse...\n");
 23f7e58:	4809      	ldr	r0, [pc, #36]	; (23f7e80 <process_impulse+0x348>)
 23f7e5a:	f000 f975 	bl	23f8148 <_Z9ei_printfPKcz>
    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
 23f7e5e:	464b      	mov	r3, r9
 23f7e60:	4642      	mov	r2, r8
 23f7e62:	4639      	mov	r1, r7
 23f7e64:	4628      	mov	r0, r5
 23f7e66:	f7ff f919 	bl	23f709c <run_inference>
    if (res != EI_IMPULSE_OK) {
 23f7e6a:	4682      	mov	sl, r0
 23f7e6c:	2800      	cmp	r0, #0
 23f7e6e:	f47f af1a 	bne.w	23f7ca6 <process_impulse+0x16e>
        return run_postprocessing(handle, result, debug);
 23f7e72:	464a      	mov	r2, r9
 23f7e74:	4641      	mov	r1, r8
 23f7e76:	4628      	mov	r0, r5
 23f7e78:	f7fe fef4 	bl	23f6c64 <run_postprocessing>
 23f7e7c:	4682      	mov	sl, r0
 23f7e7e:	e712      	b.n	23f7ca6 <process_impulse+0x16e>
 23f7e80:	023feb16 	.word	0x023feb16

023f7e84 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23f7e84:	4613      	mov	r3, r2
    return process_impulse(&ei_default_impulse, signal, result, debug);
 23f7e86:	460a      	mov	r2, r1
 23f7e88:	4601      	mov	r1, r0
 23f7e8a:	4801      	ldr	r0, [pc, #4]	; (23f7e90 <run_classifier+0xc>)
 23f7e8c:	f7ff be54 	b.w	23f7b38 <process_impulse>
 23f7e90:	1007a748 	.word	0x1007a748

023f7e94 <loop>:
 */

int idx = 0;
float knownWeightValue = 0.0;
void loop()
{
 23f7e94:	b570      	push	{r4, r5, r6, lr}
 23f7e96:	ed2d 8b04 	vpush	{d8-d9}
    readScale(&scaleReading);
 23f7e9a:	4c68      	ldr	r4, [pc, #416]	; (23f803c <loop+0x1a8>)
{
 23f7e9c:	b0aa      	sub	sp, #168	; 0xa8
    readScale(&scaleReading);
 23f7e9e:	4620      	mov	r0, r4
 23f7ea0:	f001 fa94 	bl	23f93cc <_Z9readScaleP12ScaleReading>
    unsigned long timeSinceTare = getTimeSinceTare();
 23f7ea4:	f001 facc 	bl	23f9440 <_Z16getTimeSinceTarev>
 23f7ea8:	4605      	mov	r5, r0
    features[idx] = scaleReading.weight;
 23f7eaa:	4865      	ldr	r0, [pc, #404]	; (23f8040 <loop+0x1ac>)
 23f7eac:	4b65      	ldr	r3, [pc, #404]	; (23f8044 <loop+0x1b0>)
 23f7eae:	6802      	ldr	r2, [r0, #0]
 23f7eb0:	6821      	ldr	r1, [r4, #0]
 23f7eb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f7eb6:	6019      	str	r1, [r3, #0]
    idx = (idx + 1) % EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
 23f7eb8:	2111      	movs	r1, #17
 23f7eba:	3201      	adds	r2, #1
 23f7ebc:	fb92 f1f1 	sdiv	r1, r2, r1
 23f7ec0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 23f7ec4:	1a52      	subs	r2, r2, r1
 23f7ec6:	6002      	str	r2, [r0, #0]

    if (Serial.available() > 0)
 23f7ec8:	f004 f8c6 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f7ecc:	6803      	ldr	r3, [r0, #0]
 23f7ece:	691b      	ldr	r3, [r3, #16]
 23f7ed0:	4798      	blx	r3
 23f7ed2:	2800      	cmp	r0, #0
 23f7ed4:	dd4e      	ble.n	23f7f74 <loop+0xe0>
    {
        String incomingString = Serial.readStringUntil('\n');
 23f7ed6:	f004 f8bf 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f7eda:	220a      	movs	r2, #10
 23f7edc:	4601      	mov	r1, r0
 23f7ede:	a80b      	add	r0, sp, #44	; 0x2c
 23f7ee0:	f003 fe92 	bl	23fbc08 <_ZN6Stream15readStringUntilEc>
        incomingString.trim();
 23f7ee4:	a80b      	add	r0, sp, #44	; 0x2c
 23f7ee6:	f003 ffae 	bl	23fbe46 <_ZN6String4trimEv>
        String cmd = incomingString.substring(0, 1);
 23f7eea:	2301      	movs	r3, #1
 23f7eec:	2200      	movs	r2, #0
 23f7eee:	a90b      	add	r1, sp, #44	; 0x2c
 23f7ef0:	a80f      	add	r0, sp, #60	; 0x3c
 23f7ef2:	f003 ff7f 	bl	23fbdf4 <_ZNK6String9substringEjj>
        String val = incomingString.substring(1);
 23f7ef6:	a90b      	add	r1, sp, #44	; 0x2c
 23f7ef8:	a813      	add	r0, sp, #76	; 0x4c
 23f7efa:	2201      	movs	r2, #1
 23f7efc:	f003 ff9c 	bl	23fbe38 <_ZNK6String9substringEj>
    operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
    int compareTo(const String &s) const;
    unsigned char equals(const String &s) const;
    unsigned char equals(const char *cstr) const;
    unsigned char operator == (const String &rhs) const {return equals(rhs);}
    unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f7f00:	4951      	ldr	r1, [pc, #324]	; (23f8048 <loop+0x1b4>)
 23f7f02:	a80f      	add	r0, sp, #60	; 0x3c
 23f7f04:	f003 ff63 	bl	23fbdce <_ZNK6String6equalsEPKc>
        if (cmd == "t" || cmd == "T")
 23f7f08:	b150      	cbz	r0, 23f7f20 <loop+0x8c>
        {
            tare("");
 23f7f0a:	4950      	ldr	r1, [pc, #320]	; (23f804c <loop+0x1b8>)
 23f7f0c:	a818      	add	r0, sp, #96	; 0x60
 23f7f0e:	f003 fede 	bl	23fbcce <_ZN6StringC1EPK19__FlashStringHelper>
 23f7f12:	a818      	add	r0, sp, #96	; 0x60
 23f7f14:	f001 f9e4 	bl	23f92e0 <_Z4tare6String>
        }
        else if (cmd == "c" || cmd == "C")
        {
            calibrate(val);
 23f7f18:	a818      	add	r0, sp, #96	; 0x60
 23f7f1a:	f003 fe8d 	bl	23fbc38 <_ZN6StringD1Ev>
 23f7f1e:	e020      	b.n	23f7f62 <loop+0xce>
 23f7f20:	494b      	ldr	r1, [pc, #300]	; (23f8050 <loop+0x1bc>)
 23f7f22:	a80f      	add	r0, sp, #60	; 0x3c
 23f7f24:	f003 ff53 	bl	23fbdce <_ZNK6String6equalsEPKc>
        if (cmd == "t" || cmd == "T")
 23f7f28:	2800      	cmp	r0, #0
 23f7f2a:	d1ee      	bne.n	23f7f0a <loop+0x76>
 23f7f2c:	4949      	ldr	r1, [pc, #292]	; (23f8054 <loop+0x1c0>)
 23f7f2e:	a80f      	add	r0, sp, #60	; 0x3c
 23f7f30:	f003 ff4d 	bl	23fbdce <_ZNK6String6equalsEPKc>
        else if (cmd == "c" || cmd == "C")
 23f7f34:	2800      	cmp	r0, #0
 23f7f36:	d13b      	bne.n	23f7fb0 <loop+0x11c>
 23f7f38:	4947      	ldr	r1, [pc, #284]	; (23f8058 <loop+0x1c4>)
 23f7f3a:	a80f      	add	r0, sp, #60	; 0x3c
 23f7f3c:	f003 ff47 	bl	23fbdce <_ZNK6String6equalsEPKc>
 23f7f40:	2800      	cmp	r0, #0
 23f7f42:	d135      	bne.n	23f7fb0 <loop+0x11c>
 23f7f44:	4945      	ldr	r1, [pc, #276]	; (23f805c <loop+0x1c8>)
 23f7f46:	a80f      	add	r0, sp, #60	; 0x3c
 23f7f48:	f003 ff41 	bl	23fbdce <_ZNK6String6equalsEPKc>
        }
        else if (cmd == "s" || cmd == "S") // Start the data collection and provide an expected weight
 23f7f4c:	2800      	cmp	r0, #0
 23f7f4e:	d037      	beq.n	23f7fc0 <loop+0x12c>
        {
            knownWeightValue = atof(val);
 23f7f50:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23f7f52:	f004 fb0f 	bl	23fc574 <atof>
 23f7f56:	ec51 0b10 	vmov	r0, r1, d0
 23f7f5a:	f7fe f935 	bl	23f61c8 <__aeabi_d2f>
 23f7f5e:	4b40      	ldr	r3, [pc, #256]	; (23f8060 <loop+0x1cc>)
 23f7f60:	6018      	str	r0, [r3, #0]
        String val = incomingString.substring(1);
 23f7f62:	a813      	add	r0, sp, #76	; 0x4c
 23f7f64:	f003 fe68 	bl	23fbc38 <_ZN6StringD1Ev>
        String cmd = incomingString.substring(0, 1);
 23f7f68:	a80f      	add	r0, sp, #60	; 0x3c
 23f7f6a:	f003 fe65 	bl	23fbc38 <_ZN6StringD1Ev>
        String incomingString = Serial.readStringUntil('\n');
 23f7f6e:	a80b      	add	r0, sp, #44	; 0x2c
 23f7f70:	f003 fe62 	bl	23fbc38 <_ZN6StringD1Ev>
        ei_printf("The size of your 'features' array is not correct. Expected %d items, but had %d\n",
                  EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE, sizeof(features) / sizeof(float));
        return;
    }

    ei_impulse_result_t result = {0};
 23f7f74:	2248      	movs	r2, #72	; 0x48
 23f7f76:	2100      	movs	r1, #0
 23f7f78:	a818      	add	r0, sp, #96	; 0x60
 23f7f7a:	f004 fb3e 	bl	23fc5fa <memset>
    _Function_base() : _M_manager(nullptr) { }
 23f7f7e:	2600      	movs	r6, #0

    // the features are stored into flash, and we don't want to load everything into RAM
    signal_t features_signal;
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
 23f7f80:	2311      	movs	r3, #17
    features_signal.get_data = &raw_feature_get_data;
 23f7f82:	4938      	ldr	r1, [pc, #224]	; (23f8064 <loop+0x1d0>)
 23f7f84:	a813      	add	r0, sp, #76	; 0x4c
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
 23f7f86:	9317      	str	r3, [sp, #92]	; 0x5c
 23f7f88:	9615      	str	r6, [sp, #84]	; 0x54
    features_signal.get_data = &raw_feature_get_data;
 23f7f8a:	f7ff fa6f 	bl	23f746c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>

    // invoke the impulse
    EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false);
 23f7f8e:	a918      	add	r1, sp, #96	; 0x60
 23f7f90:	4632      	mov	r2, r6
 23f7f92:	a813      	add	r0, sp, #76	; 0x4c
 23f7f94:	f7ff ff76 	bl	23f7e84 <run_classifier>
    if (res != EI_IMPULSE_OK)
 23f7f98:	4601      	mov	r1, r0
 23f7f9a:	b1c0      	cbz	r0, 23f7fce <loop+0x13a>
    {
        ei_printf("ERR: Failed to run classifier (%d)\n", res);
 23f7f9c:	4832      	ldr	r0, [pc, #200]	; (23f8068 <loop+0x1d4>)
 23f7f9e:	f000 f8d3 	bl	23f8148 <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23f7fa2:	a813      	add	r0, sp, #76	; 0x4c
 23f7fa4:	f7fe fe36 	bl	23f6c14 <_ZNSt14_Function_baseD1Ev>
    float raw_error = knownWeightValue - scaleReading.weight;
    snprintf(buf, sizeof(buf), "%ld,%ld,%f,%f,%f,%f", timeSinceTare, scaleReading.raw, scaleReading.weight, raw_error, compensated_weight, compensated_error);
    Serial.println(buf);

    delay(SYS_DELAY_MS);
}
 23f7fa8:	b02a      	add	sp, #168	; 0xa8
 23f7faa:	ecbd 8b04 	vpop	{d8-d9}
 23f7fae:	bd70      	pop	{r4, r5, r6, pc}
            calibrate(val);
 23f7fb0:	a913      	add	r1, sp, #76	; 0x4c
 23f7fb2:	a818      	add	r0, sp, #96	; 0x60
 23f7fb4:	f003 fed7 	bl	23fbd66 <_ZN6StringC1ERKS_>
 23f7fb8:	a818      	add	r0, sp, #96	; 0x60
 23f7fba:	f001 f9c1 	bl	23f9340 <_Z9calibrate6String>
 23f7fbe:	e7ab      	b.n	23f7f18 <loop+0x84>
 23f7fc0:	492a      	ldr	r1, [pc, #168]	; (23f806c <loop+0x1d8>)
 23f7fc2:	a80f      	add	r0, sp, #60	; 0x3c
 23f7fc4:	f003 ff03 	bl	23fbdce <_ZNK6String6equalsEPKc>
        else if (cmd == "s" || cmd == "S") // Start the data collection and provide an expected weight
 23f7fc8:	2800      	cmp	r0, #0
 23f7fca:	d1c1      	bne.n	23f7f50 <loop+0xbc>
 23f7fcc:	e7c9      	b.n	23f7f62 <loop+0xce>
    float compensated_weight = scaleReading.weight + result.classification[0].value;
 23f7fce:	edd4 8a00 	vldr	s17, [r4]
 23f7fd2:	ed9d 8a1b 	vldr	s16, [sp, #108]	; 0x6c
    float compensated_error = knownWeightValue - compensated_weight;
 23f7fd6:	4b22      	ldr	r3, [pc, #136]	; (23f8060 <loop+0x1cc>)
    float compensated_weight = scaleReading.weight + result.classification[0].value;
 23f7fd8:	ee38 8a88 	vadd.f32	s16, s17, s16
    float compensated_error = knownWeightValue - compensated_weight;
 23f7fdc:	ed93 9a00 	vldr	s18, [r3]
    snprintf(buf, sizeof(buf), "%ld,%ld,%f,%f,%f,%f", timeSinceTare, scaleReading.raw, scaleReading.weight, raw_error, compensated_weight, compensated_error);
 23f7fe0:	ee79 7a48 	vsub.f32	s15, s18, s16
 23f7fe4:	ee17 0a90 	vmov	r0, s15
 23f7fe8:	f7fd fd9e 	bl	23f5b28 <__aeabi_f2d>
 23f7fec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23f7ff0:	ee18 0a10 	vmov	r0, s16
 23f7ff4:	f7fd fd98 	bl	23f5b28 <__aeabi_f2d>
 23f7ff8:	ee79 7a68 	vsub.f32	s15, s18, s17
 23f7ffc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 23f8000:	ee17 0a90 	vmov	r0, s15
 23f8004:	f7fd fd90 	bl	23f5b28 <__aeabi_f2d>
 23f8008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 23f800c:	ee18 0a90 	vmov	r0, s17
 23f8010:	f7fd fd8a 	bl	23f5b28 <__aeabi_f2d>
 23f8014:	6863      	ldr	r3, [r4, #4]
 23f8016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f801a:	4a15      	ldr	r2, [pc, #84]	; (23f8070 <loop+0x1dc>)
 23f801c:	2180      	movs	r1, #128	; 0x80
 23f801e:	9300      	str	r3, [sp, #0]
 23f8020:	4814      	ldr	r0, [pc, #80]	; (23f8074 <loop+0x1e0>)
 23f8022:	462b      	mov	r3, r5
 23f8024:	f002 f8b4 	bl	23fa190 <snprintf>
    Serial.println(buf);
 23f8028:	f004 f816 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f802c:	4911      	ldr	r1, [pc, #68]	; (23f8074 <loop+0x1e0>)
 23f802e:	f003 fd92 	bl	23fbb56 <_ZN5Print7printlnEPKc>
    delay(SYS_DELAY_MS);
 23f8032:	2064      	movs	r0, #100	; 0x64
 23f8034:	f002 f90e 	bl	23fa254 <delay>
 23f8038:	e7b3      	b.n	23f7fa2 <loop+0x10e>
 23f803a:	bf00      	nop
 23f803c:	1007a784 	.word	0x1007a784
 23f8040:	1007a744 	.word	0x1007a744
 23f8044:	1007a67c 	.word	0x1007a67c
 23f8048:	023fec64 	.word	0x023fec64
 23f804c:	023fe9d8 	.word	0x023fe9d8
 23f8050:	023fedb9 	.word	0x023fedb9
 23f8054:	023ffec6 	.word	0x023ffec6
 23f8058:	023febb2 	.word	0x023febb2
 23f805c:	023febb4 	.word	0x023febb4
 23f8060:	1007a75c 	.word	0x1007a75c
 23f8064:	023f6a2d 	.word	0x023f6a2d
 23f8068:	023febb6 	.word	0x023febb6
 23f806c:	023ff00a 	.word	0x023ff00a
 23f8070:	023febda 	.word	0x023febda
 23f8074:	1007a6c1 	.word	0x1007a6c1

023f8078 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++)
    {
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
        ei_printf("%.5f\r\n", result.classification[i].value);
    }
}
 23f8078:	b570      	push	{r4, r5, r6, lr}
        : impulse(impulse)
 23f807a:	2400      	movs	r4, #0
 23f807c:	4d26      	ldr	r5, [pc, #152]	; (23f8118 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa0>)
 23f807e:	4e27      	ldr	r6, [pc, #156]	; (23f811c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa4>)
 23f8080:	b08c      	sub	sp, #48	; 0x30
 23f8082:	602e      	str	r6, [r5, #0]
 23f8084:	722c      	strb	r4, [r5, #8]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
 23f8086:	2004      	movs	r0, #4
 23f8088:	f000 f932 	bl	23f82f0 <_Z9ei_mallocj>
              error_(SYSTEM_ERROR_NONE) {
 23f808c:	4b24      	ldr	r3, [pc, #144]	; (23f8120 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa8>)
    SleepResult() {}
 23f808e:	4a25      	ldr	r2, [pc, #148]	; (23f8124 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xac>)
 23f8090:	6068      	str	r0, [r5, #4]
            dsp_handles[ix] = nullptr;
 23f8092:	6004      	str	r4, [r0, #0]
 23f8094:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23f8096:	e9c3 4400 	strd	r4, r4, [r3]
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
        : state(impulse), impulse(impulse), post_processing_state(nullptr) {};
 23f809a:	e9c5 6403 	strd	r6, r4, [r5, #12]
        set_system_mode(mode);
 23f809e:	2001      	movs	r0, #1
 23f80a0:	f001 ff34 	bl	23f9f0c <set_system_mode>
        capacity_(0) {
 23f80a4:	e9cd 4400 	strd	r4, r4, [sp]
 23f80a8:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f80aa:	f003 ffd5 	bl	23fc058 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f80ae:	4c1e      	ldr	r4, [pc, #120]	; (23f8128 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xb0>)
 23f80b0:	4605      	mov	r5, r0
 23f80b2:	4626      	mov	r6, r4
 23f80b4:	4669      	mov	r1, sp
 23f80b6:	a803      	add	r0, sp, #12
 23f80b8:	f7ff fa1e 	bl	23f74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23f80bc:	a903      	add	r1, sp, #12
 23f80be:	a806      	add	r0, sp, #24
 23f80c0:	f7ff fa1a 	bl	23f74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f80c4:	4b19      	ldr	r3, [pc, #100]	; (23f812c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xb4>)
 23f80c6:	a906      	add	r1, sp, #24
 23f80c8:	f846 3b04 	str.w	r3, [r6], #4
 23f80cc:	a809      	add	r0, sp, #36	; 0x24
 23f80ce:	f7ff fa13 	bl	23f74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f80d2:	aa09      	add	r2, sp, #36	; 0x24
 23f80d4:	2132      	movs	r1, #50	; 0x32
 23f80d6:	4630      	mov	r0, r6
 23f80d8:	f003 f91e 	bl	23fb318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f80dc:	a809      	add	r0, sp, #36	; 0x24
 23f80de:	f7ff f839 	bl	23f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f80e2:	a806      	add	r0, sp, #24
 23f80e4:	f7ff f836 	bl	23f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f80e8:	4b11      	ldr	r3, [pc, #68]	; (23f8130 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xb8>)
 23f80ea:	6225      	str	r5, [r4, #32]
 23f80ec:	6023      	str	r3, [r4, #0]
 23f80ee:	a803      	add	r0, sp, #12
 23f80f0:	f7ff f830 	bl	23f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f80f4:	4b0f      	ldr	r3, [pc, #60]	; (23f8134 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xbc>)
 23f80f6:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f80f8:	f003 ffae 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f80fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f8100:	f003 ff98 	bl	23fc034 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f8104:	f002 fe1c 	bl	23fad40 <_ZN5spark10LogManager8instanceEv>
 23f8108:	4621      	mov	r1, r4
 23f810a:	f003 f81f 	bl	23fb14c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23f810e:	4668      	mov	r0, sp
 23f8110:	f7ff f820 	bl	23f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f8114:	b00c      	add	sp, #48	; 0x30
 23f8116:	bd70      	pop	{r4, r5, r6, pc}
 23f8118:	1007a748 	.word	0x1007a748
 23f811c:	023fec6c 	.word	0x023fec6c
 23f8120:	1007a670 	.word	0x1007a670
 23f8124:	ffff0000 	.word	0xffff0000
 23f8128:	1007a760 	.word	0x1007a760
 23f812c:	023febf8 	.word	0x023febf8
 23f8130:	023ffaac 	.word	0x023ffaac
 23f8134:	023fec10 	.word	0x023fec10

023f8138 <_Z29ei_run_impulse_check_canceledv>:

#define EI_WEAK_FN __attribute__((weak))

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
 23f8138:	2000      	movs	r0, #0
 23f813a:	4770      	bx	lr

023f813c <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return millis();
}

uint64_t ei_read_timer_us() {
 23f813c:	b508      	push	{r3, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23f813e:	f001 fca7 	bl	23f9a90 <HAL_Timer_Get_Micro_Seconds>
    return micros();
}
 23f8142:	2100      	movs	r1, #0
 23f8144:	bd08      	pop	{r3, pc}
	...

023f8148 <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23f8148:	b40f      	push	{r0, r1, r2, r3}
 23f814a:	b513      	push	{r0, r1, r4, lr}
 23f814c:	ab04      	add	r3, sp, #16
 23f814e:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f8152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23f8156:	480b      	ldr	r0, [pc, #44]	; (23f8184 <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23f8158:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f815a:	f002 f827 	bl	23fa1ac <vsnprintf>
    va_end(args);

    if (r > 0) {
 23f815e:	2800      	cmp	r0, #0
 23f8160:	dd0b      	ble.n	23f817a <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23f8162:	f003 ff79 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f8166:	4604      	mov	r4, r0
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 23f8168:	4806      	ldr	r0, [pc, #24]	; (23f8184 <_Z9ei_printfPKcz+0x3c>)
 23f816a:	f7fe fa85 	bl	23f6678 <strlen>
 23f816e:	6823      	ldr	r3, [r4, #0]
 23f8170:	4602      	mov	r2, r0
 23f8172:	68db      	ldr	r3, [r3, #12]
 23f8174:	4620      	mov	r0, r4
 23f8176:	4903      	ldr	r1, [pc, #12]	; (23f8184 <_Z9ei_printfPKcz+0x3c>)
 23f8178:	4798      	blx	r3
    }
}
 23f817a:	b002      	add	sp, #8
 23f817c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f8180:	b004      	add	sp, #16
 23f8182:	4770      	bx	lr
 23f8184:	1007a78c 	.word	0x1007a78c

023f8188 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
 23f8188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f818c:	ed2d 8b02 	vpush	{d8}
 23f8190:	eeb0 8a40 	vmov.f32	s16, s0
    Serial.print(f, 6);
 23f8194:	f003 ff60 	bl	23fc058 <_Z16_fetch_usbserialv>
 23f8198:	4682      	mov	sl, r0
        std::is_convertible<T, long long>::value), int> = 0>
    size_t print(T, int = DEC);

#ifndef PARTICLE_WIRING_PRINT_NO_FLOAT
    size_t print(float n, int digits = FLOAT_DEFAULT_FRACTIONAL_DIGITS) {
        return printFloat((double)n, digits);
 23f819a:	ee18 0a10 	vmov	r0, s16
 23f819e:	f7fd fcc3 	bl	23f5b28 <__aeabi_f2d>
        if (std::isnan(number)) {
 23f81a2:	4602      	mov	r2, r0
 23f81a4:	460b      	mov	r3, r1
        return printFloat((double)n, digits);
 23f81a6:	4604      	mov	r4, r0
 23f81a8:	460d      	mov	r5, r1
 23f81aa:	4606      	mov	r6, r0
 23f81ac:	460f      	mov	r7, r1
        if (std::isnan(number)) {
 23f81ae:	f7fd ffad 	bl	23f610c <__aeabi_dcmpun>
 23f81b2:	b138      	cbz	r0, 23f81c4 <_Z15ei_printf_floatf+0x3c>
            return print("nan");
 23f81b4:	4946      	ldr	r1, [pc, #280]	; (23f82d0 <_Z15ei_printf_floatf+0x148>)
            return print ("ovf"); // constant determined empirically
 23f81b6:	4650      	mov	r0, sl
}
 23f81b8:	ecbd 8b02 	vpop	{d8}
 23f81bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f81c0:	f003 bcb6 	b.w	23fbb30 <_ZN5Print5printEPKc>
  { return __builtin_isinf(__x); }
 23f81c4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
 23f81c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f81cc:	4620      	mov	r0, r4
 23f81ce:	4649      	mov	r1, r9
 23f81d0:	4b40      	ldr	r3, [pc, #256]	; (23f82d4 <_Z15ei_printf_floatf+0x14c>)
 23f81d2:	f7fd ff9b 	bl	23f610c <__aeabi_dcmpun>
 23f81d6:	b948      	cbnz	r0, 23f81ec <_Z15ei_printf_floatf+0x64>
 23f81d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f81dc:	4620      	mov	r0, r4
 23f81de:	4649      	mov	r1, r9
 23f81e0:	4b3c      	ldr	r3, [pc, #240]	; (23f82d4 <_Z15ei_printf_floatf+0x14c>)
 23f81e2:	f7fd ff75 	bl	23f60d0 <__aeabi_dcmple>
 23f81e6:	b908      	cbnz	r0, 23f81ec <_Z15ei_printf_floatf+0x64>
            return print("inf");
 23f81e8:	493b      	ldr	r1, [pc, #236]	; (23f82d8 <_Z15ei_printf_floatf+0x150>)
 23f81ea:	e7e4      	b.n	23f81b6 <_Z15ei_printf_floatf+0x2e>
        if (number > 4294967040.0) {
 23f81ec:	eddf 7a3b 	vldr	s15, [pc, #236]	; 23f82dc <_Z15ei_printf_floatf+0x154>
 23f81f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f81f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f81f8:	dd01      	ble.n	23f81fe <_Z15ei_printf_floatf+0x76>
            return print ("ovf"); // constant determined empirically
 23f81fa:	4939      	ldr	r1, [pc, #228]	; (23f82e0 <_Z15ei_printf_floatf+0x158>)
 23f81fc:	e7db      	b.n	23f81b6 <_Z15ei_printf_floatf+0x2e>
        if (number <-4294967040.0) {
 23f81fe:	eddf 7a39 	vldr	s15, [pc, #228]	; 23f82e4 <_Z15ei_printf_floatf+0x15c>
 23f8202:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f8206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f820a:	d4f6      	bmi.n	23f81fa <_Z15ei_printf_floatf+0x72>
        if (number < 0.0) {
 23f820c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23f8210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f8214:	d506      	bpl.n	23f8224 <_Z15ei_printf_floatf+0x9c>
            n += print('-');
 23f8216:	212d      	movs	r1, #45	; 0x2d
 23f8218:	4650      	mov	r0, sl
 23f821a:	f003 fc8d 	bl	23fbb38 <_ZN5Print5printEc>
            number = -number;
 23f821e:	4626      	mov	r6, r4
 23f8220:	f105 4700 	add.w	r7, r5, #2147483648	; 0x80000000
        number += rounding;
 23f8224:	a328      	add	r3, pc, #160	; (adr r3, 23f82c8 <_Z15ei_printf_floatf+0x140>)
 23f8226:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f822a:	4630      	mov	r0, r6
 23f822c:	4639      	mov	r1, r7
 23f822e:	f7fd fb1d 	bl	23f586c <__adddf3>
 23f8232:	460d      	mov	r5, r1
 23f8234:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
 23f8236:	f7fd ffa7 	bl	23f6188 <__aeabi_d2uiz>
 23f823a:	4606      	mov	r6, r0
        double remainder = number - (double)int_part;
 23f823c:	f7fd fc52 	bl	23f5ae4 <__aeabi_ui2d>
 23f8240:	460b      	mov	r3, r1
 23f8242:	4602      	mov	r2, r0
 23f8244:	4629      	mov	r1, r5
 23f8246:	4620      	mov	r0, r4
 23f8248:	f7fd fb0e 	bl	23f5868 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f824c:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
 23f824e:	4604      	mov	r4, r0
 23f8250:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
 23f8252:	4650      	mov	r0, sl
 23f8254:	4631      	mov	r1, r6
 23f8256:	f003 fc88 	bl	23fbb6a <_ZN5Print11printNumberEmh>
            n += print(".");
 23f825a:	4650      	mov	r0, sl
 23f825c:	4922      	ldr	r1, [pc, #136]	; (23f82e8 <_Z15ei_printf_floatf+0x160>)
 23f825e:	f003 fc67 	bl	23fbb30 <_ZN5Print5printEPKc>
 23f8262:	f04f 0807 	mov.w	r8, #7
            remainder *= 10.0;
 23f8266:	2600      	movs	r6, #0
 23f8268:	4f20      	ldr	r7, [pc, #128]	; (23f82ec <_Z15ei_printf_floatf+0x164>)
        while (digits-- > 0) {
 23f826a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23f826e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 23f8272:	d024      	beq.n	23f82be <_Z15ei_printf_floatf+0x136>
            remainder *= 10.0;
 23f8274:	4632      	mov	r2, r6
 23f8276:	463b      	mov	r3, r7
 23f8278:	4620      	mov	r0, r4
 23f827a:	4629      	mov	r1, r5
 23f827c:	f7fd fcac 	bl	23f5bd8 <__aeabi_dmul>
 23f8280:	4604      	mov	r4, r0
 23f8282:	460d      	mov	r5, r1
            int toPrint = int(remainder);
 23f8284:	f7fd ff58 	bl	23f6138 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23f8288:	f1b0 0900 	subs.w	r9, r0, #0
 23f828c:	da15      	bge.n	23f82ba <_Z15ei_printf_floatf+0x132>
            t = print('-');
 23f828e:	212d      	movs	r1, #45	; 0x2d
 23f8290:	4650      	mov	r0, sl
 23f8292:	f003 fc51 	bl	23fbb38 <_ZN5Print5printEc>
            val = -n;
 23f8296:	f1c9 0100 	rsb	r1, r9, #0
        return printNumber(val, base) + t;
 23f829a:	220a      	movs	r2, #10
 23f829c:	4650      	mov	r0, sl
 23f829e:	f003 fc64 	bl	23fbb6a <_ZN5Print11printNumberEmh>
            remainder -= toPrint;
 23f82a2:	4648      	mov	r0, r9
 23f82a4:	f7fd fc2e 	bl	23f5b04 <__aeabi_i2d>
 23f82a8:	4602      	mov	r2, r0
 23f82aa:	460b      	mov	r3, r1
 23f82ac:	4620      	mov	r0, r4
 23f82ae:	4629      	mov	r1, r5
 23f82b0:	f7fd fada 	bl	23f5868 <__aeabi_dsub>
 23f82b4:	4604      	mov	r4, r0
 23f82b6:	460d      	mov	r5, r1
        while (digits-- > 0) {
 23f82b8:	e7d7      	b.n	23f826a <_Z15ei_printf_floatf+0xe2>
            val = n;
 23f82ba:	4649      	mov	r1, r9
 23f82bc:	e7ed      	b.n	23f829a <_Z15ei_printf_floatf+0x112>
 23f82be:	ecbd 8b02 	vpop	{d8}
 23f82c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f82c6:	bf00      	nop
 23f82c8:	a0b5ed8e 	.word	0xa0b5ed8e
 23f82cc:	3ea0c6f7 	.word	0x3ea0c6f7
 23f82d0:	023fed44 	.word	0x023fed44
 23f82d4:	7fefffff 	.word	0x7fefffff
 23f82d8:	023fed48 	.word	0x023fed48
 23f82dc:	4f7fffff 	.word	0x4f7fffff
 23f82e0:	023fed4c 	.word	0x023fed4c
 23f82e4:	cf7fffff 	.word	0xcf7fffff
 23f82e8:	023ff24e 	.word	0x023ff24e
 23f82ec:	40240000 	.word	0x40240000

023f82f0 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
 23f82f0:	f001 bf24 	b.w	23fa13c <malloc>

023f82f4 <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
 23f82f4:	f004 b942 	b.w	23fc57c <calloc>

023f82f8 <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
 23f82f8:	f001 bf2e 	b.w	23fa158 <free>

023f82fc <TfLiteTypeGetName>:
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 23f82fc:	2812      	cmp	r0, #18
 23f82fe:	bf9a      	itte	ls
 23f8300:	4b02      	ldrls	r3, [pc, #8]	; (23f830c <TfLiteTypeGetName+0x10>)
 23f8302:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 23f8306:	4802      	ldrhi	r0, [pc, #8]	; (23f8310 <TfLiteTypeGetName+0x14>)
      return "VARIANT";
    case kTfLiteInt4:
      return "INT4";
  }
  return "Unknown type";
}
 23f8308:	4770      	bx	lr
 23f830a:	bf00      	nop
 23f830c:	023fedd0 	.word	0x023fedd0
 23f8310:	023fed50 	.word	0x023fed50

023f8314 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
  const float tmp = TfLiteRound(f / scale);
 23f8314:	eec0 7a80 	vdiv.f32	s15, s1, s0
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 23f8318:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23f8360 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x4c>
  { return __builtin_roundf(__x); }
 23f831c:	fef8 7a67 	vrinta.f32	s15, s15
 23f8320:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f8324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                             int32_t zero_point, float f, int32_t& q) {
 23f8328:	b513      	push	{r0, r1, r4, lr}
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 23f832a:	db0f      	blt.n	23f834c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x38>
 23f832c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 23f8364 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x50>
 23f8330:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f8334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f8338:	d808      	bhi.n	23f834c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x38>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
 23f833a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f833e:	ee17 3a90 	vmov	r3, s15
  return kTfLiteOk;
 23f8342:	2000      	movs	r0, #0
  q = zero_point + static_cast<int32_t>(tmp);
 23f8344:	440b      	add	r3, r1
 23f8346:	6013      	str	r3, [r2, #0]
}
 23f8348:	b002      	add	sp, #8
 23f834a:	bd10      	pop	{r4, pc}
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 23f834c:	4b06      	ldr	r3, [pc, #24]	; (23f8368 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x54>)
 23f834e:	4a07      	ldr	r2, [pc, #28]	; (23f836c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x58>)
 23f8350:	9300      	str	r3, [sp, #0]
 23f8352:	6904      	ldr	r4, [r0, #16]
 23f8354:	f240 1357 	movw	r3, #343	; 0x157
 23f8358:	4905      	ldr	r1, [pc, #20]	; (23f8370 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x5c>)
 23f835a:	47a0      	blx	r4
 23f835c:	2001      	movs	r0, #1
 23f835e:	e7f3      	b.n	23f8348 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x34>
 23f8360:	cf000000 	.word	0xcf000000
 23f8364:	4f000000 	.word	0x4f000000
 23f8368:	023feeb7 	.word	0x023feeb7
 23f836c:	023fee1c 	.word	0x023fee1c
 23f8370:	023feea0 	.word	0x023feea0

023f8374 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
 23f8374:	b573      	push	{r0, r1, r4, r5, r6, lr}
      static_cast<double>(input->params.scale * filter->params.scale);
 23f8376:	edd1 7a03 	vldr	s15, [r1, #12]
 23f837a:	ed92 7a03 	vldr	s14, [r2, #12]
 23f837e:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f8382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f8386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
 23f838a:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f838c:	da0a      	bge.n	23f83a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
 23f838e:	4b0f      	ldr	r3, [pc, #60]	; (23f83cc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
 23f8390:	4a0f      	ldr	r2, [pc, #60]	; (23f83d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
 23f8392:	9300      	str	r3, [sp, #0]
 23f8394:	6904      	ldr	r4, [r0, #16]
 23f8396:	f240 1349 	movw	r3, #329	; 0x149
 23f839a:	490e      	ldr	r1, [pc, #56]	; (23f83d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
 23f839c:	47a0      	blx	r4
 23f839e:	2001      	movs	r0, #1
}
 23f83a0:	b002      	add	sp, #8
 23f83a2:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
 23f83a4:	ee17 0a90 	vmov	r0, s15
 23f83a8:	f7fd fbbe 	bl	23f5b28 <__aeabi_f2d>
 23f83ac:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f83ae:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
 23f83b0:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f83b2:	f7fd fbb9 	bl	23f5b28 <__aeabi_f2d>
 23f83b6:	460b      	mov	r3, r1
 23f83b8:	4602      	mov	r2, r0
 23f83ba:	4629      	mov	r1, r5
 23f83bc:	4620      	mov	r0, r4
 23f83be:	f7fd fd35 	bl	23f5e2c <__aeabi_ddiv>
 23f83c2:	9b06      	ldr	r3, [sp, #24]
 23f83c4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
 23f83c8:	2000      	movs	r0, #0
 23f83ca:	e7e9      	b.n	23f83a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
 23f83cc:	023feedd 	.word	0x023feedd
 23f83d0:	023fee1c 	.word	0x023fee1c
 23f83d4:	023feea0 	.word	0x023feea0

023f83d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
 23f83d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f83dc:	4604      	mov	r4, r0
 23f83de:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f83e2:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
 23f83e4:	4615      	mov	r5, r2
 23f83e6:	461e      	mov	r6, r3
 23f83e8:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f83ea:	f7fd fb9d 	bl	23f5b28 <__aeabi_f2d>
 23f83ee:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
 23f83f0:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f83f2:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
 23f83f4:	f7fd fb98 	bl	23f5b28 <__aeabi_f2d>
 23f83f8:	4602      	mov	r2, r0
 23f83fa:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f83fc:	4640      	mov	r0, r8
 23f83fe:	4649      	mov	r1, r9
 23f8400:	f7fd fbea 	bl	23f5bd8 <__aeabi_dmul>
 23f8404:	4680      	mov	r8, r0
 23f8406:	4689      	mov	r9, r1
  if (bias) {
 23f8408:	b1d6      	cbz	r6, 23f8440 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
 23f840a:	68f0      	ldr	r0, [r6, #12]
 23f840c:	f7fd fb8c 	bl	23f5b28 <__aeabi_f2d>
 23f8410:	4602      	mov	r2, r0
 23f8412:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 23f8414:	4640      	mov	r0, r8
 23f8416:	4649      	mov	r1, r9
 23f8418:	f7fd fa26 	bl	23f5868 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23f841c:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
 23f841e:	68f8      	ldr	r0, [r7, #12]
 23f8420:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 23f8424:	f7fd fb80 	bl	23f5b28 <__aeabi_f2d>
 23f8428:	4602      	mov	r2, r0
 23f842a:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f842c:	4640      	mov	r0, r8
 23f842e:	4649      	mov	r1, r9
 23f8430:	f7fd fcfc 	bl	23f5e2c <__aeabi_ddiv>
 23f8434:	a311      	add	r3, pc, #68	; (adr r3, 23f847c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
 23f8436:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f843a:	f7fd fe49 	bl	23f60d0 <__aeabi_dcmple>
 23f843e:	b150      	cbz	r0, 23f8456 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f8440:	463b      	mov	r3, r7
 23f8442:	462a      	mov	r2, r5
 23f8444:	4651      	mov	r1, sl
 23f8446:	4620      	mov	r0, r4
 23f8448:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
 23f844c:	b003      	add	sp, #12
 23f844e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f8452:	f7ff bf8f 	b.w	23f8374 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f8456:	4b06      	ldr	r3, [pc, #24]	; (23f8470 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
 23f8458:	4620      	mov	r0, r4
 23f845a:	9300      	str	r3, [sp, #0]
 23f845c:	6925      	ldr	r5, [r4, #16]
 23f845e:	f44f 739e 	mov.w	r3, #316	; 0x13c
 23f8462:	4a04      	ldr	r2, [pc, #16]	; (23f8474 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
 23f8464:	4904      	ldr	r1, [pc, #16]	; (23f8478 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
 23f8466:	47a8      	blx	r5
}
 23f8468:	2001      	movs	r0, #1
 23f846a:	b003      	add	sp, #12
 23f846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8470:	023feef6 	.word	0x023feef6
 23f8474:	023fee1c 	.word	0x023fee1c
 23f8478:	023feea0 	.word	0x023feea0
 23f847c:	47ae147b 	.word	0x47ae147b
 23f8480:	3f947ae1 	.word	0x3f947ae1

023f8484 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 23f8484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8488:	461f      	mov	r7, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 23f848a:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
 23f848c:	b086      	sub	sp, #24
  if (output->type == kTfLiteUInt8) {
 23f848e:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
 23f8490:	4606      	mov	r6, r0
 23f8492:	468c      	mov	ip, r1
 23f8494:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (output->type == kTfLiteUInt8) {
 23f8496:	d00f      	beq.n	23f84b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x34>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 23f8498:	2b09      	cmp	r3, #9
 23f849a:	d026      	beq.n	23f84ea <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 23f849c:	2b07      	cmp	r3, #7
 23f849e:	d028      	beq.n	23f84f2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x6e>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
 23f84a0:	4b37      	ldr	r3, [pc, #220]	; (23f8580 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
 23f84a2:	4a38      	ldr	r2, [pc, #224]	; (23f8584 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
 23f84a4:	9300      	str	r3, [sp, #0]
 23f84a6:	6904      	ldr	r4, [r0, #16]
 23f84a8:	f240 138f 	movw	r3, #399	; 0x18f
 23f84ac:	4936      	ldr	r1, [pc, #216]	; (23f8588 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>)
 23f84ae:	47a0      	blx	r4
 23f84b0:	2001      	movs	r0, #1
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
 23f84b2:	b006      	add	sp, #24
 23f84b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    qmax = std::numeric_limits<uint8_t>::max();
 23f84b8:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 23f84ba:	f04f 0800 	mov.w	r8, #0
  if (activation == kTfLiteActRelu) {
 23f84be:	f1bc 0f01 	cmp.w	ip, #1
  const auto scale = output->params.scale;
 23f84c2:	ed92 0a03 	vldr	s0, [r2, #12]
  const auto zero_point = output->params.zero_point;
 23f84c6:	6911      	ldr	r1, [r2, #16]
  if (activation == kTfLiteActRelu) {
 23f84c8:	d118      	bne.n	23f84fc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x78>
    TF_LITE_ENSURE_OK(context,
 23f84ca:	eddf 0a30 	vldr	s1, [pc, #192]	; 23f858c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
 23f84ce:	4630      	mov	r0, r6
 23f84d0:	aa05      	add	r2, sp, #20
 23f84d2:	f7ff ff1f 	bl	23f8314 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f84d6:	2800      	cmp	r0, #0
 23f84d8:	d1eb      	bne.n	23f84b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
 23f84da:	9b05      	ldr	r3, [sp, #20]
 23f84dc:	4543      	cmp	r3, r8
 23f84de:	bfac      	ite	ge
 23f84e0:	603b      	strge	r3, [r7, #0]
 23f84e2:	f8c7 8000 	strlt.w	r8, [r7]
    *act_max = qmax;
 23f84e6:	602c      	str	r4, [r5, #0]
 23f84e8:	e7e3      	b.n	23f84b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    qmax = std::numeric_limits<int8_t>::max();
 23f84ea:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 23f84ec:	f06f 087f 	mvn.w	r8, #127	; 0x7f
 23f84f0:	e7e5      	b.n	23f84be <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
    qmax = std::numeric_limits<int16_t>::max();
 23f84f2:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
 23f84f6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 23f8590 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
 23f84fa:	e7e0      	b.n	23f84be <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
  } else if (activation == kTfLiteActRelu6) {
 23f84fc:	f1bc 0f03 	cmp.w	ip, #3
 23f8500:	d121      	bne.n	23f8546 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc2>
    TF_LITE_ENSURE_OK(context,
 23f8502:	eddf 0a22 	vldr	s1, [pc, #136]	; 23f858c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
 23f8506:	4630      	mov	r0, r6
 23f8508:	aa05      	add	r2, sp, #20
 23f850a:	ed8d 0a02 	vstr	s0, [sp, #8]
 23f850e:	9103      	str	r1, [sp, #12]
 23f8510:	f7ff ff00 	bl	23f8314 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f8514:	2800      	cmp	r0, #0
 23f8516:	d1cc      	bne.n	23f84b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    TF_LITE_ENSURE_OK(context,
 23f8518:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, tmp_q);
 23f851c:	9b05      	ldr	r3, [sp, #20]
    TF_LITE_ENSURE_OK(context,
 23f851e:	aa05      	add	r2, sp, #20
    *act_min = std::max(qmin, tmp_q);
 23f8520:	4543      	cmp	r3, r8
 23f8522:	bfac      	ite	ge
 23f8524:	603b      	strge	r3, [r7, #0]
 23f8526:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
 23f852a:	ed9d 0a02 	vldr	s0, [sp, #8]
 23f852e:	4630      	mov	r0, r6
 23f8530:	9903      	ldr	r1, [sp, #12]
 23f8532:	f7ff feef 	bl	23f8314 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f8536:	2800      	cmp	r0, #0
 23f8538:	d1bb      	bne.n	23f84b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_max = std::min(qmax, tmp_q);
 23f853a:	9b05      	ldr	r3, [sp, #20]
 23f853c:	42a3      	cmp	r3, r4
 23f853e:	bfd4      	ite	le
 23f8540:	602b      	strle	r3, [r5, #0]
 23f8542:	602c      	strgt	r4, [r5, #0]
 23f8544:	e7b5      	b.n	23f84b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
  } else if (activation == kTfLiteActReluN1To1) {
 23f8546:	f1bc 0f02 	cmp.w	ip, #2
 23f854a:	d114      	bne.n	23f8576 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf2>
    TF_LITE_ENSURE_OK(context,
 23f854c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 23f8550:	4630      	mov	r0, r6
 23f8552:	aa05      	add	r2, sp, #20
 23f8554:	ed8d 0a02 	vstr	s0, [sp, #8]
 23f8558:	9103      	str	r1, [sp, #12]
 23f855a:	f7ff fedb 	bl	23f8314 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f855e:	2800      	cmp	r0, #0
 23f8560:	d1a7      	bne.n	23f84b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
 23f8562:	9b05      	ldr	r3, [sp, #20]
    TF_LITE_ENSURE_OK(context,
 23f8564:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, tmp_q);
 23f8568:	4543      	cmp	r3, r8
 23f856a:	bfac      	ite	ge
 23f856c:	603b      	strge	r3, [r7, #0]
 23f856e:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
 23f8572:	aa05      	add	r2, sp, #20
 23f8574:	e7d9      	b.n	23f852a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa6>
    *act_min = qmin;
 23f8576:	f8c7 8000 	str.w	r8, [r7]
  return kTfLiteOk;
 23f857a:	2000      	movs	r0, #0
    *act_max = qmax;
 23f857c:	602c      	str	r4, [r5, #0]
                                               output, act_min, act_max);
 23f857e:	e798      	b.n	23f84b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
 23f8580:	023fef18 	.word	0x023fef18
 23f8584:	023fee1c 	.word	0x023fee1c
 23f8588:	023feea0 	.word	0x023feea0
 23f858c:	00000000 	.word	0x00000000
 23f8590:	ffff8000 	.word	0xffff8000

023f8594 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
  for (int i = 0; i < num_elements; i += 2) {
 23f8594:	2300      	movs	r3, #0
                             int8_t* dst_buffer) {
 23f8596:	b570      	push	{r4, r5, r6, lr}
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 23f8598:	1c56      	adds	r6, r2, #1
  for (int i = 0; i < num_elements; i += 2) {
 23f859a:	428b      	cmp	r3, r1
 23f859c:	da0c      	bge.n	23f85b8 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x24>
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 23f859e:	105d      	asrs	r5, r3, #1
 23f85a0:	5744      	ldrsb	r4, [r0, r5]
 23f85a2:	f344 0403 	sbfx	r4, r4, #0, #4
 23f85a6:	54d4      	strb	r4, [r2, r3]
    if (i + 1 == num_elements) break;
 23f85a8:	1c5c      	adds	r4, r3, #1
 23f85aa:	42a1      	cmp	r1, r4
 23f85ac:	d004      	beq.n	23f85b8 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x24>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 23f85ae:	5744      	ldrsb	r4, [r0, r5]
 23f85b0:	1124      	asrs	r4, r4, #4
 23f85b2:	54f4      	strb	r4, [r6, r3]
  for (int i = 0; i < num_elements; i += 2) {
 23f85b4:	3302      	adds	r3, #2
 23f85b6:	e7f0      	b.n	23f859a <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x6>
  }
}
 23f85b8:	bd70      	pop	{r4, r5, r6, pc}
	...

023f85bc <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 23f85bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 23f85be:	2200      	movs	r2, #0
                        int* shift) {
 23f85c0:	4606      	mov	r6, r0
 23f85c2:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
 23f85c4:	2300      	movs	r3, #0
 23f85c6:	ec51 0b10 	vmov	r0, r1, d0
 23f85ca:	ed8d 0b00 	vstr	d0, [sp]
 23f85ce:	f7fd fd6b 	bl	23f60a8 <__aeabi_dcmpeq>
 23f85d2:	ed9d 0b00 	vldr	d0, [sp]
 23f85d6:	4605      	mov	r5, r0
 23f85d8:	b120      	cbz	r0, 23f85e4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 23f85da:	2300      	movs	r3, #0
 23f85dc:	6033      	str	r3, [r6, #0]
    *shift = 0;
 23f85de:	6023      	str	r3, [r4, #0]
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 23f85e0:	b002      	add	sp, #8
 23f85e2:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
 23f85e4:	4620      	mov	r0, r4
 23f85e6:	f003 ff2b 	bl	23fc440 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 23f85ea:	2200      	movs	r2, #0
 23f85ec:	4b13      	ldr	r3, [pc, #76]	; (23f863c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
  const double q = std::frexp(double_multiplier, shift);
 23f85ee:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 23f85f2:	f7fd faf1 	bl	23f5bd8 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 23f85f6:	ec41 0b10 	vmov	d0, r0, r1
 23f85fa:	f003 ff59 	bl	23fc4b0 <round>
 23f85fe:	ec51 0b10 	vmov	r0, r1, d0
 23f8602:	f7fd fe81 	bl	23f6308 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 23f8606:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 23f860a:	4282      	cmp	r2, r0
 23f860c:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 23f8610:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 23f8612:	da01      	bge.n	23f8618 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
 23f8614:	f001 fdd8 	bl	23fa1c8 <abort>
  if (q_fixed == (1LL << 31)) {
 23f8618:	42a9      	cmp	r1, r5
 23f861a:	bf08      	it	eq
 23f861c:	4290      	cmpeq	r0, r2
    ++*shift;
 23f861e:	bf02      	ittt	eq
 23f8620:	6823      	ldreq	r3, [r4, #0]
 23f8622:	3301      	addeq	r3, #1
 23f8624:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 23f8626:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
 23f8628:	bf08      	it	eq
 23f862a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
 23f862e:	321f      	adds	r2, #31
    *shift = 0;
 23f8630:	bfbc      	itt	lt
 23f8632:	2300      	movlt	r3, #0
 23f8634:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 23f8636:	6033      	str	r3, [r6, #0]
 23f8638:	e7d2      	b.n	23f85e0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
 23f863a:	bf00      	nop
 23f863c:	41e00000 	.word	0x41e00000

023f8640 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 23f8640:	1e4b      	subs	r3, r1, #1
 23f8642:	4418      	add	r0, r3
 23f8644:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 23f8648:	4348      	muls	r0, r1
 23f864a:	4770      	bx	lr

023f864c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 23f864c:	2104      	movs	r1, #4
 23f864e:	69c0      	ldr	r0, [r0, #28]
 23f8650:	f7ff bff6 	b.w	23f8640 <_ZN6tflite14AlignPointerUpEPhj>

023f8654 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
                                                         int* buffer_idx) {
 23f8654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f8658:	4604      	mov	r4, r0
 23f865a:	4689      	mov	r9, r1
 23f865c:	4690      	mov	r8, r2
 23f865e:	461f      	mov	r7, r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 23f8660:	f7ff fff4 	bl	23f864c <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f8664:	230c      	movs	r3, #12
 23f8666:	4605      	mov	r5, r0
  size_t current_node_request_count = 0;
 23f8668:	2200      	movs	r2, #0
 23f866a:	69a6      	ldr	r6, [r4, #24]
 23f866c:	435e      	muls	r6, r3
 23f866e:	1981      	adds	r1, r0, r6
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f8670:	428d      	cmp	r5, r1
 23f8672:	d005      	beq.n	23f8680 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 23f8674:	686b      	ldr	r3, [r5, #4]
 23f8676:	350c      	adds	r5, #12
 23f8678:	3301      	adds	r3, #1
      ++current_node_request_count;
 23f867a:	bf08      	it	eq
 23f867c:	3201      	addeq	r2, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f867e:	e7f7      	b.n	23f8670 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1c>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 23f8680:	2a0b      	cmp	r2, #11
 23f8682:	d80d      	bhi.n	23f86a0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4c>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 23f8684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  current_request->bytes = bytes;
 23f8688:	f840 9006 	str.w	r9, [r0, r6]
  return kTfLiteOk;
 23f868c:	2000      	movs	r0, #0
  current_request->subgraph_idx = subgraph_idx;
 23f868e:	e9c5 3801 	strd	r3, r8, [r5, #4]
  *buffer_idx = scratch_buffer_request_count_;
 23f8692:	69a3      	ldr	r3, [r4, #24]
 23f8694:	603b      	str	r3, [r7, #0]
  ++scratch_buffer_request_count_;
 23f8696:	69a3      	ldr	r3, [r4, #24]
 23f8698:	3301      	adds	r3, #1
 23f869a:	61a3      	str	r3, [r4, #24]
}
 23f869c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return kTfLiteError;
 23f86a0:	2001      	movs	r0, #1
 23f86a2:	e7fb      	b.n	23f869c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>

023f86a4 <_ZN6tflite12MicroContextD1Ev>:
namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}

MicroContext::~MicroContext() {}
 23f86a4:	4770      	bx	lr

023f86a6 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
  return allocator_.AllocatePersistentBuffer(bytes);
 23f86a6:	6840      	ldr	r0, [r0, #4]
 23f86a8:	6803      	ldr	r3, [r0, #0]
 23f86aa:	695b      	ldr	r3, [r3, #20]
 23f86ac:	4718      	bx	r3

023f86ae <_ZN6tflite12MicroContext16GetScratchBufferEi>:
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroContext::GetScratchBuffer(int buffer_idx) {
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
 23f86ae:	6903      	ldr	r3, [r0, #16]
}
 23f86b0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 23f86b4:	4770      	bx	lr

023f86b6 <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 23f86b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 23f86b8:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
 23f86bc:	6955      	ldr	r5, [r2, #20]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 23f86be:	460b      	mov	r3, r1
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 23f86c0:	6821      	ldr	r1, [r4, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 23f86c2:	9500      	str	r5, [sp, #0]
 23f86c4:	684d      	ldr	r5, [r1, #4]
 23f86c6:	6912      	ldr	r2, [r2, #16]
 23f86c8:	68c1      	ldr	r1, [r0, #12]
 23f86ca:	4620      	mov	r0, r4
 23f86cc:	47a8      	blx	r5
}
 23f86ce:	b003      	add	sp, #12
 23f86d0:	bd30      	pop	{r4, r5, pc}

023f86d2 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 23f86d2:	6840      	ldr	r0, [r0, #4]
 23f86d4:	6803      	ldr	r3, [r0, #0]
 23f86d6:	689b      	ldr	r3, [r3, #8]
 23f86d8:	4718      	bx	r3

023f86da <_ZN6tflite12MicroContext13GetEvalTensorEi>:
}

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 23f86da:	6882      	ldr	r2, [r0, #8]
              .tensors[tensor_idx];
 23f86dc:	e9d2 3004 	ldrd	r3, r0, [r2, #16]
 23f86e0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
}
 23f86e4:	200c      	movs	r0, #12
              .tensors[tensor_idx];
 23f86e6:	685b      	ldr	r3, [r3, #4]
}
 23f86e8:	fb00 3001 	mla	r0, r0, r1, r3
 23f86ec:	4770      	bx	lr

023f86ee <_ZN6tflite12MicroContextD0Ev>:
MicroContext::~MicroContext() {}
 23f86ee:	b510      	push	{r4, lr}
 23f86f0:	4604      	mov	r4, r0
 23f86f2:	2118      	movs	r1, #24
 23f86f4:	f7fd ffeb 	bl	23f66ce <_ZdlPvj>
 23f86f8:	4620      	mov	r0, r4
 23f86fa:	bd10      	pop	{r4, pc}

023f86fc <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:
                                                       int* buffer_idx) {
 23f86fc:	b410      	push	{r4}
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 23f86fe:	6884      	ldr	r4, [r0, #8]
 23f8700:	4613      	mov	r3, r2
  return allocator_.RequestScratchBufferInArena(
 23f8702:	6840      	ldr	r0, [r0, #4]
 23f8704:	6962      	ldr	r2, [r4, #20]
}
 23f8706:	f85d 4b04 	ldr.w	r4, [sp], #4
  return allocator_.RequestScratchBufferInArena(
 23f870a:	f7ff bfa3 	b.w	23f8654 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
	...

023f8710 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 23f8710:	e9c0 3202 	strd	r3, r2, [r0, #8]
 23f8714:	2300      	movs	r3, #0
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 23f8716:	b530      	push	{r4, r5, lr}
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 23f8718:	4d02      	ldr	r5, [pc, #8]	; (23f8724 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x14>)
 23f871a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f871e:	e9c0 5100 	strd	r5, r1, [r0]
 23f8722:	bd30      	pop	{r4, r5, pc}
 23f8724:	023fef28 	.word	0x023fef28

023f8728 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:
  if (index >= 0 && index < max_size) {
 23f8728:	2900      	cmp	r1, #0
 23f872a:	db04      	blt.n	23f8736 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
 23f872c:	4291      	cmp	r1, r2
 23f872e:	da02      	bge.n	23f8736 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
    const int tensor_index = tensor_indices[index];
 23f8730:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
 23f8734:	4770      	bx	lr
  return -1;
 23f8736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f873a:	4770      	bx	lr

023f873c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
                                                    int index) {
 23f873c:	460b      	mov	r3, r1
 23f873e:	b510      	push	{r4, lr}
 23f8740:	4611      	mov	r1, r2
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 23f8742:	681a      	ldr	r2, [r3, #0]
                                                    int index) {
 23f8744:	4604      	mov	r4, r0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 23f8746:	1d13      	adds	r3, r2, #4
 23f8748:	6812      	ldr	r2, [r2, #0]
 23f874a:	f7ff ffed 	bl	23f8728 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 23f874e:	1e01      	subs	r1, r0, #0
 23f8750:	db05      	blt.n	23f875e <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 23f8752:	6823      	ldr	r3, [r4, #0]
 23f8754:	4620      	mov	r0, r4
}
 23f8756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 23f875a:	695b      	ldr	r3, [r3, #20]
 23f875c:	4718      	bx	r3
}
 23f875e:	2000      	movs	r0, #0
 23f8760:	bd10      	pop	{r4, pc}

023f8762 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:
                                                     int index) {
 23f8762:	460b      	mov	r3, r1
 23f8764:	b510      	push	{r4, lr}
 23f8766:	4611      	mov	r1, r2
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 23f8768:	685a      	ldr	r2, [r3, #4]
                                                     int index) {
 23f876a:	4604      	mov	r4, r0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 23f876c:	1d13      	adds	r3, r2, #4
 23f876e:	6812      	ldr	r2, [r2, #0]
 23f8770:	f7ff ffda 	bl	23f8728 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 23f8774:	1e01      	subs	r1, r0, #0
 23f8776:	db05      	blt.n	23f8784 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 23f8778:	6823      	ldr	r3, [r4, #0]
 23f877a:	4620      	mov	r0, r4
}
 23f877c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 23f8780:	695b      	ldr	r3, [r3, #20]
 23f8782:	4718      	bx	r3
}
 23f8784:	2000      	movs	r0, #0
 23f8786:	bd10      	pop	{r4, pc}

023f8788 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:
    const TfLiteNode* node, int index) {
 23f8788:	460b      	mov	r3, r1
 23f878a:	b510      	push	{r4, lr}
 23f878c:	4611      	mov	r1, r2
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 23f878e:	689a      	ldr	r2, [r3, #8]
    const TfLiteNode* node, int index) {
 23f8790:	4604      	mov	r4, r0
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 23f8792:	1d13      	adds	r3, r2, #4
 23f8794:	6812      	ldr	r2, [r2, #0]
 23f8796:	f7ff ffc7 	bl	23f8728 <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 23f879a:	1e01      	subs	r1, r0, #0
 23f879c:	db05      	blt.n	23f87aa <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 23f879e:	6823      	ldr	r3, [r4, #0]
 23f87a0:	4620      	mov	r0, r4
}
 23f87a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 23f87a6:	695b      	ldr	r3, [r3, #20]
 23f87a8:	4718      	bx	r3
}
 23f87aa:	2000      	movs	r0, #0
 23f87ac:	bd10      	pop	{r4, pc}

023f87ae <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 23f87ae:	b40e      	push	{r1, r2, r3}
 23f87b0:	b503      	push	{r0, r1, lr}
 23f87b2:	a903      	add	r1, sp, #12
 23f87b4:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
 23f87b8:	9101      	str	r1, [sp, #4]
  Log(format, args);
 23f87ba:	f000 f805 	bl	23f87c8 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 23f87be:	b002      	add	sp, #8
 23f87c0:	f85d eb04 	ldr.w	lr, [sp], #4
 23f87c4:	b003      	add	sp, #12
 23f87c6:	4770      	bx	lr

023f87c8 <_Z3LogPKcSt9__va_list>:
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 23f87c8:	4770      	bx	lr

023f87ca <_ZNK6tflite12RuntimeShape4DimsEi>:

  ~RuntimeShape() {}

  int32_t DimensionsCount() const { return size_; }
  int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
 23f87ca:	2900      	cmp	r1, #0
  int32_t Dims(int i) const {
 23f87cc:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
 23f87ce:	da01      	bge.n	23f87d4 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
 23f87d0:	f001 fcfa 	bl	23fa1c8 <abort>
    TFLITE_DCHECK_LT(i, size_);
 23f87d4:	6803      	ldr	r3, [r0, #0]
 23f87d6:	428b      	cmp	r3, r1
 23f87d8:	ddfa      	ble.n	23f87d0 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return dims_[i];
 23f87da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
 23f87de:	6840      	ldr	r0, [r0, #4]
 23f87e0:	bd08      	pop	{r3, pc}

023f87e2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 23f87e2:	b510      	push	{r4, lr}
 23f87e4:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 23f87e6:	b911      	cbnz	r1, 23f87ee <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
 23f87e8:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f87ea:	4620      	mov	r0, r4
 23f87ec:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 23f87ee:	6889      	ldr	r1, [r1, #8]
 23f87f0:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 23f87f4:	f840 2b04 	str.w	r2, [r0], #4
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    size_ = dimensions_count;
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f87f8:	0092      	lsls	r2, r2, #2
 23f87fa:	f003 fed7 	bl	23fc5ac <memcpy>
  }
 23f87fe:	e7f4      	b.n	23f87ea <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>

023f8800 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f8800:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f8802:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f8804:	b90b      	cbnz	r3, 23f880a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f8806:	f001 fcdf 	bl	23fa1c8 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f880a:	213c      	movs	r1, #60	; 0x3c
}
 23f880c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f8810:	4718      	bx	r3
	...

023f8814 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
  if (data.buffer_idx > -1) {
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
  }
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f8814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8818:	b0ab      	sub	sp, #172	; 0xac
 23f881a:	e9dd 8a34 	ldrd	r8, sl, [sp, #208]	; 0xd0
 23f881e:	4604      	mov	r4, r0
 23f8820:	460e      	mov	r6, r1
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f8822:	a824      	add	r0, sp, #144	; 0x90
 23f8824:	4651      	mov	r1, sl
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f8826:	4699      	mov	r9, r3
 23f8828:	4615      	mov	r5, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f882a:	f000 fa73 	bl	23f8d14 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int output_dim_count = output_shape.DimensionsCount();
  TFLITE_DCHECK_GE(output_dim_count, 2);
 23f882e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23f8830:	3b02      	subs	r3, #2
 23f8832:	2b02      	cmp	r3, #2
 23f8834:	d901      	bls.n	23f883a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x26>
 23f8836:	f001 fcc7 	bl	23fa1c8 <abort>
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 23f883a:	6833      	ldr	r3, [r6, #0]
  input_dims->c = data.accum_depth;
 23f883c:	6b72      	ldr	r2, [r6, #52]	; 0x34
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 23f883e:	930b      	str	r3, [sp, #44]	; 0x2c
  quant_params->shift = data.reference_op_data.output_shift;
 23f8840:	6873      	ldr	r3, [r6, #4]
  filter_dims->n = data.accum_depth;
 23f8842:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
  quant_params->shift = data.reference_op_data.output_shift;
 23f8846:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims->h = 1;
 23f8848:	2301      	movs	r3, #1
  filter_dims->c = data.output_depth;
 23f884a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
  input_dims->w = 1;
 23f884c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  filter_dims->w = 1;
 23f8850:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  bias_dims->n = 1;
 23f8854:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  bias_dims->w = 1;
 23f8858:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  output_dims->w = 1;
 23f885c:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  ctx->buf = nullptr;
 23f8860:	2300      	movs	r3, #0
  input_dims->n = data.batches;
 23f8862:	6b31      	ldr	r1, [r6, #48]	; 0x30
  ctx->size = 0;
 23f8864:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  output_dims->n = data.batches;
 23f8868:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
  input_dims->n = data.batches;
 23f886c:	910f      	str	r1, [sp, #60]	; 0x3c
  if (data.buffer_idx > -1) {
 23f886e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
  output_dims->c = data.output_depth;
 23f8870:	921e      	str	r2, [sp, #120]	; 0x78
  if (data.buffer_idx > -1) {
 23f8872:	4299      	cmp	r1, r3
 23f8874:	db03      	blt.n	23f887e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x6a>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f8876:	4620      	mov	r0, r4
 23f8878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 23f887a:	4798      	blx	r3
 23f887c:	900d      	str	r0, [sp, #52]	; 0x34
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
 23f887e:	f1b8 0f00 	cmp.w	r8, #0
 23f8882:	d001      	beq.n	23f8888 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x74>
 23f8884:	f8d8 8000 	ldr.w	r8, [r8]

#if EI_TFLITE_DISABLE_CONV_2D_IN_I8
    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
    fc_params.output_offset = data.reference_op_data.output_zero_point;
    fc_params.filter_offset = 0;
 23f8888:	f04f 0b00 	mov.w	fp, #0
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f888c:	6973      	ldr	r3, [r6, #20]
    fc_params.filter_offset = 0;
 23f888e:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f8892:	425b      	negs	r3, r3
 23f8894:	931f      	str	r3, [sp, #124]	; 0x7c
    fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f8896:	69f3      	ldr	r3, [r6, #28]
 23f8898:	9321      	str	r3, [sp, #132]	; 0x84
    fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f889a:	68b3      	ldr	r3, [r6, #8]
 23f889c:	9322      	str	r3, [sp, #136]	; 0x88
    fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f889e:	68f3      	ldr	r3, [r6, #12]
 23f88a0:	9323      	str	r3, [sp, #140]	; 0x8c
  TFLITE_DCHECK(tensor != nullptr);
 23f88a2:	2d00      	cmp	r5, #0
 23f88a4:	d0c7      	beq.n	23f8836 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f88a6:	682b      	ldr	r3, [r5, #0]
 23f88a8:	f8d9 2000 	ldr.w	r2, [r9]
  TFLITE_DCHECK(tensor != nullptr);
 23f88ac:	f1ba 0f00 	cmp.w	sl, #0
 23f88b0:	d0c1      	beq.n	23f8836 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>

    TF_LITE_ENSURE_EQ(
 23f88b2:	f8da 1000 	ldr.w	r1, [sl]
 23f88b6:	ae17      	add	r6, sp, #92	; 0x5c
 23f88b8:	e9cd 2602 	strd	r2, r6, [sp, #8]
 23f88bc:	af1b      	add	r7, sp, #108	; 0x6c
 23f88be:	aa13      	add	r2, sp, #76	; 0x4c
 23f88c0:	e9cd 3200 	strd	r3, r2, [sp]
 23f88c4:	9106      	str	r1, [sp, #24]
 23f88c6:	e9cd 8704 	strd	r8, r7, [sp, #16]
 23f88ca:	ab0f      	add	r3, sp, #60	; 0x3c
 23f88cc:	aa0b      	add	r2, sp, #44	; 0x2c
 23f88ce:	a91f      	add	r1, sp, #124	; 0x7c
 23f88d0:	a80d      	add	r0, sp, #52	; 0x34
 23f88d2:	f7fd ff24 	bl	23f671e <arm_fully_connected_s8>
 23f88d6:	b308      	cbz	r0, 23f891c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x108>
 23f88d8:	6923      	ldr	r3, [r4, #16]
 23f88da:	aa0b      	add	r2, sp, #44	; 0x2c
 23f88dc:	9309      	str	r3, [sp, #36]	; 0x24
 23f88de:	f8da 3000 	ldr.w	r3, [sl]
 23f88e2:	a91f      	add	r1, sp, #124	; 0x7c
 23f88e4:	e9cd 7305 	strd	r7, r3, [sp, #20]
 23f88e8:	f8d9 3000 	ldr.w	r3, [r9]
 23f88ec:	e9cd 6803 	strd	r6, r8, [sp, #12]
 23f88f0:	9302      	str	r3, [sp, #8]
 23f88f2:	ab13      	add	r3, sp, #76	; 0x4c
 23f88f4:	9301      	str	r3, [sp, #4]
 23f88f6:	682b      	ldr	r3, [r5, #0]
 23f88f8:	a80d      	add	r0, sp, #52	; 0x34
 23f88fa:	9300      	str	r3, [sp, #0]
 23f88fc:	ab0f      	add	r3, sp, #60	; 0x3c
 23f88fe:	f7fd ff0e 	bl	23f671e <arm_fully_connected_s8>
 23f8902:	4b08      	ldr	r3, [pc, #32]	; (23f8924 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x110>)
 23f8904:	e9cd 0b02 	strd	r0, fp, [sp, #8]
 23f8908:	9301      	str	r3, [sp, #4]
 23f890a:	4b07      	ldr	r3, [pc, #28]	; (23f8928 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x114>)
 23f890c:	4620      	mov	r0, r4
 23f890e:	9300      	str	r3, [sp, #0]
 23f8910:	4a06      	ldr	r2, [pc, #24]	; (23f892c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x118>)
 23f8912:	23f2      	movs	r3, #242	; 0xf2
 23f8914:	4906      	ldr	r1, [pc, #24]	; (23f8930 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x11c>)
 23f8916:	9c09      	ldr	r4, [sp, #36]	; 0x24
 23f8918:	47a0      	blx	r4
 23f891a:	2001      	movs	r0, #1
        ARM_CMSIS_NN_SUCCESS);
  }
#endif

  return kTfLiteOk;
}
 23f891c:	b02b      	add	sp, #172	; 0xac
 23f891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8922:	bf00      	nop
 23f8924:	023feff7 	.word	0x023feff7
 23f8928:	023ff00c 	.word	0x023ff00c
 23f892c:	023fef54 	.word	0x023fef54
 23f8930:	023fefdd 	.word	0x023fefdd

023f8934 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f8934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f8938:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f893a:	4604      	mov	r4, r0
 23f893c:	460d      	mov	r5, r1
 23f893e:	b088      	sub	sp, #32
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f8940:	b90b      	cbnz	r3, 23f8946 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12>
 23f8942:	f001 fc41 	bl	23fa1c8 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 23f8946:	4b1b      	ldr	r3, [pc, #108]	; (23f89b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>)
 23f8948:	681a      	ldr	r2, [r3, #0]
 23f894a:	f000 f9d3 	bl	23f8cf4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f894e:	4b1a      	ldr	r3, [pc, #104]	; (23f89b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>)
 23f8950:	4629      	mov	r1, r5
 23f8952:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 23f8954:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f8956:	4620      	mov	r0, r4
 23f8958:	f000 f9cc 	bl	23f8cf4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f895c:	4a17      	ldr	r2, [pc, #92]	; (23f89bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>)
 23f895e:	4629      	mov	r1, r5
 23f8960:	6812      	ldr	r2, [r2, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f8962:	9003      	str	r0, [sp, #12]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f8964:	4620      	mov	r0, r4
 23f8966:	f000 f9c5 	bl	23f8cf4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f896a:	4a15      	ldr	r2, [pc, #84]	; (23f89c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>)
 23f896c:	4629      	mov	r1, r5
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f896e:	4607      	mov	r7, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f8970:	6812      	ldr	r2, [r2, #0]
 23f8972:	4620      	mov	r0, r4
 23f8974:	f000 f9c0 	bl	23f8cf8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
 23f8978:	692d      	ldr	r5, [r5, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f897a:	4680      	mov	r8, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 23f897c:	2d00      	cmp	r5, #0
 23f897e:	d0e0      	beq.n	23f8942 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
      context, data.reference_op_data.filter_buffer_index, filter);
 23f8980:	9b03      	ldr	r3, [sp, #12]
 23f8982:	4621      	mov	r1, r4
 23f8984:	6a2a      	ldr	r2, [r5, #32]
 23f8986:	a805      	add	r0, sp, #20
 23f8988:	f000 f9d5 	bl	23f8d36 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 23f898c:	7a33      	ldrb	r3, [r6, #8]
 23f898e:	2b09      	cmp	r3, #9
 23f8990:	d10e      	bne.n	23f89b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<float>(output));
      break;
    }
    case kTfLiteInt8: {
      switch (filter_int8.type) {
 23f8992:	f89d 301c 	ldrb.w	r3, [sp, #28]
 23f8996:	2b09      	cmp	r3, #9
 23f8998:	d10a      	bne.n	23f89b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
#if EI_TFLITE_DISABLE_FULLY_CONNECTED_IN_I8
        MicroPrintf("Filter data type %s currently not supported.",
                              TfLiteTypeGetName(filter->type));
        return kTfLiteError;
#endif
          return EvalQuantizedInt8(context, node, data, input, &filter_int8,
 23f899a:	4632      	mov	r2, r6
 23f899c:	4629      	mov	r1, r5
 23f899e:	4620      	mov	r0, r4
 23f89a0:	e9cd 7800 	strd	r7, r8, [sp]
 23f89a4:	ab05      	add	r3, sp, #20
 23f89a6:	f7ff ff35 	bl	23f8814 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
                  input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
}
 23f89aa:	b008      	add	sp, #32
 23f89ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return kTfLiteError;
 23f89b0:	2001      	movs	r0, #1
 23f89b2:	e7fa      	b.n	23f89aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
 23f89b4:	023ff17c 	.word	0x023ff17c
 23f89b8:	023ff184 	.word	0x023ff184
 23f89bc:	023ff178 	.word	0x023ff178
 23f89c0:	023ff180 	.word	0x023ff180

023f89c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f89c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f89c8:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f89cc:	4605      	mov	r5, r0
 23f89ce:	460e      	mov	r6, r1
 23f89d0:	b09f      	sub	sp, #124	; 0x7c
  TFLITE_DCHECK(node->user_data != nullptr);
 23f89d2:	f1b8 0f00 	cmp.w	r8, #0
 23f89d6:	d101      	bne.n	23f89dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 23f89d8:	f001 fbf6 	bl	23fa1c8 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f89dc:	694b      	ldr	r3, [r1, #20]
 23f89de:	9305      	str	r3, [sp, #20]
 23f89e0:	2b00      	cmp	r3, #0
 23f89e2:	d0f9      	beq.n	23f89d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
 23f89e4:	6884      	ldr	r4, [r0, #8]
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 23f89e6:	4a7f      	ldr	r2, [pc, #508]	; (23f8be4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 23f89e8:	6823      	ldr	r3, [r4, #0]
 23f89ea:	4620      	mov	r0, r4
 23f89ec:	699b      	ldr	r3, [r3, #24]
 23f89ee:	6812      	ldr	r2, [r2, #0]
 23f89f0:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
 23f89f2:	4607      	mov	r7, r0
 23f89f4:	b960      	cbnz	r0, 23f8a10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
 23f89f6:	4b7c      	ldr	r3, [pc, #496]	; (23f8be8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 23f89f8:	692c      	ldr	r4, [r5, #16]
 23f89fa:	9300      	str	r3, [sp, #0]
 23f89fc:	2347      	movs	r3, #71	; 0x47
  TF_LITE_ENSURE(context, filter != nullptr);
 23f89fe:	4628      	mov	r0, r5
 23f8a00:	4a7a      	ldr	r2, [pc, #488]	; (23f8bec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 23f8a02:	497b      	ldr	r1, [pc, #492]	; (23f8bf0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 23f8a04:	47a0      	blx	r4
 23f8a06:	2601      	movs	r6, #1
}
 23f8a08:	4630      	mov	r0, r6
 23f8a0a:	b01f      	add	sp, #124	; 0x7c
 23f8a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      node, kFullyConnectedWeightsTensor);
 23f8a10:	6823      	ldr	r3, [r4, #0]
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 23f8a12:	4a78      	ldr	r2, [pc, #480]	; (23f8bf4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 23f8a14:	4631      	mov	r1, r6
 23f8a16:	4620      	mov	r0, r4
 23f8a18:	699b      	ldr	r3, [r3, #24]
 23f8a1a:	6812      	ldr	r2, [r2, #0]
 23f8a1c:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
 23f8a1e:	4681      	mov	r9, r0
 23f8a20:	b920      	cbnz	r0, 23f8a2c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 23f8a22:	4b75      	ldr	r3, [pc, #468]	; (23f8bf8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 23f8a24:	692c      	ldr	r4, [r5, #16]
 23f8a26:	9300      	str	r3, [sp, #0]
 23f8a28:	234a      	movs	r3, #74	; 0x4a
 23f8a2a:	e7e8      	b.n	23f89fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 23f8a2c:	6823      	ldr	r3, [r4, #0]
 23f8a2e:	4a73      	ldr	r2, [pc, #460]	; (23f8bfc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
 23f8a30:	4631      	mov	r1, r6
 23f8a32:	699b      	ldr	r3, [r3, #24]
 23f8a34:	6812      	ldr	r2, [r2, #0]
 23f8a36:	4620      	mov	r0, r4
 23f8a38:	4798      	blx	r3
      node, kFullyConnectedOutputTensor);
 23f8a3a:	6823      	ldr	r3, [r4, #0]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 23f8a3c:	4a70      	ldr	r2, [pc, #448]	; (23f8c00 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 23f8a3e:	9004      	str	r0, [sp, #16]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 23f8a40:	4631      	mov	r1, r6
 23f8a42:	4620      	mov	r0, r4
 23f8a44:	69db      	ldr	r3, [r3, #28]
 23f8a46:	6812      	ldr	r2, [r2, #0]
 23f8a48:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
 23f8a4a:	4682      	mov	sl, r0
 23f8a4c:	b920      	cbnz	r0, 23f8a58 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
 23f8a4e:	4b6d      	ldr	r3, [pc, #436]	; (23f8c04 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
 23f8a50:	692c      	ldr	r4, [r5, #16]
 23f8a52:	9300      	str	r3, [sp, #0]
 23f8a54:	234f      	movs	r3, #79	; 0x4f
 23f8a56:	e7d2      	b.n	23f89fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f8a58:	7838      	ldrb	r0, [r7, #0]
 23f8a5a:	f89a 3000 	ldrb.w	r3, [sl]
 23f8a5e:	4283      	cmp	r3, r0
 23f8a60:	d013      	beq.n	23f8a8a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 23f8a62:	692e      	ldr	r6, [r5, #16]
 23f8a64:	f7ff fc4a 	bl	23f82fc <TfLiteTypeGetName>
 23f8a68:	4604      	mov	r4, r0
 23f8a6a:	f89a 0000 	ldrb.w	r0, [sl]
 23f8a6e:	f7ff fc45 	bl	23f82fc <TfLiteTypeGetName>
 23f8a72:	4b65      	ldr	r3, [pc, #404]	; (23f8c08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
 23f8a74:	e9cd 4002 	strd	r4, r0, [sp, #8]
 23f8a78:	9301      	str	r3, [sp, #4]
 23f8a7a:	4b64      	ldr	r3, [pc, #400]	; (23f8c0c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
 23f8a7c:	4628      	mov	r0, r5
 23f8a7e:	9300      	str	r3, [sp, #0]
 23f8a80:	4a5a      	ldr	r2, [pc, #360]	; (23f8bec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 23f8a82:	2351      	movs	r3, #81	; 0x51
 23f8a84:	4962      	ldr	r1, [pc, #392]	; (23f8c10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
 23f8a86:	47b0      	blx	r6
 23f8a88:	e7bd      	b.n	23f8a06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  const RuntimeShape filter_shape = GetTensorShape(filter);
 23f8a8a:	4649      	mov	r1, r9
 23f8a8c:	a80c      	add	r0, sp, #48	; 0x30
 23f8a8e:	f7ff fea8 	bl	23f87e2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 23f8a92:	4651      	mov	r1, sl
 23f8a94:	a812      	add	r0, sp, #72	; 0x48
 23f8a96:	f7ff fea4 	bl	23f87e2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f8a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23f8a9c:	a80c      	add	r0, sp, #48	; 0x30
 23f8a9e:	3a01      	subs	r2, #1
 23f8aa0:	4611      	mov	r1, r2
 23f8aa2:	9207      	str	r2, [sp, #28]
 23f8aa4:	f7ff fe91 	bl	23f87ca <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = 1;
 23f8aa8:	2601      	movs	r6, #1
  int32_t DimensionsCount() const { return size_; }
 23f8aaa:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f8aae:	9008      	str	r0, [sp, #32]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 23f8ab0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 23f8ab4:	4619      	mov	r1, r3
 23f8ab6:	a812      	add	r0, sp, #72	; 0x48
 23f8ab8:	9306      	str	r3, [sp, #24]
  filter_dims.w = 1;
 23f8aba:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 23f8abe:	f7ff fe84 	bl	23f87ca <_ZNK6tflite12RuntimeShape4DimsEi>
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f8ac2:	9a07      	ldr	r2, [sp, #28]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 23f8ac4:	900b      	str	r0, [sp, #44]	; 0x2c
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f8ac6:	4611      	mov	r1, r2
 23f8ac8:	a80c      	add	r0, sp, #48	; 0x30
 23f8aca:	f7ff fe7e 	bl	23f87ca <_ZNK6tflite12RuntimeShape4DimsEi>
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 23f8ace:	9b06      	ldr	r3, [sp, #24]
 23f8ad0:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
 23f8ad4:	2b00      	cmp	r3, #0
 23f8ad6:	f6ff af7f 	blt.w	23f89d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
 23f8ada:	2200      	movs	r2, #0
 23f8adc:	a912      	add	r1, sp, #72	; 0x48
 23f8ade:	4593      	cmp	fp, r2
 23f8ae0:	d007      	beq.n	23f8af2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f8ae2:	4293      	cmp	r3, r2
 23f8ae4:	bf0c      	ite	eq
 23f8ae6:	2001      	moveq	r0, #1
 23f8ae8:	6848      	ldrne	r0, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
 23f8aea:	3201      	adds	r2, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f8aec:	4346      	muls	r6, r0
  for (int i = 0; i < dims_count; ++i) {
 23f8aee:	3104      	adds	r1, #4
 23f8af0:	e7f5      	b.n	23f8ade <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 23f8af2:	4619      	mov	r1, r3
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 23f8af4:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 23f8af8:	a812      	add	r0, sp, #72	; 0x48
 23f8afa:	f7ff fe66 	bl	23f87ca <_ZNK6tflite12RuntimeShape4DimsEi>
  data->buffer_idx = -1;
 23f8afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f8b02:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 23f8b06:	9b05      	ldr	r3, [sp, #20]
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 23f8b08:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 23f8b0c:	7819      	ldrb	r1, [r3, #0]
 23f8b0e:	9b04      	ldr	r3, [sp, #16]
 23f8b10:	783a      	ldrb	r2, [r7, #0]
 23f8b12:	4628      	mov	r0, r5
 23f8b14:	e9cd 9300 	strd	r9, r3, [sp]
 23f8b18:	e9cd a802 	strd	sl, r8, [sp, #8]
 23f8b1c:	463b      	mov	r3, r7
 23f8b1e:	f000 f88b 	bl	23f8c38 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 23f8b22:	4606      	mov	r6, r0
 23f8b24:	2800      	cmp	r0, #0
 23f8b26:	f47f af6f 	bne.w	23f8a08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
  if (input->type == kTfLiteInt16) {
 23f8b2a:	783b      	ldrb	r3, [r7, #0]
 23f8b2c:	2b07      	cmp	r3, #7
 23f8b2e:	f43f af6a 	beq.w	23f8a06 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  } else if (input->type == kTfLiteInt8) {
 23f8b32:	2b09      	cmp	r3, #9
 23f8b34:	d129      	bne.n	23f8b8a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
    const RuntimeShape input_shape = GetTensorShape(input);
 23f8b36:	4639      	mov	r1, r7
 23f8b38:	a818      	add	r0, sp, #96	; 0x60
    TFLITE_DCHECK_GE(output_dim_count, 2);
 23f8b3a:	f1ab 0b02 	sub.w	fp, fp, #2
    const RuntimeShape input_shape = GetTensorShape(input);
 23f8b3e:	f7ff fe50 	bl	23f87e2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_GE(output_dim_count, 2);
 23f8b42:	f1bb 0f02 	cmp.w	fp, #2
 23f8b46:	f63f af47 	bhi.w	23f89d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
 23f8b4a:	a808      	add	r0, sp, #32
 23f8b4c:	f7fd fe1b 	bl	23f6786 <arm_fully_connected_s8_get_buffer_size>
 23f8b50:	4683      	mov	fp, r0
  if (filter->type == kTfLiteInt4) {
 23f8b52:	f899 3000 	ldrb.w	r3, [r9]
 23f8b56:	2b12      	cmp	r3, #18
 23f8b58:	d11e      	bne.n	23f8b98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 23f8b5a:	f8d9 1008 	ldr.w	r1, [r9, #8]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f8b5e:	a819      	add	r0, sp, #100	; 0x64
 23f8b60:	f851 3b04 	ldr.w	r3, [r1], #4
 23f8b64:	009a      	lsls	r2, r3, #2
      : size_(dimensions_count) {
 23f8b66:	9318      	str	r3, [sp, #96]	; 0x60
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f8b68:	9305      	str	r3, [sp, #20]
 23f8b6a:	f003 fd1f 	bl	23fc5ac <memcpy>
  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
 23f8b6e:	2200      	movs	r2, #0
    int buffer_size = 1;
 23f8b70:	2101      	movs	r1, #1
 23f8b72:	9b05      	ldr	r3, [sp, #20]
 23f8b74:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
    for (int i = 0; i < size_; i++) {
 23f8b78:	4293      	cmp	r3, r2
 23f8b7a:	f10c 0c04 	add.w	ip, ip, #4
 23f8b7e:	dd06      	ble.n	23f8b8e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
      buffer_size *= dims_data[i];
 23f8b80:	f8dc 0000 	ldr.w	r0, [ip]
    for (int i = 0; i < size_; i++) {
 23f8b84:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 23f8b86:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
 23f8b88:	e7f6      	b.n	23f8b78 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b4>
  int32_t buf_size = 0;
 23f8b8a:	4683      	mov	fp, r0
 23f8b8c:	e7e1      	b.n	23f8b52 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    context->RequestScratchBufferInArena(
 23f8b8e:	4628      	mov	r0, r5
 23f8b90:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23f8b92:	f108 0220 	add.w	r2, r8, #32
 23f8b96:	4798      	blx	r3
  if (buf_size > 0) {
 23f8b98:	f1bb 0f00 	cmp.w	fp, #0
 23f8b9c:	dc18      	bgt.n	23f8bd0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
  micro_context->DeallocateTempTfLiteTensor(output);
 23f8b9e:	6823      	ldr	r3, [r4, #0]
 23f8ba0:	4651      	mov	r1, sl
 23f8ba2:	4620      	mov	r0, r4
 23f8ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f8ba6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 23f8ba8:	6823      	ldr	r3, [r4, #0]
 23f8baa:	4639      	mov	r1, r7
 23f8bac:	4620      	mov	r0, r4
 23f8bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f8bb0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 23f8bb2:	6823      	ldr	r3, [r4, #0]
 23f8bb4:	4649      	mov	r1, r9
 23f8bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f8bb8:	4620      	mov	r0, r4
 23f8bba:	4798      	blx	r3
  if (bias != nullptr) {
 23f8bbc:	9b04      	ldr	r3, [sp, #16]
 23f8bbe:	2b00      	cmp	r3, #0
 23f8bc0:	f43f af22 	beq.w	23f8a08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
    micro_context->DeallocateTempTfLiteTensor(bias);
 23f8bc4:	6823      	ldr	r3, [r4, #0]
 23f8bc6:	4620      	mov	r0, r4
 23f8bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f8bca:	9904      	ldr	r1, [sp, #16]
 23f8bcc:	4798      	blx	r3
 23f8bce:	e71b      	b.n	23f8a08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f8bd0:	4659      	mov	r1, fp
 23f8bd2:	4628      	mov	r0, r5
 23f8bd4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23f8bd6:	f108 022c 	add.w	r2, r8, #44	; 0x2c
 23f8bda:	4798      	blx	r3
 23f8bdc:	2800      	cmp	r0, #0
 23f8bde:	d0de      	beq.n	23f8b9e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
 23f8be0:	4606      	mov	r6, r0
  ~RuntimeShape() {}
 23f8be2:	e711      	b.n	23f8a08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 23f8be4:	023ff17c 	.word	0x023ff17c
 23f8be8:	023ff10e 	.word	0x023ff10e
 23f8bec:	023fef54 	.word	0x023fef54
 23f8bf0:	023feea0 	.word	0x023feea0
 23f8bf4:	023ff184 	.word	0x023ff184
 23f8bf8:	023ff11f 	.word	0x023ff11f
 23f8bfc:	023ff178 	.word	0x023ff178
 23f8c00:	023ff180 	.word	0x023ff180
 23f8c04:	023ff131 	.word	0x023ff131
 23f8c08:	023ff15d 	.word	0x023ff15d
 23f8c0c:	023ff16a 	.word	0x023ff16a
 23f8c10:	023ff143 	.word	0x023ff143

023f8c14 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 23f8c14:	2300      	movs	r3, #0
TfLiteRegistration Register_FULLY_CONNECTED() {
 23f8c16:	b513      	push	{r0, r1, r4, lr}
 23f8c18:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 23f8c1a:	9300      	str	r3, [sp, #0]
 23f8c1c:	4a03      	ldr	r2, [pc, #12]	; (23f8c2c <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x18>)
 23f8c1e:	4b04      	ldr	r3, [pc, #16]	; (23f8c30 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
 23f8c20:	4904      	ldr	r1, [pc, #16]	; (23f8c34 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x20>)
 23f8c22:	f000 f83f 	bl	23f8ca4 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
 23f8c26:	4620      	mov	r0, r4
 23f8c28:	b002      	add	sp, #8
 23f8c2a:	bd10      	pop	{r4, pc}
 23f8c2c:	023f89c5 	.word	0x023f89c5
 23f8c30:	023f8935 	.word	0x023f8935
 23f8c34:	023f8801 	.word	0x023f8801

023f8c38 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 23f8c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (data_type != kTfLiteFloat32) {
 23f8c3c:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 23f8c3e:	b085      	sub	sp, #20
 23f8c40:	4606      	mov	r6, r0
 23f8c42:	e9dd 840e 	ldrd	r8, r4, [sp, #56]	; 0x38
 23f8c46:	460f      	mov	r7, r1
 23f8c48:	461d      	mov	r5, r3
 23f8c4a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (data_type != kTfLiteFloat32) {
 23f8c4e:	d027      	beq.n	23f8ca0 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x68>
    double real_multiplier = 0.0;
 23f8c50:	2200      	movs	r2, #0
 23f8c52:	2300      	movs	r3, #0
 23f8c54:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f8c58:	ab02      	add	r3, sp, #8
 23f8c5a:	e9cd 8300 	strd	r8, r3, [sp]
 23f8c5e:	464a      	mov	r2, r9
 23f8c60:	4629      	mov	r1, r5
 23f8c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f8c64:	f7ff fbb8 	bl	23f83d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f8c68:	b9b8      	cbnz	r0, 23f8c9a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 23f8c6a:	4620      	mov	r0, r4
 23f8c6c:	1d21      	adds	r1, r4, #4
 23f8c6e:	ed9d 0b02 	vldr	d0, [sp, #8]
 23f8c72:	f7ff fca3 	bl	23f85bc <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 23f8c76:	692b      	ldr	r3, [r5, #16]
    // this is removed to fix #7125
    // TFLITE_DCHECK(filter->params.zero_point == 0);
    data->filter_zero_point = filter->params.zero_point;
    data->output_zero_point = output->params.zero_point;

    return CalculateActivationRangeQuantized(context, activation, output,
 23f8c78:	4642      	mov	r2, r8
    data->input_zero_point = input->params.zero_point;
 23f8c7a:	6163      	str	r3, [r4, #20]
    data->filter_zero_point = filter->params.zero_point;
 23f8c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f8c80:	4639      	mov	r1, r7
    data->filter_zero_point = filter->params.zero_point;
 23f8c82:	61a3      	str	r3, [r4, #24]
    data->output_zero_point = output->params.zero_point;
 23f8c84:	f8d8 3010 	ldr.w	r3, [r8, #16]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f8c88:	4630      	mov	r0, r6
    data->output_zero_point = output->params.zero_point;
 23f8c8a:	61e3      	str	r3, [r4, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f8c8c:	f104 030c 	add.w	r3, r4, #12
 23f8c90:	9300      	str	r3, [sp, #0]
 23f8c92:	f104 0308 	add.w	r3, r4, #8
 23f8c96:	f7ff fbf5 	bl	23f8484 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
 23f8c9a:	b005      	add	sp, #20
 23f8c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return kTfLiteOk;
 23f8ca0:	2000      	movs	r0, #0
 23f8ca2:	e7fa      	b.n	23f8c9a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x62>

023f8ca4 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 23f8ca4:	60c3      	str	r3, [r0, #12]
 23f8ca6:	2300      	movs	r3, #0
    void (*free)(TfLiteContext* context, void* buffer)) {
 23f8ca8:	b510      	push	{r4, lr}
          /*registration_external=*/nullptr};
 23f8caa:	6001      	str	r1, [r0, #0]
 23f8cac:	9902      	ldr	r1, [sp, #8]
 23f8cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f8cb2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 23f8cb6:	e9c0 3306 	strd	r3, r3, [r0, #24]
 23f8cba:	6203      	str	r3, [r0, #32]
}
 23f8cbc:	bd10      	pop	{r4, pc}

023f8cbe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 23f8cbe:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(context != nullptr);
 23f8cc0:	b908      	cbnz	r0, 23f8cc6 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f8cc2:	f001 fa81 	bl	23fa1c8 <abort>
  TFLITE_DCHECK(node != nullptr);
 23f8cc6:	2900      	cmp	r1, #0
 23f8cc8:	d0fb      	beq.n	23f8cc2 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 23f8cca:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
 23f8ccc:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f8cce:	4619      	mov	r1, r3
 23f8cd0:	f851 5b04 	ldr.w	r5, [r1], #4
  if (index >= 0 && index < max_size) {
 23f8cd4:	db0c      	blt.n	23f8cf0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
 23f8cd6:	4295      	cmp	r5, r2
 23f8cd8:	dd0a      	ble.n	23f8cf0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>

  if (tensor_index < 0) {
 23f8cda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23f8cde:	2900      	cmp	r1, #0
 23f8ce0:	db06      	blt.n	23f8cf0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    return nullptr;
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
}
 23f8ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f8ce6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 23f8cea:	6851      	ldr	r1, [r2, #4]
 23f8cec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f8cee:	4718      	bx	r3
}
 23f8cf0:	2000      	movs	r0, #0
 23f8cf2:	bd70      	pop	{r4, r5, r6, pc}

023f8cf4 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
 23f8cf4:	f7ff bfe3 	b.w	23f8cbe <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>

023f8cf8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 23f8cf8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f8cfa:	b908      	cbnz	r0, 23f8d00 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f8cfc:	f001 fa64 	bl	23fa1c8 <abort>
  TFLITE_DCHECK(node != nullptr);
 23f8d00:	2900      	cmp	r1, #0
 23f8d02:	d0fb      	beq.n	23f8cfc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
}
 23f8d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f8d08:	6849      	ldr	r1, [r1, #4]
 23f8d0a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f8d0c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f8d10:	6851      	ldr	r1, [r2, #4]
 23f8d12:	4718      	bx	r3

023f8d14 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 23f8d14:	b510      	push	{r4, lr}
 23f8d16:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 23f8d18:	b109      	cbz	r1, 23f8d1e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
 23f8d1a:	6849      	ldr	r1, [r1, #4]
 23f8d1c:	b919      	cbnz	r1, 23f8d26 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
 23f8d1e:	2300      	movs	r3, #0
 23f8d20:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f8d22:	4620      	mov	r0, r4
 23f8d24:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 23f8d26:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 23f8d2a:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f8d2e:	0092      	lsls	r2, r2, #2
 23f8d30:	f003 fc3c 	bl	23fc5ac <memcpy>
  }
 23f8d34:	e7f5      	b.n	23f8d22 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>

023f8d36 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 23f8d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f8d3a:	461d      	mov	r5, r3
  if (tensor->type != kTfLiteInt4) {
 23f8d3c:	7a1b      	ldrb	r3, [r3, #8]
                                        const TfLiteEvalTensor* tensor) {
 23f8d3e:	4604      	mov	r4, r0
  if (tensor->type != kTfLiteInt4) {
 23f8d40:	2b12      	cmp	r3, #18
                                        const TfLiteEvalTensor* tensor) {
 23f8d42:	4608      	mov	r0, r1
 23f8d44:	b086      	sub	sp, #24
 23f8d46:	4611      	mov	r1, r2
  if (tensor->type != kTfLiteInt4) {
 23f8d48:	d007      	beq.n	23f8d5a <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x24>
    return *tensor;
 23f8d4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23f8d4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
}
 23f8d52:	4620      	mov	r0, r4
 23f8d54:	b006      	add	sp, #24
 23f8d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      context->GetScratchBuffer(context, scratch_buffer_index));
 23f8d5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 23f8d5c:	4798      	blx	r3
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f8d5e:	e9d5 8700 	ldrd	r8, r7, [r5]
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 23f8d62:	4629      	mov	r1, r5
      context->GetScratchBuffer(context, scratch_buffer_index));
 23f8d64:	4606      	mov	r6, r0
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 23f8d66:	4668      	mov	r0, sp
 23f8d68:	f7ff ffd4 	bl	23f8d14 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
 23f8d6c:	466b      	mov	r3, sp
 23f8d6e:	2200      	movs	r2, #0
    int buffer_size = 1;
 23f8d70:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
 23f8d72:	9d00      	ldr	r5, [sp, #0]
 23f8d74:	4295      	cmp	r5, r2
 23f8d76:	f103 0304 	add.w	r3, r3, #4
 23f8d7a:	dd03      	ble.n	23f8d84 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x4e>
      buffer_size *= dims_data[i];
 23f8d7c:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < size_; i++) {
 23f8d7e:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 23f8d80:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
 23f8d82:	e7f7      	b.n	23f8d74 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x3e>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 23f8d84:	4632      	mov	r2, r6
 23f8d86:	4640      	mov	r0, r8
 23f8d88:	f7ff fc04 	bl	23f8594 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
  return new_tensor;
 23f8d8c:	2309      	movs	r3, #9
 23f8d8e:	e9c4 6700 	strd	r6, r7, [r4]
 23f8d92:	7223      	strb	r3, [r4, #8]
 23f8d94:	e7dd      	b.n	23f8d52 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x1c>

023f8d96 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
 23f8d96:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f8d98:	f04f 0c20 	mov.w	ip, #32
 23f8d9c:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23f8d9e:	b500      	push	{lr}
 23f8da0:	b08c      	sub	sp, #48	; 0x30
 23f8da2:	aa0d      	add	r2, sp, #52	; 0x34
 23f8da4:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f8da8:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8dac:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f8db0:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8db2:	6801      	ldr	r1, [r0, #0]
 23f8db4:	aa04      	add	r2, sp, #16
 23f8db6:	2032      	movs	r0, #50	; 0x32
 23f8db8:	f001 f87e 	bl	23f9eb8 <log_message_v>
}
 23f8dbc:	b00c      	add	sp, #48	; 0x30
 23f8dbe:	f85d eb04 	ldr.w	lr, [sp], #4
 23f8dc2:	b003      	add	sp, #12
 23f8dc4:	4770      	bx	lr

023f8dc6 <_ZN7NAU7802C1Ev>:
*/

#include "nau7802.h"

// Constructor
NAU7802::NAU7802()
 23f8dc6:	222a      	movs	r2, #42	; 0x2a
 23f8dc8:	7102      	strb	r2, [r0, #4]
 23f8dca:	2200      	movs	r2, #0
 23f8dcc:	6082      	str	r2, [r0, #8]
 23f8dce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 23f8dd2:	60c2      	str	r2, [r0, #12]
 23f8dd4:	22fa      	movs	r2, #250	; 0xfa
 23f8dd6:	6102      	str	r2, [r0, #16]
{
}
 23f8dd8:	4770      	bx	lr

023f8dda <_ZN7NAU780211isConnectedEv>:
}

// Returns true if device is present
// Tests for device ack to I2C address
bool NAU7802::isConnected()
{
 23f8dda:	b510      	push	{r4, lr}
 23f8ddc:	4604      	mov	r4, r0
    _i2cPort->beginTransmission(_deviceAddress);
 23f8dde:	7901      	ldrb	r1, [r0, #4]
 23f8de0:	6800      	ldr	r0, [r0, #0]
 23f8de2:	f001 fb87 	bl	23fa4f4 <_ZN7TwoWire17beginTransmissionEh>
    if (_i2cPort->endTransmission() != 0)
 23f8de6:	6820      	ldr	r0, [r4, #0]
 23f8de8:	f001 fb8c 	bl	23fa504 <_ZN7TwoWire15endTransmissionEv>
        return (false); // Sensor did not ACK
    return (true);      // All good
}
 23f8dec:	fab0 f080 	clz	r0, r0
 23f8df0:	0940      	lsrs	r0, r0, #5
 23f8df2:	bd10      	pop	{r4, pc}

023f8df4 <_ZN7NAU780220setCalibrationFactorEf>:

// Pass a known calibration factor into library. Helpful if users is loading settings from NVM.
// If you don't know your cal factor, call setZeroOffset(), then calculateCalibrationFactor() with a known weight
void NAU7802::setCalibrationFactor(float newCalFactor)
{
    _calibrationFactor = newCalFactor;
 23f8df4:	ed80 0a03 	vstr	s0, [r0, #12]
}
 23f8df8:	4770      	bx	lr

023f8dfa <_ZN7NAU780220getCalibrationFactorEv>:

float NAU7802::getCalibrationFactor()
{
    return (_calibrationFactor);
}
 23f8dfa:	ed90 0a03 	vldr	s0, [r0, #12]
 23f8dfe:	4770      	bx	lr

023f8e00 <_ZN7NAU780211getRegisterEh>:
    return (value);
}

// Get contents of a register
uint8_t NAU7802::getRegister(uint8_t registerAddress)
{
 23f8e00:	b538      	push	{r3, r4, r5, lr}
 23f8e02:	4604      	mov	r4, r0
 23f8e04:	460d      	mov	r5, r1
    _i2cPort->beginTransmission(_deviceAddress);
 23f8e06:	7901      	ldrb	r1, [r0, #4]
 23f8e08:	6800      	ldr	r0, [r0, #0]
 23f8e0a:	f001 fb73 	bl	23fa4f4 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(registerAddress);
 23f8e0e:	6820      	ldr	r0, [r4, #0]
 23f8e10:	4629      	mov	r1, r5
 23f8e12:	6803      	ldr	r3, [r0, #0]
 23f8e14:	689b      	ldr	r3, [r3, #8]
 23f8e16:	4798      	blx	r3
    if (_i2cPort->endTransmission() != 0)
 23f8e18:	6820      	ldr	r0, [r4, #0]
 23f8e1a:	f001 fb73 	bl	23fa504 <_ZN7TwoWire15endTransmissionEv>
 23f8e1e:	b108      	cbz	r0, 23f8e24 <_ZN7NAU780211getRegisterEh+0x24>
        return (-1); // Sensor did not ACK
 23f8e20:	20ff      	movs	r0, #255	; 0xff

    if (_i2cPort->available())
        return (_i2cPort->read());

    return (-1); // Error
}
 23f8e22:	bd38      	pop	{r3, r4, r5, pc}
    _i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)1);
 23f8e24:	2201      	movs	r2, #1
 23f8e26:	7921      	ldrb	r1, [r4, #4]
 23f8e28:	6820      	ldr	r0, [r4, #0]
 23f8e2a:	f001 fb60 	bl	23fa4ee <_ZN7TwoWire11requestFromEhj>
    if (_i2cPort->available())
 23f8e2e:	6820      	ldr	r0, [r4, #0]
 23f8e30:	6803      	ldr	r3, [r0, #0]
 23f8e32:	691b      	ldr	r3, [r3, #16]
 23f8e34:	4798      	blx	r3
 23f8e36:	2800      	cmp	r0, #0
 23f8e38:	d0f2      	beq.n	23f8e20 <_ZN7NAU780211getRegisterEh+0x20>
        return (_i2cPort->read());
 23f8e3a:	6820      	ldr	r0, [r4, #0]
 23f8e3c:	6803      	ldr	r3, [r0, #0]
 23f8e3e:	695b      	ldr	r3, [r3, #20]
 23f8e40:	4798      	blx	r3
 23f8e42:	b2c0      	uxtb	r0, r0
 23f8e44:	e7ed      	b.n	23f8e22 <_ZN7NAU780211getRegisterEh+0x22>

023f8e46 <_ZN7NAU78026getBitEhh>:
{
 23f8e46:	b510      	push	{r4, lr}
 23f8e48:	460c      	mov	r4, r1
    uint8_t value = getRegister(registerAddress);
 23f8e4a:	4611      	mov	r1, r2
 23f8e4c:	f7ff ffd8 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
    value &= (1 << bitNumber); // Clear all but this bit
 23f8e50:	2301      	movs	r3, #1
 23f8e52:	fa03 f104 	lsl.w	r1, r3, r4
 23f8e56:	4008      	ands	r0, r1
    return (value);
 23f8e58:	b240      	sxtb	r0, r0
}
 23f8e5a:	3800      	subs	r0, #0
 23f8e5c:	bf18      	it	ne
 23f8e5e:	2001      	movne	r0, #1
 23f8e60:	bd10      	pop	{r4, pc}

023f8e62 <_ZN7NAU78029availableEv>:
    return (getBit(NAU7802_PU_CTRL_CR, NAU7802_PU_CTRL));
 23f8e62:	2200      	movs	r2, #0
 23f8e64:	2105      	movs	r1, #5
 23f8e66:	f7ff bfee 	b.w	23f8e46 <_ZN7NAU78026getBitEhh>

023f8e6a <_ZN7NAU780212calAFEStatusEv>:
    if (getBit(NAU7802_CTRL2_CALS, NAU7802_CTRL2))
 23f8e6a:	2202      	movs	r2, #2
{
 23f8e6c:	b510      	push	{r4, lr}
    if (getBit(NAU7802_CTRL2_CALS, NAU7802_CTRL2))
 23f8e6e:	4611      	mov	r1, r2
{
 23f8e70:	4604      	mov	r4, r0
    if (getBit(NAU7802_CTRL2_CALS, NAU7802_CTRL2))
 23f8e72:	f7ff ffe8 	bl	23f8e46 <_ZN7NAU78026getBitEhh>
 23f8e76:	b948      	cbnz	r0, 23f8e8c <_ZN7NAU780212calAFEStatusEv+0x22>
    if (getBit(NAU7802_CTRL2_CAL_ERROR, NAU7802_CTRL2))
 23f8e78:	2202      	movs	r2, #2
 23f8e7a:	2103      	movs	r1, #3
 23f8e7c:	4620      	mov	r0, r4
 23f8e7e:	f7ff ffe2 	bl	23f8e46 <_ZN7NAU78026getBitEhh>
        return NAU7802_CAL_FAILURE;
 23f8e82:	2800      	cmp	r0, #0
 23f8e84:	bf0c      	ite	eq
 23f8e86:	2000      	moveq	r0, #0
 23f8e88:	2002      	movne	r0, #2
}
 23f8e8a:	bd10      	pop	{r4, pc}
        return NAU7802_CAL_IN_PROGRESS;
 23f8e8c:	2001      	movs	r0, #1
 23f8e8e:	e7fc      	b.n	23f8e8a <_ZN7NAU780212calAFEStatusEv+0x20>

023f8e90 <_ZN7NAU780219waitForCalibrateAFEEm>:
{
 23f8e90:	b570      	push	{r4, r5, r6, lr}
 23f8e92:	4606      	mov	r6, r0
 23f8e94:	460c      	mov	r4, r1
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f8e96:	f000 fe09 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
 23f8e9a:	4605      	mov	r5, r0
    while ((cal_ready = calAFEStatus()) == NAU7802_CAL_IN_PROGRESS)
 23f8e9c:	4630      	mov	r0, r6
 23f8e9e:	f7ff ffe4 	bl	23f8e6a <_ZN7NAU780212calAFEStatusEv>
 23f8ea2:	2801      	cmp	r0, #1
 23f8ea4:	d10b      	bne.n	23f8ebe <_ZN7NAU780219waitForCalibrateAFEEm+0x2e>
        if ((timeout_ms > 0) && ((millis() - startTime) > timeout_ms))
 23f8ea6:	b91c      	cbnz	r4, 23f8eb0 <_ZN7NAU780219waitForCalibrateAFEEm+0x20>
        delay(1);
 23f8ea8:	2001      	movs	r0, #1
 23f8eaa:	f001 f9d3 	bl	23fa254 <delay>
    while ((cal_ready = calAFEStatus()) == NAU7802_CAL_IN_PROGRESS)
 23f8eae:	e7f5      	b.n	23f8e9c <_ZN7NAU780219waitForCalibrateAFEEm+0xc>
 23f8eb0:	f000 fdfc 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
        if ((timeout_ms > 0) && ((millis() - startTime) > timeout_ms))
 23f8eb4:	1b43      	subs	r3, r0, r5
 23f8eb6:	42a3      	cmp	r3, r4
 23f8eb8:	d9f6      	bls.n	23f8ea8 <_ZN7NAU780219waitForCalibrateAFEEm+0x18>
    return (false);
 23f8eba:	2000      	movs	r0, #0
 23f8ebc:	e002      	b.n	23f8ec4 <_ZN7NAU780219waitForCalibrateAFEEm+0x34>
    if (cal_ready == NAU7802_CAL_SUCCESS)
 23f8ebe:	fab0 f080 	clz	r0, r0
 23f8ec2:	0940      	lsrs	r0, r0, #5
}
 23f8ec4:	bd70      	pop	{r4, r5, r6, pc}

023f8ec6 <_ZN7NAU780211setRegisterEhh>:

// Send a given value to be written to given address
// Return true if successful
bool NAU7802::setRegister(uint8_t registerAddress, uint8_t value)
{
 23f8ec6:	b570      	push	{r4, r5, r6, lr}
 23f8ec8:	4604      	mov	r4, r0
 23f8eca:	460e      	mov	r6, r1
 23f8ecc:	4615      	mov	r5, r2
    _i2cPort->beginTransmission(_deviceAddress);
 23f8ece:	7901      	ldrb	r1, [r0, #4]
 23f8ed0:	6800      	ldr	r0, [r0, #0]
 23f8ed2:	f001 fb0f 	bl	23fa4f4 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(registerAddress);
 23f8ed6:	6820      	ldr	r0, [r4, #0]
 23f8ed8:	4631      	mov	r1, r6
 23f8eda:	6803      	ldr	r3, [r0, #0]
 23f8edc:	689b      	ldr	r3, [r3, #8]
 23f8ede:	4798      	blx	r3
    _i2cPort->write(value);
 23f8ee0:	6820      	ldr	r0, [r4, #0]
 23f8ee2:	4629      	mov	r1, r5
 23f8ee4:	6803      	ldr	r3, [r0, #0]
 23f8ee6:	689b      	ldr	r3, [r3, #8]
 23f8ee8:	4798      	blx	r3
    if (_i2cPort->endTransmission() != 0)
 23f8eea:	6820      	ldr	r0, [r4, #0]
 23f8eec:	f001 fb0a 	bl	23fa504 <_ZN7TwoWire15endTransmissionEv>
        return (false); // Sensor did not ACK
    return (true);
}
 23f8ef0:	fab0 f080 	clz	r0, r0
 23f8ef4:	0940      	lsrs	r0, r0, #5
 23f8ef6:	bd70      	pop	{r4, r5, r6, pc}

023f8ef8 <_ZN7NAU780213setSampleRateEh>:
{
 23f8ef8:	b538      	push	{r3, r4, r5, lr}
 23f8efa:	460c      	mov	r4, r1
    uint8_t value = getRegister(NAU7802_CTRL2);
 23f8efc:	2102      	movs	r1, #2
{
 23f8efe:	4605      	mov	r5, r0
    uint8_t value = getRegister(NAU7802_CTRL2);
 23f8f00:	f7ff ff7e 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
    value |= rate << 4;  // Mask in new CRS bits
 23f8f04:	2c07      	cmp	r4, #7
 23f8f06:	bf28      	it	cs
 23f8f08:	2407      	movcs	r4, #7
    value &= 0b10001111; // Clear CRS bits
 23f8f0a:	f020 0270 	bic.w	r2, r0, #112	; 0x70
    value |= rate << 4;  // Mask in new CRS bits
 23f8f0e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    return (setRegister(NAU7802_CTRL2, value));
 23f8f12:	4628      	mov	r0, r5
}
 23f8f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return (setRegister(NAU7802_CTRL2, value));
 23f8f18:	2102      	movs	r1, #2
 23f8f1a:	b2d2      	uxtb	r2, r2
 23f8f1c:	f7ff bfd3 	b.w	23f8ec6 <_ZN7NAU780211setRegisterEhh>

023f8f20 <_ZN7NAU78027setGainEh>:
{
 23f8f20:	b538      	push	{r3, r4, r5, lr}
 23f8f22:	460d      	mov	r5, r1
    uint8_t value = getRegister(NAU7802_CTRL1);
 23f8f24:	2101      	movs	r1, #1
{
 23f8f26:	4604      	mov	r4, r0
    uint8_t value = getRegister(NAU7802_CTRL1);
 23f8f28:	f7ff ff6a 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
    value &= 0b11111000; // Clear gain bits
 23f8f2c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    return (setRegister(NAU7802_CTRL1, value));
 23f8f30:	2d07      	cmp	r5, #7
 23f8f32:	bf94      	ite	ls
 23f8f34:	432a      	orrls	r2, r5
 23f8f36:	f042 0207 	orrhi.w	r2, r2, #7
 23f8f3a:	4620      	mov	r0, r4
}
 23f8f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return (setRegister(NAU7802_CTRL1, value));
 23f8f40:	2101      	movs	r1, #1
 23f8f42:	f7ff bfc0 	b.w	23f8ec6 <_ZN7NAU780211setRegisterEhh>

023f8f46 <_ZN7NAU78026setBitEhh>:
{
 23f8f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f8f48:	460e      	mov	r6, r1
    value |= (1 << bitNumber); // Set this bit
 23f8f4a:	2401      	movs	r4, #1
{
 23f8f4c:	4611      	mov	r1, r2
 23f8f4e:	4605      	mov	r5, r0
    uint8_t value = getRegister(registerAddress);
 23f8f50:	9201      	str	r2, [sp, #4]
 23f8f52:	f7ff ff55 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
    value |= (1 << bitNumber); // Set this bit
 23f8f56:	fa04 f306 	lsl.w	r3, r4, r6
 23f8f5a:	4303      	orrs	r3, r0
    return (setRegister(registerAddress, value));
 23f8f5c:	4628      	mov	r0, r5
 23f8f5e:	9901      	ldr	r1, [sp, #4]
 23f8f60:	b2da      	uxtb	r2, r3
}
 23f8f62:	b002      	add	sp, #8
 23f8f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (setRegister(registerAddress, value));
 23f8f68:	f7ff bfad 	b.w	23f8ec6 <_ZN7NAU780211setRegisterEhh>

023f8f6c <_ZN7NAU78027powerUpEv>:
{
 23f8f6c:	b538      	push	{r3, r4, r5, lr}
 23f8f6e:	4605      	mov	r5, r0
    setBit(NAU7802_PU_CTRL_PUD, NAU7802_PU_CTRL);
 23f8f70:	2200      	movs	r2, #0
 23f8f72:	2101      	movs	r1, #1
 23f8f74:	f7ff ffe7 	bl	23f8f46 <_ZN7NAU78026setBitEhh>
    setBit(NAU7802_PU_CTRL_PUA, NAU7802_PU_CTRL);
 23f8f78:	2200      	movs	r2, #0
 23f8f7a:	2102      	movs	r1, #2
 23f8f7c:	4628      	mov	r0, r5
 23f8f7e:	f7ff ffe2 	bl	23f8f46 <_ZN7NAU78026setBitEhh>
 23f8f82:	2466      	movs	r4, #102	; 0x66
        if (getBit(NAU7802_PU_CTRL_PUR, NAU7802_PU_CTRL) == true)
 23f8f84:	2200      	movs	r2, #0
 23f8f86:	2103      	movs	r1, #3
 23f8f88:	4628      	mov	r0, r5
 23f8f8a:	f7ff ff5c 	bl	23f8e46 <_ZN7NAU78026getBitEhh>
 23f8f8e:	b940      	cbnz	r0, 23f8fa2 <_ZN7NAU78027powerUpEv+0x36>
        delay(1);
 23f8f90:	2001      	movs	r0, #1
        if (counter++ > 100)
 23f8f92:	3c01      	subs	r4, #1
        delay(1);
 23f8f94:	f001 f95e 	bl	23fa254 <delay>
        if (counter++ > 100)
 23f8f98:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23f8f9c:	d1f2      	bne.n	23f8f84 <_ZN7NAU78027powerUpEv+0x18>
}
 23f8f9e:	4620      	mov	r0, r4
 23f8fa0:	bd38      	pop	{r3, r4, r5, pc}
    return (setBit(NAU7802_PU_CTRL_CS, NAU7802_PU_CTRL)); // Set Cycle Start bit. See 9.1 point 5
 23f8fa2:	4628      	mov	r0, r5
}
 23f8fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return (setBit(NAU7802_PU_CTRL_CS, NAU7802_PU_CTRL)); // Set Cycle Start bit. See 9.1 point 5
 23f8fa8:	2200      	movs	r2, #0
 23f8faa:	2104      	movs	r1, #4
 23f8fac:	f7ff bfcb 	b.w	23f8f46 <_ZN7NAU78026setBitEhh>

023f8fb0 <_ZN7NAU780217beginCalibrateAFEE16NAU7802_Cal_Mode>:
{
 23f8fb0:	b538      	push	{r3, r4, r5, lr}
 23f8fb2:	460c      	mov	r4, r1
    uint8_t value = getRegister(NAU7802_CTRL2);
 23f8fb4:	2102      	movs	r1, #2
{
 23f8fb6:	4605      	mov	r5, r0
    uint8_t value = getRegister(NAU7802_CTRL2);
 23f8fb8:	f7ff ff22 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
    calMode &= 0x03;  // Limit mode to 2 bits
 23f8fbc:	f004 0403 	and.w	r4, r4, #3
    value &= 0xFC; // Clear CALMOD bits
 23f8fc0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    setRegister(NAU7802_CTRL2, value);
 23f8fc4:	ea40 0204 	orr.w	r2, r0, r4
 23f8fc8:	2102      	movs	r1, #2
 23f8fca:	4628      	mov	r0, r5
 23f8fcc:	f7ff ff7b 	bl	23f8ec6 <_ZN7NAU780211setRegisterEhh>
    setBit(NAU7802_CTRL2_CALS, NAU7802_CTRL2);
 23f8fd0:	2202      	movs	r2, #2
 23f8fd2:	4628      	mov	r0, r5
}
 23f8fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    setBit(NAU7802_CTRL2_CALS, NAU7802_CTRL2);
 23f8fd8:	4611      	mov	r1, r2
 23f8fda:	f7ff bfb4 	b.w	23f8f46 <_ZN7NAU78026setBitEhh>

023f8fde <_ZN7NAU780212calibrateAFEE16NAU7802_Cal_Mode>:
{
 23f8fde:	b510      	push	{r4, lr}
 23f8fe0:	4604      	mov	r4, r0
    beginCalibrateAFE(mode);
 23f8fe2:	f7ff ffe5 	bl	23f8fb0 <_ZN7NAU780217beginCalibrateAFEE16NAU7802_Cal_Mode>
    return waitForCalibrateAFE(1000);
 23f8fe6:	4620      	mov	r0, r4
}
 23f8fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return waitForCalibrateAFE(1000);
 23f8fec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 23f8ff0:	f7ff bf4e 	b.w	23f8e90 <_ZN7NAU780219waitForCalibrateAFEEm>

023f8ff4 <_ZN7NAU78026setLDOEh>:
{
 23f8ff4:	b538      	push	{r3, r4, r5, lr}
 23f8ff6:	460c      	mov	r4, r1
    uint8_t value = getRegister(NAU7802_CTRL1);
 23f8ff8:	2101      	movs	r1, #1
{
 23f8ffa:	4605      	mov	r5, r0
    uint8_t value = getRegister(NAU7802_CTRL1);
 23f8ffc:	f7ff ff00 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
    value |= ldoValue << 3; // Mask in new LDO bits
 23f9000:	2c07      	cmp	r4, #7
 23f9002:	bf28      	it	cs
 23f9004:	2407      	movcs	r4, #7
    value &= 0b11000111;    // Clear LDO bits
 23f9006:	f020 0238 	bic.w	r2, r0, #56	; 0x38
    value |= ldoValue << 3; // Mask in new LDO bits
 23f900a:	ea42 02c4 	orr.w	r2, r2, r4, lsl #3
    setRegister(NAU7802_CTRL1, value);
 23f900e:	2101      	movs	r1, #1
 23f9010:	4628      	mov	r0, r5
 23f9012:	b2d2      	uxtb	r2, r2
 23f9014:	f7ff ff57 	bl	23f8ec6 <_ZN7NAU780211setRegisterEhh>
    return (setBit(NAU7802_PU_CTRL_AVDDS, NAU7802_PU_CTRL)); // Enable the internal LDO
 23f9018:	4628      	mov	r0, r5
}
 23f901a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return (setBit(NAU7802_PU_CTRL_AVDDS, NAU7802_PU_CTRL)); // Enable the internal LDO
 23f901e:	2200      	movs	r2, #0
 23f9020:	2107      	movs	r1, #7
 23f9022:	f7ff bf90 	b.w	23f8f46 <_ZN7NAU78026setBitEhh>

023f9026 <_ZN7NAU78028clearBitEhh>:
{
 23f9026:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f9028:	460d      	mov	r5, r1
 23f902a:	4611      	mov	r1, r2
 23f902c:	4604      	mov	r4, r0
    uint8_t value = getRegister(registerAddress);
 23f902e:	9201      	str	r2, [sp, #4]
 23f9030:	f7ff fee6 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
    value &= ~(1 << bitNumber); // Set this bit
 23f9034:	2301      	movs	r3, #1
 23f9036:	fa03 f205 	lsl.w	r2, r3, r5
 23f903a:	ea20 0202 	bic.w	r2, r0, r2
    return (setRegister(registerAddress, value));
 23f903e:	4620      	mov	r0, r4
 23f9040:	9901      	ldr	r1, [sp, #4]
 23f9042:	b2d2      	uxtb	r2, r2
}
 23f9044:	b003      	add	sp, #12
 23f9046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return (setRegister(registerAddress, value));
 23f904a:	f7ff bf3c 	b.w	23f8ec6 <_ZN7NAU780211setRegisterEhh>

023f904e <_ZN7NAU78025resetEv>:
    setBit(NAU7802_PU_CTRL_RR, NAU7802_PU_CTRL); // Set RR
 23f904e:	2200      	movs	r2, #0
{
 23f9050:	b510      	push	{r4, lr}
    setBit(NAU7802_PU_CTRL_RR, NAU7802_PU_CTRL); // Set RR
 23f9052:	4611      	mov	r1, r2
{
 23f9054:	4604      	mov	r4, r0
    setBit(NAU7802_PU_CTRL_RR, NAU7802_PU_CTRL); // Set RR
 23f9056:	f7ff ff76 	bl	23f8f46 <_ZN7NAU78026setBitEhh>
    delay(1);
 23f905a:	2001      	movs	r0, #1
 23f905c:	f001 f8fa 	bl	23fa254 <delay>
    return (clearBit(NAU7802_PU_CTRL_RR, NAU7802_PU_CTRL)); // Clear RR to leave reset state
 23f9060:	2200      	movs	r2, #0
 23f9062:	4620      	mov	r0, r4
}
 23f9064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return (clearBit(NAU7802_PU_CTRL_RR, NAU7802_PU_CTRL)); // Clear RR to leave reset state
 23f9068:	4611      	mov	r1, r2
 23f906a:	f7ff bfdc 	b.w	23f9026 <_ZN7NAU78028clearBitEhh>

023f906e <_ZN7NAU780216get24BitRegisterEh>:

// Get contents of a 24-bit signed register (conversion result and offsets)
int32_t NAU7802::get24BitRegister(uint8_t registerAddress)
{
 23f906e:	b538      	push	{r3, r4, r5, lr}
 23f9070:	4604      	mov	r4, r0
 23f9072:	460d      	mov	r5, r1
    _i2cPort->beginTransmission(_deviceAddress);
 23f9074:	7901      	ldrb	r1, [r0, #4]
 23f9076:	6800      	ldr	r0, [r0, #0]
 23f9078:	f001 fa3c 	bl	23fa4f4 <_ZN7TwoWire17beginTransmissionEh>
    _i2cPort->write(registerAddress);
 23f907c:	6820      	ldr	r0, [r4, #0]
 23f907e:	4629      	mov	r1, r5
 23f9080:	6803      	ldr	r3, [r0, #0]
 23f9082:	689b      	ldr	r3, [r3, #8]
 23f9084:	4798      	blx	r3
    if (_i2cPort->endTransmission() != 0)
 23f9086:	6820      	ldr	r0, [r4, #0]
 23f9088:	f001 fa3c 	bl	23fa504 <_ZN7TwoWire15endTransmissionEv>
 23f908c:	b108      	cbz	r0, 23f9092 <_ZN7NAU780216get24BitRegisterEh+0x24>
        return (false); // Sensor did not ACK
 23f908e:	2000      	movs	r0, #0

        return (signedUnsigned32.signed32);
    }

    return (0); // Error
}
 23f9090:	bd38      	pop	{r3, r4, r5, pc}
    _i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)3);
 23f9092:	2203      	movs	r2, #3
 23f9094:	7921      	ldrb	r1, [r4, #4]
 23f9096:	6820      	ldr	r0, [r4, #0]
 23f9098:	f001 fa29 	bl	23fa4ee <_ZN7TwoWire11requestFromEhj>
    if (_i2cPort->available())
 23f909c:	6820      	ldr	r0, [r4, #0]
 23f909e:	6803      	ldr	r3, [r0, #0]
 23f90a0:	691b      	ldr	r3, [r3, #16]
 23f90a2:	4798      	blx	r3
 23f90a4:	2800      	cmp	r0, #0
 23f90a6:	d0f2      	beq.n	23f908e <_ZN7NAU780216get24BitRegisterEh+0x20>
        signedUnsigned32.unsigned32 = (uint32_t)_i2cPort->read() << 16; // MSB
 23f90a8:	6820      	ldr	r0, [r4, #0]
 23f90aa:	6803      	ldr	r3, [r0, #0]
 23f90ac:	695b      	ldr	r3, [r3, #20]
 23f90ae:	4798      	blx	r3
 23f90b0:	4605      	mov	r5, r0
        signedUnsigned32.unsigned32 |= (uint32_t)_i2cPort->read() << 8; // MidSB
 23f90b2:	6820      	ldr	r0, [r4, #0]
 23f90b4:	6803      	ldr	r3, [r0, #0]
 23f90b6:	695b      	ldr	r3, [r3, #20]
 23f90b8:	4798      	blx	r3
 23f90ba:	0203      	lsls	r3, r0, #8
        signedUnsigned32.unsigned32 |= (uint32_t)_i2cPort->read();      // LSB
 23f90bc:	6820      	ldr	r0, [r4, #0]
        signedUnsigned32.unsigned32 |= (uint32_t)_i2cPort->read() << 8; // MidSB
 23f90be:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
        signedUnsigned32.unsigned32 |= (uint32_t)_i2cPort->read();      // LSB
 23f90c2:	6803      	ldr	r3, [r0, #0]
 23f90c4:	695b      	ldr	r3, [r3, #20]
 23f90c6:	4798      	blx	r3
 23f90c8:	4328      	orrs	r0, r5
        if ((signedUnsigned32.unsigned32 & 0x00800000) == 0x00800000)
 23f90ca:	0203      	lsls	r3, r0, #8
            signedUnsigned32.unsigned32 |= 0xFF000000; // Preserve 2's complement
 23f90cc:	bf48      	it	mi
 23f90ce:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
        return (signedUnsigned32.signed32);
 23f90d2:	e7dd      	b.n	23f9090 <_ZN7NAU780216get24BitRegisterEh+0x22>

023f90d4 <_ZN7NAU780210getReadingEv>:
    return get24BitRegister(NAU7802_ADCO_B2);
 23f90d4:	2112      	movs	r1, #18
 23f90d6:	f7ff bfca 	b.w	23f906e <_ZN7NAU780216get24BitRegisterEh>
	...

023f90dc <_ZN7NAU780210getAverageEhm>:
{
 23f90dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f90e0:	4606      	mov	r6, r0
 23f90e2:	4688      	mov	r8, r1
 23f90e4:	4691      	mov	r9, r2
    uint8_t samplesAquired = 0;
 23f90e6:	2400      	movs	r4, #0
 23f90e8:	f000 fce0 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
    int32_t total = 0; // Readings are 24-bit. We're good to average 255 if needed
 23f90ec:	4625      	mov	r5, r4
 23f90ee:	4607      	mov	r7, r0
        if (available() == true)
 23f90f0:	4630      	mov	r0, r6
 23f90f2:	f7ff feb6 	bl	23f8e62 <_ZN7NAU78029availableEv>
 23f90f6:	b138      	cbz	r0, 23f9108 <_ZN7NAU780210getAverageEhm+0x2c>
            reading = getReading();
 23f90f8:	4630      	mov	r0, r6
 23f90fa:	f7ff ffeb 	bl	23f90d4 <_ZN7NAU780210getReadingEv>
            if (++samplesAquired == averageAmount)
 23f90fe:	3401      	adds	r4, #1
 23f9100:	b2e4      	uxtb	r4, r4
 23f9102:	4544      	cmp	r4, r8
            total += reading;
 23f9104:	4405      	add	r5, r0
            if (++samplesAquired == averageAmount)
 23f9106:	d00f      	beq.n	23f9128 <_ZN7NAU780210getAverageEhm+0x4c>
 23f9108:	f000 fcd0 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
        if (millis() - startTime > timeout_ms)
 23f910c:	1bc0      	subs	r0, r0, r7
 23f910e:	4548      	cmp	r0, r9
 23f9110:	d906      	bls.n	23f9120 <_ZN7NAU780210getAverageEhm+0x44>
            Log.error("Timed out getting average");
 23f9112:	4807      	ldr	r0, [pc, #28]	; (23f9130 <_ZN7NAU780210getAverageEhm+0x54>)
 23f9114:	4907      	ldr	r1, [pc, #28]	; (23f9134 <_ZN7NAU780210getAverageEhm+0x58>)
 23f9116:	f7ff fe3e 	bl	23f8d96 <_ZNK5spark6Logger5errorEPKcz>
            return 0;
 23f911a:	2000      	movs	r0, #0
}
 23f911c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        delay(1);
 23f9120:	2001      	movs	r0, #1
 23f9122:	f001 f897 	bl	23fa254 <delay>
        if (available() == true)
 23f9126:	e7e3      	b.n	23f90f0 <_ZN7NAU780210getAverageEhm+0x14>
    total /= averageAmount;
 23f9128:	fb95 f0f4 	sdiv	r0, r5, r4
    return (total);
 23f912c:	e7f6      	b.n	23f911c <_ZN7NAU780210getAverageEhm+0x40>
 23f912e:	bf00      	nop
 23f9130:	1007ae94 	.word	0x1007ae94
 23f9134:	023ff188 	.word	0x023ff188

023f9138 <_ZN7NAU780219calculateZeroOffsetEhm>:
{
 23f9138:	b510      	push	{r4, lr}
 23f913a:	4604      	mov	r4, r0
    setZeroOffset(getAverage(averageAmount, timeout_ms));
 23f913c:	f7ff ffce 	bl	23f90dc <_ZN7NAU780210getAverageEhm>
    _zeroOffset = newZeroOffset;
 23f9140:	60a0      	str	r0, [r4, #8]
}
 23f9142:	bd10      	pop	{r4, pc}

023f9144 <_ZN7NAU780226calculateCalibrationFactorEfhm>:
{
 23f9144:	b510      	push	{r4, lr}
 23f9146:	4604      	mov	r4, r0
 23f9148:	ed2d 8b02 	vpush	{d8}
 23f914c:	eeb0 8a40 	vmov.f32	s16, s0
    int32_t onScale = getAverage(averageAmount, timeout_ms);
 23f9150:	f7ff ffc4 	bl	23f90dc <_ZN7NAU780210getAverageEhm>
    float newCalFactor = ((float)(onScale - _zeroOffset)) / weightOnScale;
 23f9154:	68a3      	ldr	r3, [r4, #8]
 23f9156:	1ac3      	subs	r3, r0, r3
 23f9158:	ee07 3a90 	vmov	s15, r3
 23f915c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f9160:	ee87 7a88 	vdiv.f32	s14, s15, s16
}
 23f9164:	ecbd 8b02 	vpop	{d8}
    _calibrationFactor = newCalFactor;
 23f9168:	ed84 7a03 	vstr	s14, [r4, #12]
}
 23f916c:	bd10      	pop	{r4, pc}

023f916e <_ZN7NAU78029getWeightEbhm>:
{
 23f916e:	b538      	push	{r3, r4, r5, lr}
 23f9170:	4604      	mov	r4, r0
 23f9172:	460d      	mov	r5, r1
 23f9174:	4611      	mov	r1, r2
    int32_t onScale = getAverage(samplesToTake, timeout_ms);
 23f9176:	461a      	mov	r2, r3
 23f9178:	f7ff ffb0 	bl	23f90dc <_ZN7NAU780210getAverageEhm>
    if (allowNegativeWeights == false)
 23f917c:	68a3      	ldr	r3, [r4, #8]
 23f917e:	b915      	cbnz	r5, 23f9186 <_ZN7NAU78029getWeightEbhm+0x18>
        if (onScale < _zeroOffset)
 23f9180:	4298      	cmp	r0, r3
 23f9182:	bfb8      	it	lt
 23f9184:	4618      	movlt	r0, r3
    float weight = ((float)(onScale - _zeroOffset)) / _calibrationFactor;
 23f9186:	1ac3      	subs	r3, r0, r3
 23f9188:	ee07 3a90 	vmov	s15, r3
 23f918c:	ed94 0a03 	vldr	s0, [r4, #12]
 23f9190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 23f9194:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23f9198:	bd38      	pop	{r3, r4, r5, pc}

023f919a <_ZN7NAU78025beginER7TwoWireb>:
{
 23f919a:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
    _i2cPort = &wirePort;
 23f919e:	6001      	str	r1, [r0, #0]
{
 23f91a0:	4680      	mov	r8, r0
 23f91a2:	4614      	mov	r4, r2
    if (isConnected() == false)
 23f91a4:	f7ff fe19 	bl	23f8dda <_ZN7NAU780211isConnectedEv>
 23f91a8:	b118      	cbz	r0, 23f91b2 <_ZN7NAU78025beginER7TwoWireb+0x18>
    if (initialize)
 23f91aa:	b944      	cbnz	r4, 23f91be <_ZN7NAU78025beginER7TwoWireb+0x24>
    bool result = true; // Accumulate a result as we do the setup
 23f91ac:	2001      	movs	r0, #1
}
 23f91ae:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
        if (isConnected() == false)
 23f91b2:	4640      	mov	r0, r8
 23f91b4:	f7ff fe11 	bl	23f8dda <_ZN7NAU780211isConnectedEv>
 23f91b8:	2800      	cmp	r0, #0
 23f91ba:	d1f6      	bne.n	23f91aa <_ZN7NAU78025beginER7TwoWireb+0x10>
 23f91bc:	e7f7      	b.n	23f91ae <_ZN7NAU78025beginER7TwoWireb+0x14>
        result &= reset(); // Reset all registers
 23f91be:	4640      	mov	r0, r8
 23f91c0:	f7ff ff45 	bl	23f904e <_ZN7NAU78025resetEv>
 23f91c4:	4607      	mov	r7, r0
        result &= powerUp(); // Power on analog and digital sections of the scale
 23f91c6:	4640      	mov	r0, r8
 23f91c8:	f7ff fed0 	bl	23f8f6c <_ZN7NAU78027powerUpEv>
 23f91cc:	4038      	ands	r0, r7
        result &= setLDO(NAU7802_LDO_3V3); // Set LDO to 3.3V
 23f91ce:	2104      	movs	r1, #4
 23f91d0:	b2c5      	uxtb	r5, r0
 23f91d2:	4640      	mov	r0, r8
 23f91d4:	f7ff ff0e 	bl	23f8ff4 <_ZN7NAU78026setLDOEh>
        result &= setGain(NAU7802_GAIN_128); // Set gain to 128
 23f91d8:	2107      	movs	r1, #7
 23f91da:	4005      	ands	r5, r0
 23f91dc:	4640      	mov	r0, r8
 23f91de:	f7ff fe9f 	bl	23f8f20 <_ZN7NAU78027setGainEh>
        result &= setSampleRate(NAU7802_SPS_80); // Set samples per second to 10
 23f91e2:	2103      	movs	r1, #3
 23f91e4:	4005      	ands	r5, r0
 23f91e6:	4640      	mov	r0, r8
 23f91e8:	f7ff fe86 	bl	23f8ef8 <_ZN7NAU780213setSampleRateEh>
        uint8_t adc = getRegister(NAU7802_ADC);
 23f91ec:	2115      	movs	r1, #21
 23f91ee:	4005      	ands	r5, r0
 23f91f0:	4640      	mov	r0, r8
 23f91f2:	f7ff fe05 	bl	23f8e00 <_ZN7NAU780211getRegisterEh>
        adc |= 0x30;
 23f91f6:	f040 0030 	orr.w	r0, r0, #48	; 0x30
        result &= setRegister(NAU7802_ADC, adc);
 23f91fa:	b2c2      	uxtb	r2, r0
 23f91fc:	2115      	movs	r1, #21
 23f91fe:	4640      	mov	r0, r8
 23f9200:	f7ff fe61 	bl	23f8ec6 <_ZN7NAU780211setRegisterEhh>
        result &= setBit(NAU7802_PGA_PWR_PGA_CAP_EN, NAU7802_PGA_PWR); // Enable 330pF decoupling cap on chan 2. From 9.14 application circuit note.
 23f9204:	221c      	movs	r2, #28
 23f9206:	2107      	movs	r1, #7
 23f9208:	4005      	ands	r5, r0
 23f920a:	4640      	mov	r0, r8
 23f920c:	f7ff fe9b 	bl	23f8f46 <_ZN7NAU78026setBitEhh>
        result &= clearBit(NAU7802_PGA_LDOMODE, NAU7802_PGA); // Ensure LDOMODE bit is clear - improved accuracy and higher DC gain, with ESR < 1 ohm
 23f9210:	221b      	movs	r2, #27
 23f9212:	2106      	movs	r1, #6
 23f9214:	4005      	ands	r5, r0
 23f9216:	4640      	mov	r0, r8
 23f9218:	f7ff ff05 	bl	23f9026 <_ZN7NAU78028clearBitEhh>
 23f921c:	4005      	ands	r5, r0
        delay(_ldoRampDelay); // Wait for LDO to stabilize - takes about 200ms
 23f921e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 23f9222:	f001 f817 	bl	23fa254 <delay>
        getWeight(true, 10); // Flush
 23f9226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f922a:	220a      	movs	r2, #10
 23f922c:	2101      	movs	r1, #1
 23f922e:	4640      	mov	r0, r8
 23f9230:	f7ff ff9d 	bl	23f916e <_ZN7NAU78029getWeightEbhm>
        result &= calibrateAFE(); // Re-cal analog front end when we change gain, sample rate, or channel
 23f9234:	2100      	movs	r1, #0
 23f9236:	4640      	mov	r0, r8
 23f9238:	f7ff fed1 	bl	23f8fde <_ZN7NAU780212calibrateAFEE16NAU7802_Cal_Mode>
 23f923c:	4028      	ands	r0, r5
 23f923e:	e7b6      	b.n	23f91ae <_ZN7NAU78025beginER7TwoWireb+0x14>

023f9240 <_ZNK5spark6Logger4infoEPKcz>:
inline void spark::Logger::info(const char *fmt, ...) const {
 23f9240:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23f9242:	f04f 0c20 	mov.w	ip, #32
 23f9246:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23f9248:	b500      	push	{lr}
 23f924a:	b08c      	sub	sp, #48	; 0x30
 23f924c:	aa0d      	add	r2, sp, #52	; 0x34
 23f924e:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f9252:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f9256:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f925a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f925c:	6801      	ldr	r1, [r0, #0]
 23f925e:	aa04      	add	r2, sp, #16
 23f9260:	201e      	movs	r0, #30
 23f9262:	f000 fe29 	bl	23f9eb8 <log_message_v>
}
 23f9266:	b00c      	add	sp, #48	; 0x30
 23f9268:	f85d eb04 	ldr.w	lr, [sp], #4
 23f926c:	b003      	add	sp, #12
 23f926e:	4770      	bx	lr

023f9270 <_Z18readSystemSettingsv>:
// Create an array to take average of weights. This helps smooth out jitter.
float avgWeights[AVG_SIZE];
byte avgWeightIdx = 0;

void readSystemSettings(void)
{
 23f9270:	b507      	push	{r0, r1, r2, lr}
    float settingCalibrationFactor; // Value used to convert the load cell reading to lbs or kg
    // Look up the calibration factor
    EEPROM.get(LOCATION_CALIBRATION_FACTOR, settingCalibrationFactor);
 23f9272:	f002 fff5 	bl	23fc260 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23f9276:	2204      	movs	r2, #4
 23f9278:	2000      	movs	r0, #0
 23f927a:	eb0d 0102 	add.w	r1, sp, r2
 23f927e:	f000 fc31 	bl	23f9ae4 <HAL_EEPROM_Get>
    if (isnan(settingCalibrationFactor)) // Check if the retrieved float is NaN
 23f9282:	eddd 7a01 	vldr	s15, [sp, #4]
 23f9286:	eef4 7a67 	vcmp.f32	s15, s15
 23f928a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f928e:	d70e      	bvc.n	23f92ae <_Z18readSystemSettingsv+0x3e>
    {
        Log.info("No calibration factor found, setting default");
 23f9290:	490f      	ldr	r1, [pc, #60]	; (23f92d0 <_Z18readSystemSettingsv+0x60>)
 23f9292:	4810      	ldr	r0, [pc, #64]	; (23f92d4 <_Z18readSystemSettingsv+0x64>)
 23f9294:	f7ff ffd4 	bl	23f9240 <_ZNK5spark6Logger4infoEPKcz>
        settingsDetected = false;
        settingCalibrationFactor = 1.0; // Default to 1.0
 23f9298:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 23f929c:	9301      	str	r3, [sp, #4]
        EEPROM.put(LOCATION_CALIBRATION_FACTOR, settingCalibrationFactor);
 23f929e:	f002 ffdf 	bl	23fc260 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23f92a2:	2204      	movs	r2, #4
 23f92a4:	2000      	movs	r0, #0
 23f92a6:	eb0d 0102 	add.w	r1, sp, r2
 23f92aa:	f000 fc29 	bl	23f9b00 <HAL_EEPROM_Put>
    }
    Log.info("Setting calibration factor: %f", settingCalibrationFactor);
 23f92ae:	9801      	ldr	r0, [sp, #4]
 23f92b0:	f7fc fc3a 	bl	23f5b28 <__aeabi_f2d>
 23f92b4:	4602      	mov	r2, r0
 23f92b6:	460b      	mov	r3, r1
 23f92b8:	4806      	ldr	r0, [pc, #24]	; (23f92d4 <_Z18readSystemSettingsv+0x64>)
 23f92ba:	4907      	ldr	r1, [pc, #28]	; (23f92d8 <_Z18readSystemSettingsv+0x68>)
 23f92bc:	f7ff ffc0 	bl	23f9240 <_ZNK5spark6Logger4infoEPKcz>
    scale.setCalibrationFactor(settingCalibrationFactor);
 23f92c0:	ed9d 0a01 	vldr	s0, [sp, #4]
 23f92c4:	4805      	ldr	r0, [pc, #20]	; (23f92dc <_Z18readSystemSettingsv+0x6c>)
 23f92c6:	f7ff fd95 	bl	23f8df4 <_ZN7NAU780220setCalibrationFactorEf>
}
 23f92ca:	b003      	add	sp, #12
 23f92cc:	f85d fb04 	ldr.w	pc, [sp], #4
 23f92d0:	023ff1a2 	.word	0x023ff1a2
 23f92d4:	1007ae94 	.word	0x1007ae94
 23f92d8:	023ff1cf 	.word	0x023ff1cf
 23f92dc:	1007abf8 	.word	0x1007abf8

023f92e0 <_Z4tare6String>:

int tare(String command)
{
 23f92e0:	b570      	push	{r4, r5, r6, lr}
    scale.calculateZeroOffset(AVG_SIZE, 5000);
 23f92e2:	f241 3288 	movw	r2, #5000	; 0x1388
 23f92e6:	2119      	movs	r1, #25
 23f92e8:	4811      	ldr	r0, [pc, #68]	; (23f9330 <_Z4tare6String+0x50>)
 23f92ea:	f7ff ff25 	bl	23f9138 <_ZN7NAU780219calculateZeroOffsetEhm>
    delay(50);
 23f92ee:	2032      	movs	r0, #50	; 0x32
 23f92f0:	f000 ffb0 	bl	23fa254 <delay>
    scale.calculateZeroOffset(AVG_SIZE, 5000);
 23f92f4:	f241 3288 	movw	r2, #5000	; 0x1388
 23f92f8:	2119      	movs	r1, #25
 23f92fa:	480d      	ldr	r0, [pc, #52]	; (23f9330 <_Z4tare6String+0x50>)
 23f92fc:	f7ff ff1c 	bl	23f9138 <_ZN7NAU780219calculateZeroOffsetEhm>
    // scale.calibrateAFE(NAU7802_CALMOD_OFFSET);

    // Log.info("Zeroing scale: %ld", scale.getZeroOffset());
    isZeroed = true;
 23f9300:	2201      	movs	r2, #1
 23f9302:	4b0c      	ldr	r3, [pc, #48]	; (23f9334 <_Z4tare6String+0x54>)
    lastTareTime = millis();
 23f9304:	2419      	movs	r4, #25
    isZeroed = true;
 23f9306:	701a      	strb	r2, [r3, #0]
 23f9308:	f000 fbd0 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
    lastTareTime = millis();
 23f930c:	4b0a      	ldr	r3, [pc, #40]	; (23f9338 <_Z4tare6String+0x58>)
 23f930e:	4d0b      	ldr	r5, [pc, #44]	; (23f933c <_Z4tare6String+0x5c>)
    for (int x = 0; x < AVG_SIZE; x++)
        avgWeights[x] = scale.getWeight();
 23f9310:	4e07      	ldr	r6, [pc, #28]	; (23f9330 <_Z4tare6String+0x50>)
    lastTareTime = millis();
 23f9312:	6018      	str	r0, [r3, #0]
        avgWeights[x] = scale.getWeight();
 23f9314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f9318:	2208      	movs	r2, #8
 23f931a:	2100      	movs	r1, #0
 23f931c:	4630      	mov	r0, r6
 23f931e:	f7ff ff26 	bl	23f916e <_ZN7NAU78029getWeightEbhm>
    for (int x = 0; x < AVG_SIZE; x++)
 23f9322:	3c01      	subs	r4, #1
        avgWeights[x] = scale.getWeight();
 23f9324:	eca5 0a01 	vstmia	r5!, {s0}
    for (int x = 0; x < AVG_SIZE; x++)
 23f9328:	d1f4      	bne.n	23f9314 <_Z4tare6String+0x34>
    return 0;
}
 23f932a:	4620      	mov	r0, r4
 23f932c:	bd70      	pop	{r4, r5, r6, pc}
 23f932e:	bf00      	nop
 23f9330:	1007abf8 	.word	0x1007abf8
 23f9334:	1007ab90 	.word	0x1007ab90
 23f9338:	1007ab8c 	.word	0x1007ab8c
 23f933c:	1007ab94 	.word	0x1007ab94

023f9340 <_Z9calibrate6String>:

int calibrate(String command)
{
 23f9340:	b530      	push	{r4, r5, lr}
 23f9342:	ed2d 8b02 	vpush	{d8}
 23f9346:	b083      	sub	sp, #12
    float weightOnScale = atof(command);
 23f9348:	6800      	ldr	r0, [r0, #0]
 23f934a:	f003 f913 	bl	23fc574 <atof>
 23f934e:	ec51 0b10 	vmov	r0, r1, d0
 23f9352:	f7fc ff39 	bl	23f61c8 <__aeabi_d2f>
 23f9356:	ee08 0a10 	vmov	s16, r0
    Log.info("Calibrating with weight... %f", weightOnScale);
 23f935a:	f7fc fbe5 	bl	23f5b28 <__aeabi_f2d>
 23f935e:	4d17      	ldr	r5, [pc, #92]	; (23f93bc <_Z9calibrate6String+0x7c>)
    scale.calculateCalibrationFactor(weightOnScale);
 23f9360:	4c17      	ldr	r4, [pc, #92]	; (23f93c0 <_Z9calibrate6String+0x80>)
    Log.info("Calibrating with weight... %f", weightOnScale);
 23f9362:	460b      	mov	r3, r1
 23f9364:	4602      	mov	r2, r0
 23f9366:	4917      	ldr	r1, [pc, #92]	; (23f93c4 <_Z9calibrate6String+0x84>)
 23f9368:	4628      	mov	r0, r5
 23f936a:	f7ff ff69 	bl	23f9240 <_ZNK5spark6Logger4infoEPKcz>
    scale.calculateCalibrationFactor(weightOnScale);
 23f936e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23f9372:	2108      	movs	r1, #8
 23f9374:	eeb0 0a48 	vmov.f32	s0, s16
 23f9378:	4620      	mov	r0, r4
 23f937a:	f7ff fee3 	bl	23f9144 <_ZN7NAU780226calculateCalibrationFactorEfhm>
    EEPROM.put(LOCATION_CALIBRATION_FACTOR, scale.getCalibrationFactor());
 23f937e:	f002 ff6f 	bl	23fc260 <_Z21__fetch_global_EEPROMv>
 23f9382:	4620      	mov	r0, r4
 23f9384:	f7ff fd39 	bl	23f8dfa <_ZN7NAU780220getCalibrationFactorEv>
 23f9388:	2204      	movs	r2, #4
 23f938a:	2000      	movs	r0, #0
 23f938c:	eb0d 0102 	add.w	r1, sp, r2
 23f9390:	ed8d 0a01 	vstr	s0, [sp, #4]
 23f9394:	f000 fbb4 	bl	23f9b00 <HAL_EEPROM_Put>
    Log.info("Calibrated! %f", scale.getCalibrationFactor());
 23f9398:	4620      	mov	r0, r4
 23f939a:	f7ff fd2e 	bl	23f8dfa <_ZN7NAU780220getCalibrationFactorEv>
 23f939e:	ee10 0a10 	vmov	r0, s0
 23f93a2:	f7fc fbc1 	bl	23f5b28 <__aeabi_f2d>
 23f93a6:	4602      	mov	r2, r0
 23f93a8:	460b      	mov	r3, r1
 23f93aa:	4628      	mov	r0, r5
 23f93ac:	4906      	ldr	r1, [pc, #24]	; (23f93c8 <_Z9calibrate6String+0x88>)
 23f93ae:	f7ff ff47 	bl	23f9240 <_ZNK5spark6Logger4infoEPKcz>
    return 0;
}
 23f93b2:	2000      	movs	r0, #0
 23f93b4:	b003      	add	sp, #12
 23f93b6:	ecbd 8b02 	vpop	{d8}
 23f93ba:	bd30      	pop	{r4, r5, pc}
 23f93bc:	1007ae94 	.word	0x1007ae94
 23f93c0:	1007abf8 	.word	0x1007abf8
 23f93c4:	023ff1ee 	.word	0x023ff1ee
 23f93c8:	023ff20c 	.word	0x023ff20c

023f93cc <_Z9readScaleP12ScaleReading>:

void readScale(ScaleReading *reading)
{
 23f93cc:	b538      	push	{r3, r4, r5, lr}
 23f93ce:	4604      	mov	r4, r0
    if (scale.available() == true)
 23f93d0:	4817      	ldr	r0, [pc, #92]	; (23f9430 <_Z9readScaleP12ScaleReading+0x64>)
 23f93d2:	f7ff fd46 	bl	23f8e62 <_ZN7NAU78029availableEv>
 23f93d6:	b350      	cbz	r0, 23f942e <_Z9readScaleP12ScaleReading+0x62>
    {
        int32_t currentReading = scale.getReading();
 23f93d8:	4815      	ldr	r0, [pc, #84]	; (23f9430 <_Z9readScaleP12ScaleReading+0x64>)
 23f93da:	f7ff fe7b 	bl	23f90d4 <_ZN7NAU780210getReadingEv>
        float currentWeight = scale.getWeight(true);
 23f93de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f93e2:	2208      	movs	r2, #8
 23f93e4:	2101      	movs	r1, #1
        int32_t currentReading = scale.getReading();
 23f93e6:	4605      	mov	r5, r0
        float currentWeight = scale.getWeight(true);
 23f93e8:	4811      	ldr	r0, [pc, #68]	; (23f9430 <_Z9readScaleP12ScaleReading+0x64>)
 23f93ea:	f7ff fec0 	bl	23f916e <_ZN7NAU78029getWeightEbhm>

        avgWeights[avgWeightIdx++] = currentWeight;
 23f93ee:	4a11      	ldr	r2, [pc, #68]	; (23f9434 <_Z9readScaleP12ScaleReading+0x68>)
 23f93f0:	4911      	ldr	r1, [pc, #68]	; (23f9438 <_Z9readScaleP12ScaleReading+0x6c>)
 23f93f2:	7810      	ldrb	r0, [r2, #0]
        if (avgWeightIdx == AVG_SIZE)
            avgWeightIdx = 0;

        float avgWeight = 0;
 23f93f4:	eddf 7a11 	vldr	s15, [pc, #68]	; 23f943c <_Z9readScaleP12ScaleReading+0x70>
        avgWeights[avgWeightIdx++] = currentWeight;
 23f93f8:	1c43      	adds	r3, r0, #1
 23f93fa:	b2db      	uxtb	r3, r3
        if (avgWeightIdx == AVG_SIZE)
 23f93fc:	2b19      	cmp	r3, #25
        avgWeights[avgWeightIdx++] = currentWeight;
 23f93fe:	7013      	strb	r3, [r2, #0]
            avgWeightIdx = 0;
 23f9400:	bf08      	it	eq
 23f9402:	2300      	moveq	r3, #0
        avgWeights[avgWeightIdx++] = currentWeight;
 23f9404:	eb01 0180 	add.w	r1, r1, r0, lsl #2
            avgWeightIdx = 0;
 23f9408:	bf08      	it	eq
 23f940a:	7013      	strbeq	r3, [r2, #0]
        avgWeights[avgWeightIdx++] = currentWeight;
 23f940c:	ed81 0a00 	vstr	s0, [r1]
{
 23f9410:	2319      	movs	r3, #25
 23f9412:	4a09      	ldr	r2, [pc, #36]	; (23f9438 <_Z9readScaleP12ScaleReading+0x6c>)
        for (int x = 0; x < AVG_SIZE; x++)
            avgWeight += avgWeights[x];
 23f9414:	ecb2 7a01 	vldmia	r2!, {s14}
        for (int x = 0; x < AVG_SIZE; x++)
 23f9418:	3b01      	subs	r3, #1
            avgWeight += avgWeights[x];
 23f941a:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (int x = 0; x < AVG_SIZE; x++)
 23f941e:	d1f9      	bne.n	23f9414 <_Z9readScaleP12ScaleReading+0x48>
        avgWeight /= AVG_SIZE;
 23f9420:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 23f9424:	ee87 7aa6 	vdiv.f32	s14, s15, s13

        reading->raw = currentReading;
        reading->weight = avgWeight;
 23f9428:	ed84 7a00 	vstr	s14, [r4]
        reading->raw = currentReading;
 23f942c:	6065      	str	r5, [r4, #4]

        // Log.info("Calibration factor: %f, Zero offset: %ld", scale.getCalibrationFactor(), scale.getZeroOffset());
        // Log.info("delta: %ld", scale.getZeroOffset() - reading->raw);
    }
}
 23f942e:	bd38      	pop	{r3, r4, r5, pc}
 23f9430:	1007abf8 	.word	0x1007abf8
 23f9434:	1007ab91 	.word	0x1007ab91
 23f9438:	1007ab94 	.word	0x1007ab94
 23f943c:	00000000 	.word	0x00000000

023f9440 <_Z16getTimeSinceTarev>:
{
    return isZeroed;
}

unsigned long getTimeSinceTare()
{
 23f9440:	b508      	push	{r3, lr}
 23f9442:	f000 fb33 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
    return (millis() - lastTareTime);
 23f9446:	4b02      	ldr	r3, [pc, #8]	; (23f9450 <_Z16getTimeSinceTarev+0x10>)
 23f9448:	681b      	ldr	r3, [r3, #0]
}
 23f944a:	1ac0      	subs	r0, r0, r3
 23f944c:	bd08      	pop	{r3, pc}
 23f944e:	bf00      	nop
 23f9450:	1007ab8c 	.word	0x1007ab8c

023f9454 <_Z15initializeScalev>:

void initializeScale()
{
 23f9454:	b538      	push	{r3, r4, r5, lr}
    if (scale.begin() == false)
 23f9456:	f002 ff37 	bl	23fc2c8 <_Z19__fetch_global_Wirev>
 23f945a:	2201      	movs	r2, #1
 23f945c:	4601      	mov	r1, r0
 23f945e:	4819      	ldr	r0, [pc, #100]	; (23f94c4 <_Z15initializeScalev+0x70>)
 23f9460:	f7ff fe9b 	bl	23f919a <_ZN7NAU78025beginER7TwoWireb>
 23f9464:	b918      	cbnz	r0, 23f946e <_Z15initializeScalev+0x1a>
    {
        Log.info("Scale not detected. Please check wiring. Freezing...");
 23f9466:	4918      	ldr	r1, [pc, #96]	; (23f94c8 <_Z15initializeScalev+0x74>)
 23f9468:	4818      	ldr	r0, [pc, #96]	; (23f94cc <_Z15initializeScalev+0x78>)
 23f946a:	f7ff fee9 	bl	23f9240 <_ZNK5spark6Logger4infoEPKcz>
    }
    scale.setSampleRate(NAU7802_SPS_80); // Set sample rate: 10, 20, 40, 80 or 320
 23f946e:	2103      	movs	r1, #3
 23f9470:	4814      	ldr	r0, [pc, #80]	; (23f94c4 <_Z15initializeScalev+0x70>)
 23f9472:	f7ff fd41 	bl	23f8ef8 <_ZN7NAU780213setSampleRateEh>
    scale.setGain(NAU7802_GAIN_32);      // Gain can be set to 1, 2, 4, 8, 16, 32, 64, or 128.
 23f9476:	2105      	movs	r1, #5
 23f9478:	4812      	ldr	r0, [pc, #72]	; (23f94c4 <_Z15initializeScalev+0x70>)
 23f947a:	f7ff fd51 	bl	23f8f20 <_ZN7NAU78027setGainEh>
    scale.setLDO(NAU7802_LDO_3V0);       // Set LDO voltage. 3.0V is the best choice for Qwiic
 23f947e:	2105      	movs	r1, #5
 23f9480:	4810      	ldr	r0, [pc, #64]	; (23f94c4 <_Z15initializeScalev+0x70>)
 23f9482:	f7ff fdb7 	bl	23f8ff4 <_ZN7NAU78026setLDOEh>
    scale.calibrateAFE(NAU7802_CALMOD_INTERNAL);
 23f9486:	2100      	movs	r1, #0
 23f9488:	480e      	ldr	r0, [pc, #56]	; (23f94c4 <_Z15initializeScalev+0x70>)
 23f948a:	f7ff fda8 	bl	23f8fde <_ZN7NAU780212calibrateAFEE16NAU7802_Cal_Mode>
    EEPROM.begin();
 23f948e:	f002 fee7 	bl	23fc260 <_Z21__fetch_global_EEPROMv>
    readSystemSettings(); // Load zeroOffset and calibrationFactor from EEPROM
 23f9492:	f7ff feed 	bl	23f9270 <_Z18readSystemSettingsv>

    delay(500);
 23f9496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f949a:	f000 fedb 	bl	23fa254 <delay>
 23f949e:	240a      	movs	r4, #10
    // Take 10 readings to flush out readings
    for (uint8_t i = 0; i < 10; i++)
    {
        while (!scale.available())
 23f94a0:	4d08      	ldr	r5, [pc, #32]	; (23f94c4 <_Z15initializeScalev+0x70>)
 23f94a2:	4808      	ldr	r0, [pc, #32]	; (23f94c4 <_Z15initializeScalev+0x70>)
 23f94a4:	f7ff fcdd 	bl	23f8e62 <_ZN7NAU78029availableEv>
 23f94a8:	b918      	cbnz	r0, 23f94b2 <_Z15initializeScalev+0x5e>
            delay(1);
 23f94aa:	2001      	movs	r0, #1
 23f94ac:	f000 fed2 	bl	23fa254 <delay>
        while (!scale.available())
 23f94b0:	e7f7      	b.n	23f94a2 <_Z15initializeScalev+0x4e>
        scale.getReading();
 23f94b2:	4628      	mov	r0, r5
    for (uint8_t i = 0; i < 10; i++)
 23f94b4:	3c01      	subs	r4, #1
        scale.getReading();
 23f94b6:	f7ff fe0d 	bl	23f90d4 <_ZN7NAU780210getReadingEv>
    for (uint8_t i = 0; i < 10; i++)
 23f94ba:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23f94be:	d1f0      	bne.n	23f94a2 <_Z15initializeScalev+0x4e>
    }
 23f94c0:	bd38      	pop	{r3, r4, r5, pc}
 23f94c2:	bf00      	nop
 23f94c4:	1007abf8 	.word	0x1007abf8
 23f94c8:	023ff21b 	.word	0x023ff21b
 23f94cc:	1007ae94 	.word	0x1007ae94

023f94d0 <_GLOBAL__sub_I_scale>:
NAU7802 scale;
 23f94d0:	4801      	ldr	r0, [pc, #4]	; (23f94d8 <_GLOBAL__sub_I_scale+0x8>)
 23f94d2:	f7ff bc78 	b.w	23f8dc6 <_ZN7NAU7802C1Ev>
 23f94d6:	bf00      	nop
 23f94d8:	1007abf8 	.word	0x1007abf8

023f94dc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f94dc:	b530      	push	{r4, r5, lr}
  tensor->type = tensorData[i].type;
 23f94de:	2418      	movs	r4, #24
static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
 23f94e0:	460b      	mov	r3, r1
  tensor->type = tensorData[i].type;
 23f94e2:	4344      	muls	r4, r0
 23f94e4:	4915      	ldr	r1, [pc, #84]	; (23f953c <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x60>)
 23f94e6:	190a      	adds	r2, r1, r4
 23f94e8:	7855      	ldrb	r5, [r2, #1]
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
 23f94ea:	5d0c      	ldrb	r4, [r1, r4]
  tensor->type = tensorData[i].type;
 23f94ec:	701d      	strb	r5, [r3, #0]
  tensor->is_variable = false;
 23f94ee:	2500      	movs	r5, #0
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
 23f94f0:	2c02      	cmp	r4, #2
  tensor->allocation_type = tensorData[i].allocation_type;
 23f94f2:	751c      	strb	r4, [r3, #20]
  tensor->is_variable = false;
 23f94f4:	f883 502d 	strb.w	r5, [r3, #45]	; 0x2d
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f94f8:	bf08      	it	eq
 23f94fa:	4c11      	ldreq	r4, [pc, #68]	; (23f9540 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x64>)
  tensor->bytes = tensorData[i].bytes;
 23f94fc:	68d5      	ldr	r5, [r2, #12]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f94fe:	bf08      	it	eq
 23f9500:	6824      	ldreq	r4, [r4, #0]
  tensor->bytes = tensorData[i].bytes;
 23f9502:	619d      	str	r5, [r3, #24]
  tensor->dims = tensorData[i].dims;
 23f9504:	6895      	ldr	r5, [r2, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f9506:	6852      	ldr	r2, [r2, #4]
  tensor->dims = tensorData[i].dims;
 23f9508:	609d      	str	r5, [r3, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f950a:	bf08      	it	eq
 23f950c:	1912      	addeq	r2, r2, r4

    tensor->data.data =  start;
 23f950e:	605a      	str	r2, [r3, #4]
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
 23f9510:	2218      	movs	r2, #24
 23f9512:	fb02 1200 	mla	r2, r2, r0, r1
 23f9516:	6951      	ldr	r1, [r2, #20]
 23f9518:	6910      	ldr	r0, [r2, #16]
 23f951a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 23f951e:	e884 0003 	stmia.w	r4, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 23f9522:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 23f9526:	2901      	cmp	r1, #1
 23f9528:	d106      	bne.n	23f9538 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x5c>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 23f952a:	6952      	ldr	r2, [r2, #20]
    tensor->params.scale = quant->scale->data[0];
 23f952c:	6811      	ldr	r1, [r2, #0]
 23f952e:	6849      	ldr	r1, [r1, #4]
 23f9530:	60d9      	str	r1, [r3, #12]
    tensor->params.zero_point = quant->zero_point->data[0];
 23f9532:	6852      	ldr	r2, [r2, #4]
 23f9534:	6852      	ldr	r2, [r2, #4]
 23f9536:	611a      	str	r2, [r3, #16]
  }

}
 23f9538:	bd30      	pop	{r4, r5, pc}
 23f953a:	bf00      	nop
 23f953c:	1007a324 	.word	0x1007a324
 23f9540:	1007ac0c 	.word	0x1007ac0c

023f9544 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
 23f9544:	4b04      	ldr	r3, [pc, #16]	; (23f9558 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x14>)
 23f9546:	681b      	ldr	r3, [r3, #0]
 23f9548:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
 23f954a:	bfa3      	ittte	ge
 23f954c:	4b03      	ldrge	r3, [pc, #12]	; (23f955c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x18>)
 23f954e:	eb03 01c1 	addge.w	r1, r3, r1, lsl #3
 23f9552:	6848      	ldrge	r0, [r1, #4]
    return NULL;
 23f9554:	2000      	movlt	r0, #0
}
 23f9556:	4770      	bx	lr
 23f9558:	1007ae30 	.word	0x1007ae30
 23f955c:	1007ade0 	.word	0x1007ade0

023f9560 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>:

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
 23f9560:	f647 73ff 	movw	r3, #32767	; 0x7fff
 23f9564:	4a07      	ldr	r2, [pc, #28]	; (23f9584 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x24>)
 23f9566:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 23f956a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23f956e:	f8a2 30c8 	strh.w	r3, [r2, #200]	; 0xc8
 23f9572:	f8a2 310c 	strh.w	r3, [r2, #268]	; 0x10c
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
 23f9576:	4a04      	ldr	r2, [pc, #16]	; (23f9588 <_ZN12_GLOBAL__N_1L12ResetTensorsEv+0x28>)
 23f9578:	8193      	strh	r3, [r2, #12]
 23f957a:	8393      	strh	r3, [r2, #28]
 23f957c:	8593      	strh	r3, [r2, #44]	; 0x2c
 23f957e:	8793      	strh	r3, [r2, #60]	; 0x3c
  }
}
 23f9580:	4770      	bx	lr
 23f9582:	bf00      	nop
 23f9584:	1007ac90 	.word	0x1007ac90
 23f9588:	1007ada0 	.word	0x1007ada0

023f958c <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
 23f958c:	2000      	movs	r0, #0
 23f958e:	f7ff bfd9 	b.w	23f9544 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>

023f9592 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
 23f9592:	4770      	bx	lr

023f9594 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:
                                       int tensor_idx) {
 23f9594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 23f9596:	4b1b      	ldr	r3, [pc, #108]	; (23f9604 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x70>)
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f9598:	f647 75ff 	movw	r5, #32767	; 0x7fff
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 23f959c:	681a      	ldr	r2, [r3, #0]
 23f959e:	4b1a      	ldr	r3, [pc, #104]	; (23f9608 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x74>)
 23f95a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23f95a4:	4a19      	ldr	r2, [pc, #100]	; (23f960c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x78>)
 23f95a6:	440b      	add	r3, r1
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f95a8:	4614      	mov	r4, r2
 23f95aa:	2100      	movs	r1, #0
    if (tflEvalTensors[ix].index == tensor_idx) {
 23f95ac:	f9b2 000c 	ldrsh.w	r0, [r2, #12]
 23f95b0:	4298      	cmp	r0, r3
 23f95b2:	d102      	bne.n	23f95ba <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x26>
      return &tflEvalTensors[ix].tensor;
 23f95b4:	eb04 1001 	add.w	r0, r4, r1, lsl #4
}
 23f95b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
 23f95ba:	42a8      	cmp	r0, r5
 23f95bc:	d117      	bne.n	23f95ee <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x5a>
  tensor->type = tensorData[i].type;
 23f95be:	2218      	movs	r2, #24
 23f95c0:	435a      	muls	r2, r3
 23f95c2:	4e13      	ldr	r6, [pc, #76]	; (23f9610 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x7c>)
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
 23f95c4:	010d      	lsls	r5, r1, #4
 23f95c6:	eb04 1001 	add.w	r0, r4, r1, lsl #4
  tensor->type = tensorData[i].type;
 23f95ca:	18b1      	adds	r1, r6, r2
  if(allocation_type == kTfLiteArenaRw) {
 23f95cc:	5cb2      	ldrb	r2, [r6, r2]
  tensor->type = tensorData[i].type;
 23f95ce:	784f      	ldrb	r7, [r1, #1]
  if(allocation_type == kTfLiteArenaRw) {
 23f95d0:	2a02      	cmp	r2, #2
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f95d2:	bf08      	it	eq
 23f95d4:	4a0f      	ldreq	r2, [pc, #60]	; (23f9614 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x80>)
  tensor->type = tensorData[i].type;
 23f95d6:	7207      	strb	r7, [r0, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f95d8:	bf08      	it	eq
 23f95da:	6812      	ldreq	r2, [r2, #0]
  tensor->dims = tensorData[i].dims;
 23f95dc:	688f      	ldr	r7, [r1, #8]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f95de:	6849      	ldr	r1, [r1, #4]
  tensor->dims = tensorData[i].dims;
 23f95e0:	6047      	str	r7, [r0, #4]
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 23f95e2:	bf08      	it	eq
 23f95e4:	1889      	addeq	r1, r1, r2
    tensor->data.data =  start;
 23f95e6:	1962      	adds	r2, r4, r5
 23f95e8:	5161      	str	r1, [r4, r5]
      tflEvalTensors[ix].index = tensor_idx;
 23f95ea:	8193      	strh	r3, [r2, #12]
      return &tflEvalTensors[ix].tensor;
 23f95ec:	e7e4      	b.n	23f95b8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x24>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
 23f95ee:	3101      	adds	r1, #1
 23f95f0:	2904      	cmp	r1, #4
 23f95f2:	f102 0210 	add.w	r2, r2, #16
 23f95f6:	d1d9      	bne.n	23f95ac <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x18>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
 23f95f8:	4807      	ldr	r0, [pc, #28]	; (23f9618 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x84>)
 23f95fa:	f7fe fda5 	bl	23f8148 <_Z9ei_printfPKcz>
  return nullptr;
 23f95fe:	2000      	movs	r0, #0
 23f9600:	e7da      	b.n	23f95b8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x24>
 23f9602:	bf00      	nop
 23f9604:	1007ac34 	.word	0x1007ac34
 23f9608:	023ff910 	.word	0x023ff910
 23f960c:	1007ada0 	.word	0x1007ada0
 23f9610:	1007a324 	.word	0x1007a324
 23f9614:	1007ac0c 	.word	0x1007ac0c
 23f9618:	023ff250 	.word	0x023ff250

023f961c <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
 23f961c:	2000      	movs	r0, #0
 23f961e:	f7ff bfb9 	b.w	23f9594 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
	...

023f9624 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:
                               int tensor_idx) {
 23f9624:	b538      	push	{r3, r4, r5, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 23f9626:	4b15      	ldr	r3, [pc, #84]	; (23f967c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x58>)
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f9628:	f647 70ff 	movw	r0, #32767	; 0x7fff
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
 23f962c:	681a      	ldr	r2, [r3, #0]
 23f962e:	4b14      	ldr	r3, [pc, #80]	; (23f9680 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x5c>)
 23f9630:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 23f9634:	4b13      	ldr	r3, [pc, #76]	; (23f9684 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x60>)
 23f9636:	440d      	add	r5, r1
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f9638:	461c      	mov	r4, r3
 23f963a:	2100      	movs	r1, #0
    if (tflTensors[ix].index == tensor_idx) {
 23f963c:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 23f9640:	42aa      	cmp	r2, r5
 23f9642:	d104      	bne.n	23f964e <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x2a>
      return &tflTensors[ix].tensor;
 23f9644:	2344      	movs	r3, #68	; 0x44
 23f9646:	fb03 4401 	mla	r4, r3, r1, r4
}
 23f964a:	4620      	mov	r0, r4
 23f964c:	bd38      	pop	{r3, r4, r5, pc}
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
 23f964e:	4282      	cmp	r2, r0
 23f9650:	d109      	bne.n	23f9666 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x42>
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
 23f9652:	2344      	movs	r3, #68	; 0x44
 23f9654:	fb03 4401 	mla	r4, r3, r1, r4
 23f9658:	4628      	mov	r0, r5
 23f965a:	4621      	mov	r1, r4
 23f965c:	f7ff ff3e 	bl	23f94dc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
 23f9660:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      return &tflTensors[ix].tensor;
 23f9664:	e7f1      	b.n	23f964a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x26>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
 23f9666:	3101      	adds	r1, #1
 23f9668:	2904      	cmp	r1, #4
 23f966a:	f103 0344 	add.w	r3, r3, #68	; 0x44
 23f966e:	d1e5      	bne.n	23f963c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x18>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
 23f9670:	4805      	ldr	r0, [pc, #20]	; (23f9688 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x64>)
 23f9672:	f7fe fd69 	bl	23f8148 <_Z9ei_printfPKcz>
  return nullptr;
 23f9676:	2400      	movs	r4, #0
 23f9678:	e7e7      	b.n	23f964a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x26>
 23f967a:	bf00      	nop
 23f967c:	1007ac34 	.word	0x1007ac34
 23f9680:	023ff910 	.word	0x023ff910
 23f9684:	1007ac90 	.word	0x1007ac90
 23f9688:	023ff286 	.word	0x023ff286

023f968c <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
    return GetTensorImpl(nullptr, tensor_index);
 23f968c:	2000      	movs	r0, #0
 23f968e:	f7ff bfc9 	b.w	23f9624 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
	...

023f9694 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:
                                       size_t bytes) {
 23f9694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f9696:	460a      	mov	r2, r1
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 23f9698:	f011 030f 	ands.w	r3, r1, #15
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 23f969c:	491a      	ldr	r1, [pc, #104]	; (23f9708 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x74>)
 23f969e:	481b      	ldr	r0, [pc, #108]	; (23f970c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x78>)
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
 23f96a0:	bf18      	it	ne
 23f96a2:	f1c3 0310 	rsbne	r3, r3, #16
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
 23f96a6:	680c      	ldr	r4, [r1, #0]
 23f96a8:	6800      	ldr	r0, [r0, #0]
 23f96aa:	4413      	add	r3, r2
 23f96ac:	1ae3      	subs	r3, r4, r3
 23f96ae:	4298      	cmp	r0, r3
 23f96b0:	d91f      	bls.n	23f96f2 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x5e>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
 23f96b2:	4d17      	ldr	r5, [pc, #92]	; (23f9710 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x7c>)
 23f96b4:	682b      	ldr	r3, [r5, #0]
 23f96b6:	2b09      	cmp	r3, #9
 23f96b8:	d907      	bls.n	23f96ca <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x36>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
 23f96ba:	4611      	mov	r1, r2
 23f96bc:	4815      	ldr	r0, [pc, #84]	; (23f9714 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x80>)
 23f96be:	f7fe fd43 	bl	23f8148 <_Z9ei_printfPKcz>
      return NULL;
 23f96c2:	2400      	movs	r4, #0
}
 23f96c4:	4620      	mov	r0, r4
 23f96c6:	b003      	add	sp, #12
 23f96c8:	bd30      	pop	{r4, r5, pc}
    ptr = ei_calloc(bytes, 1);
 23f96ca:	4610      	mov	r0, r2
 23f96cc:	2101      	movs	r1, #1
 23f96ce:	9201      	str	r2, [sp, #4]
 23f96d0:	f7fe fe10 	bl	23f82f4 <_Z9ei_callocjj>
    if (ptr == NULL) {
 23f96d4:	9a01      	ldr	r2, [sp, #4]
 23f96d6:	4604      	mov	r4, r0
 23f96d8:	b920      	cbnz	r0, 23f96e4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x50>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 23f96da:	4611      	mov	r1, r2
 23f96dc:	480e      	ldr	r0, [pc, #56]	; (23f9718 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>)
 23f96de:	f7fe fd33 	bl	23f8148 <_Z9ei_printfPKcz>
      return NULL;
 23f96e2:	e7ef      	b.n	23f96c4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x30>
    overflow_buffers[overflow_buffers_ix++] = ptr;
 23f96e4:	682b      	ldr	r3, [r5, #0]
 23f96e6:	1c5a      	adds	r2, r3, #1
 23f96e8:	602a      	str	r2, [r5, #0]
 23f96ea:	4a0c      	ldr	r2, [pc, #48]	; (23f971c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x88>)
 23f96ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    return ptr;
 23f96f0:	e7e8      	b.n	23f96c4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x30>
  current_location -= 15; // for alignment
 23f96f2:	1aa4      	subs	r4, r4, r2
 23f96f4:	3c0f      	subs	r4, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
 23f96f6:	f024 040f 	bic.w	r4, r4, #15
 23f96fa:	3410      	adds	r4, #16
 23f96fc:	600c      	str	r4, [r1, #0]
  memset(ptr, 0, bytes);
 23f96fe:	4620      	mov	r0, r4
 23f9700:	2100      	movs	r1, #0
 23f9702:	f002 ff7a 	bl	23fc5fa <memset>
  return ptr;
 23f9706:	e7dd      	b.n	23f96c4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x30>
 23f9708:	1007ae04 	.word	0x1007ae04
 23f970c:	1007ae00 	.word	0x1007ae00
 23f9710:	1007ae34 	.word	0x1007ae34
 23f9714:	023ff2be 	.word	0x023ff2be
 23f9718:	023ff33b 	.word	0x023ff33b
 23f971c:	1007ae08 	.word	0x1007ae08

023f9720 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:
    return AllocatePersistentBufferImpl(nullptr, bytes);
 23f9720:	2000      	movs	r0, #0
 23f9722:	f7ff bfb7 	b.w	23f9694 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
	...

023f9728 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
 23f9728:	b510      	push	{r4, lr}
 23f972a:	4604      	mov	r4, r0
 23f972c:	4b02      	ldr	r3, [pc, #8]	; (23f9738 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x10>)
 23f972e:	6003      	str	r3, [r0, #0]
 23f9730:	f7fe ffb8 	bl	23f86a4 <_ZN6tflite12MicroContextD1Ev>
 23f9734:	4620      	mov	r0, r4
 23f9736:	bd10      	pop	{r4, pc}
 23f9738:	023ff920 	.word	0x023ff920

023f973c <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
 23f973c:	b510      	push	{r4, lr}
 23f973e:	4604      	mov	r4, r0
 23f9740:	f7ff fff2 	bl	23f9728 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 23f9744:	4620      	mov	r0, r4
 23f9746:	2118      	movs	r1, #24
 23f9748:	f7fc ffc1 	bl	23f66ce <_ZdlPvj>
 23f974c:	4620      	mov	r0, r4
 23f974e:	bd10      	pop	{r4, pc}

023f9750 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
 23f9750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f9752:	4e0e      	ldr	r6, [pc, #56]	; (23f978c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x3c>)
                                                int* buffer_idx) {
 23f9754:	460d      	mov	r5, r1
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f9756:	6833      	ldr	r3, [r6, #0]
                                                int* buffer_idx) {
 23f9758:	4617      	mov	r7, r2
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
 23f975a:	2b03      	cmp	r3, #3
 23f975c:	d904      	bls.n	23f9768 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x18>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
 23f975e:	480c      	ldr	r0, [pc, #48]	; (23f9790 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x40>)
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f9760:	f7fe fcf2 	bl	23f8148 <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f9764:	2001      	movs	r0, #1
}
 23f9766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
 23f9768:	f7ff ff94 	bl	23f9694 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
  if (!b.ptr) {
 23f976c:	b910      	cbnz	r0, 23f9774 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x24>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
 23f976e:	4629      	mov	r1, r5
 23f9770:	4808      	ldr	r0, [pc, #32]	; (23f9794 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x44>)
 23f9772:	e7f5      	b.n	23f9760 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x10>
  scratch_buffers[scratch_buffers_ix] = b;
 23f9774:	6833      	ldr	r3, [r6, #0]
 23f9776:	4c08      	ldr	r4, [pc, #32]	; (23f9798 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>)
  *buffer_idx = scratch_buffers_ix;
 23f9778:	603b      	str	r3, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
 23f977a:	f844 5033 	str.w	r5, [r4, r3, lsl #3]
 23f977e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
  scratch_buffers_ix++;
 23f9782:	3301      	adds	r3, #1
  scratch_buffers[scratch_buffers_ix] = b;
 23f9784:	6060      	str	r0, [r4, #4]
  scratch_buffers_ix++;
 23f9786:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 23f9788:	2000      	movs	r0, #0
 23f978a:	e7ec      	b.n	23f9766 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x16>
 23f978c:	1007ae30 	.word	0x1007ae30
 23f9790:	023ff371 	.word	0x023ff371
 23f9794:	023ff3c9 	.word	0x023ff3c9
 23f9798:	1007ade0 	.word	0x1007ade0

023f979c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
 23f979c:	2000      	movs	r0, #0
 23f979e:	f7ff bfd7 	b.w	23f9750 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>
	...

023f97a4 <_Z19tflite_learn_9_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f97a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f97a8:	4603      	mov	r3, r0
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f97aa:	f44f 7190 	mov.w	r1, #288	; 0x120
 23f97ae:	2010      	movs	r0, #16
TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
 23f97b0:	b0a1      	sub	sp, #132	; 0x84
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 23f97b2:	4798      	blx	r3
 23f97b4:	4b4a      	ldr	r3, [pc, #296]	; (23f98e0 <_Z19tflite_learn_9_initPFPvjjE+0x13c>)
 23f97b6:	6018      	str	r0, [r3, #0]
  if (!tensor_arena) {
 23f97b8:	b938      	cbnz	r0, 23f97ca <_Z19tflite_learn_9_initPFPvjjE+0x26>
    ei_printf("ERR: failed to allocate tensor arena\n");
 23f97ba:	484a      	ldr	r0, [pc, #296]	; (23f98e4 <_Z19tflite_learn_9_initPFPvjjE+0x140>)
 23f97bc:	f7fe fcc4 	bl	23f8148 <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f97c0:	2501      	movs	r5, #1
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}
 23f97c2:	4628      	mov	r0, r5
 23f97c4:	b021      	add	sp, #132	; 0x84
 23f97c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 23f97ca:	2300      	movs	r3, #0
  tensor_boundary = tensor_arena;
 23f97cc:	4c46      	ldr	r4, [pc, #280]	; (23f98e8 <_Z19tflite_learn_9_initPFPvjjE+0x144>)
  current_location = tensor_arena + kTensorArenaSize;
 23f97ce:	4e47      	ldr	r6, [pc, #284]	; (23f98ec <_Z19tflite_learn_9_initPFPvjjE+0x148>)
  tensor_boundary = tensor_arena;
 23f97d0:	6020      	str	r0, [r4, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 23f97d2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
  current_location = tensor_arena + kTensorArenaSize;
 23f97d6:	f500 7090 	add.w	r0, r0, #288	; 0x120
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 23f97da:	461a      	mov	r2, r3
 23f97dc:	4619      	mov	r1, r3
  current_location = tensor_arena + kTensorArenaSize;
 23f97de:	6030      	str	r0, [r6, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 23f97e0:	4640      	mov	r0, r8
 23f97e2:	f7fe ff95 	bl	23f8710 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
 23f97e6:	4b42      	ldr	r3, [pc, #264]	; (23f98f0 <_Z19tflite_learn_9_initPFPvjjE+0x14c>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 23f97e8:	4a42      	ldr	r2, [pc, #264]	; (23f98f4 <_Z19tflite_learn_9_initPFPvjjE+0x150>)
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
 23f97ea:	930a      	str	r3, [sp, #40]	; 0x28
  ctx.impl_ = static_cast<void*>(&micro_context_);
 23f97ec:	4b42      	ldr	r3, [pc, #264]	; (23f98f8 <_Z19tflite_learn_9_initPFPvjjE+0x154>)
  for (size_t i = 0; i < 10; ++i) {
 23f97ee:	2500      	movs	r5, #0
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
 23f97f0:	635a      	str	r2, [r3, #52]	; 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
 23f97f2:	4a42      	ldr	r2, [pc, #264]	; (23f98fc <_Z19tflite_learn_9_initPFPvjjE+0x158>)
 23f97f4:	4f42      	ldr	r7, [pc, #264]	; (23f9900 <_Z19tflite_learn_9_initPFPvjjE+0x15c>)
 23f97f6:	63da      	str	r2, [r3, #60]	; 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 23f97f8:	4a42      	ldr	r2, [pc, #264]	; (23f9904 <_Z19tflite_learn_9_initPFPvjjE+0x160>)
  ctx.impl_ = static_cast<void*>(&micro_context_);
 23f97fa:	f8c3 8008 	str.w	r8, [r3, #8]
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
 23f97fe:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetTensor = &GetTensorImpl;
 23f9800:	4a41      	ldr	r2, [pc, #260]	; (23f9908 <_Z19tflite_learn_9_initPFPvjjE+0x164>)
 23f9802:	64da      	str	r2, [r3, #76]	; 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
 23f9804:	4a41      	ldr	r2, [pc, #260]	; (23f990c <_Z19tflite_learn_9_initPFPvjjE+0x168>)
 23f9806:	651a      	str	r2, [r3, #80]	; 0x50
  ctx.ReportError = &MicroContextReportOpError;
 23f9808:	4a41      	ldr	r2, [pc, #260]	; (23f9910 <_Z19tflite_learn_9_initPFPvjjE+0x16c>)
 23f980a:	611a      	str	r2, [r3, #16]
  ctx.tensors_size = 10;
 23f980c:	220a      	movs	r2, #10
 23f980e:	601a      	str	r2, [r3, #0]
    init_tflite_tensor(i, &tensor);
 23f9810:	4628      	mov	r0, r5
 23f9812:	a910      	add	r1, sp, #64	; 0x40
 23f9814:	f7ff fe62 	bl	23f94dc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
 23f9818:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 23f981c:	2b02      	cmp	r3, #2
 23f981e:	d106      	bne.n	23f982e <_Z19tflite_learn_9_initPFPvjjE+0x8a>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
 23f9820:	68fa      	ldr	r2, [r7, #12]
 23f9822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23f9824:	4413      	add	r3, r2
      if (data_end_ptr > tensor_boundary) {
 23f9826:	6822      	ldr	r2, [r4, #0]
 23f9828:	429a      	cmp	r2, r3
        tensor_boundary = data_end_ptr;
 23f982a:	bf38      	it	cc
 23f982c:	6023      	strcc	r3, [r4, #0]
  for (size_t i = 0; i < 10; ++i) {
 23f982e:	3501      	adds	r5, #1
 23f9830:	2d0a      	cmp	r5, #10
 23f9832:	f107 0718 	add.w	r7, r7, #24
 23f9836:	d1eb      	bne.n	23f9810 <_Z19tflite_learn_9_initPFPvjjE+0x6c>
  if (tensor_boundary > current_location /* end of arena size */) {
 23f9838:	6822      	ldr	r2, [r4, #0]
 23f983a:	6833      	ldr	r3, [r6, #0]
 23f983c:	429a      	cmp	r2, r3
 23f983e:	d907      	bls.n	23f9850 <_Z19tflite_learn_9_initPFPvjjE+0xac>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 23f9840:	4834      	ldr	r0, [pc, #208]	; (23f9914 <_Z19tflite_learn_9_initPFPvjjE+0x170>)
 23f9842:	f7fe fc81 	bl	23f8148 <_Z9ei_printfPKcz>
    return kTfLiteError;
 23f9846:	2501      	movs	r5, #1
  EonMicroContext micro_context_;
 23f9848:	4640      	mov	r0, r8
 23f984a:	f7ff ff6d 	bl	23f9728 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>
 23f984e:	e7b8      	b.n	23f97c2 <_Z19tflite_learn_9_initPFPvjjE+0x1e>
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f9850:	466d      	mov	r5, sp
 23f9852:	4c31      	ldr	r4, [pc, #196]	; (23f9918 <_Z19tflite_learn_9_initPFPvjjE+0x174>)
 23f9854:	4668      	mov	r0, sp
 23f9856:	f7ff f9dd 	bl	23f8c14 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
 23f985a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f985c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f985e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f9860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f9862:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 23f9920 <_Z19tflite_learn_9_initPFPvjjE+0x17c>
 23f9866:	4e2d      	ldr	r6, [pc, #180]	; (23f991c <_Z19tflite_learn_9_initPFPvjjE+0x178>)
 23f9868:	682b      	ldr	r3, [r5, #0]
    current_subgraph_index = g;
 23f986a:	2500      	movs	r5, #0
 23f986c:	4637      	mov	r7, r6
 23f986e:	46cb      	mov	fp, r9
 23f9870:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 23f9924 <_Z19tflite_learn_9_initPFPvjjE+0x180>
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
 23f9874:	f844 3920 	str.w	r3, [r4], #-32
    current_subgraph_index = g;
 23f9878:	f8ca 5000 	str.w	r5, [sl]
      if (registrations[used_ops[i]].init) {
 23f987c:	2224      	movs	r2, #36	; 0x24
 23f987e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 23f9882:	4353      	muls	r3, r2
 23f9884:	58e3      	ldr	r3, [r4, r3]
 23f9886:	b123      	cbz	r3, 23f9892 <_Z19tflite_learn_9_initPFPvjjE+0xee>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 23f9888:	2200      	movs	r2, #0
 23f988a:	6979      	ldr	r1, [r7, #20]
 23f988c:	481a      	ldr	r0, [pc, #104]	; (23f98f8 <_Z19tflite_learn_9_initPFPvjjE+0x154>)
 23f988e:	4798      	blx	r3
 23f9890:	6138      	str	r0, [r7, #16]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 23f9892:	3501      	adds	r5, #1
 23f9894:	2d03      	cmp	r5, #3
 23f9896:	f107 0728 	add.w	r7, r7, #40	; 0x28
 23f989a:	d1ef      	bne.n	23f987c <_Z19tflite_learn_9_initPFPvjjE+0xd8>
    current_subgraph_index = g;
 23f989c:	2300      	movs	r3, #0
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 23f989e:	469b      	mov	fp, r3
    current_subgraph_index = g;
 23f98a0:	f8ca 3000 	str.w	r3, [sl]
      if (registrations[used_ops[i]].prepare) {
 23f98a4:	2324      	movs	r3, #36	; 0x24
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 23f98a6:	4f14      	ldr	r7, [pc, #80]	; (23f98f8 <_Z19tflite_learn_9_initPFPvjjE+0x154>)
      if (registrations[used_ops[i]].prepare) {
 23f98a8:	f819 2b01 	ldrb.w	r2, [r9], #1
 23f98ac:	fb03 4202 	mla	r2, r3, r2, r4
 23f98b0:	6895      	ldr	r5, [r2, #8]
 23f98b2:	b955      	cbnz	r5, 23f98ca <_Z19tflite_learn_9_initPFPvjjE+0x126>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
 23f98b4:	f10b 0b01 	add.w	fp, fp, #1
 23f98b8:	f1bb 0f03 	cmp.w	fp, #3
 23f98bc:	f106 0628 	add.w	r6, r6, #40	; 0x28
 23f98c0:	d1f2      	bne.n	23f98a8 <_Z19tflite_learn_9_initPFPvjjE+0x104>
  current_subgraph_index = 0;
 23f98c2:	2500      	movs	r5, #0
 23f98c4:	f8ca 5000 	str.w	r5, [sl]
  return kTfLiteOk;
 23f98c8:	e7be      	b.n	23f9848 <_Z19tflite_learn_9_initPFPvjjE+0xa4>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 23f98ca:	4631      	mov	r1, r6
 23f98cc:	4638      	mov	r0, r7
        ResetTensors();
 23f98ce:	f7ff fe47 	bl	23f9560 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
 23f98d2:	47a8      	blx	r5
        if (status != kTfLiteOk) {
 23f98d4:	2324      	movs	r3, #36	; 0x24
 23f98d6:	4605      	mov	r5, r0
 23f98d8:	2800      	cmp	r0, #0
 23f98da:	d0eb      	beq.n	23f98b4 <_Z19tflite_learn_9_initPFPvjjE+0x110>
 23f98dc:	e7b4      	b.n	23f9848 <_Z19tflite_learn_9_initPFPvjjE+0xa4>
 23f98de:	bf00      	nop
 23f98e0:	1007ac0c 	.word	0x1007ac0c
 23f98e4:	023ff3fc 	.word	0x023ff3fc
 23f98e8:	1007ae00 	.word	0x1007ae00
 23f98ec:	1007ae04 	.word	0x1007ae04
 23f98f0:	023ff920 	.word	0x023ff920
 23f98f4:	023f9695 	.word	0x023f9695
 23f98f8:	1007ac38 	.word	0x1007ac38
 23f98fc:	023f9751 	.word	0x023f9751
 23f9900:	1007a324 	.word	0x1007a324
 23f9904:	023f9545 	.word	0x023f9545
 23f9908:	023f9625 	.word	0x023f9625
 23f990c:	023f9595 	.word	0x023f9595
 23f9910:	023f87af 	.word	0x023f87af
 23f9914:	023ff422 	.word	0x023ff422
 23f9918:	1007ac10 	.word	0x1007ac10
 23f991c:	1007a414 	.word	0x1007a414
 23f9920:	023ff90c 	.word	0x023ff90c
 23f9924:	1007ac34 	.word	0x1007ac34

023f9928 <_Z20tflite_learn_9_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
 23f9928:	b508      	push	{r3, lr}
  init_tflite_tensor(in_tensor_indices[index], tensor);
 23f992a:	2000      	movs	r0, #0
 23f992c:	f7ff fdd6 	bl	23f94dc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f9930:	2000      	movs	r0, #0
 23f9932:	bd08      	pop	{r3, pc}

023f9934 <_Z21tflite_learn_9_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
 23f9934:	b508      	push	{r3, lr}
  init_tflite_tensor(out_tensor_indices[index], tensor);
 23f9936:	2009      	movs	r0, #9
 23f9938:	f7ff fdd0 	bl	23f94dc <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
  return kTfLiteOk;
}
 23f993c:	2000      	movs	r0, #0
 23f993e:	bd08      	pop	{r3, pc}

023f9940 <_Z21tflite_learn_9_invokev>:

TfLiteStatus tflite_learn_9_invoke() {
 23f9940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for (size_t i = 0; i < 3; ++i) {
 23f9944:	2400      	movs	r4, #0
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 23f9946:	f04f 0824 	mov.w	r8, #36	; 0x24
 23f994a:	4e0b      	ldr	r6, [pc, #44]	; (23f9978 <_Z21tflite_learn_9_invokev+0x38>)
 23f994c:	4d0b      	ldr	r5, [pc, #44]	; (23f997c <_Z21tflite_learn_9_invokev+0x3c>)
 23f994e:	4f0c      	ldr	r7, [pc, #48]	; (23f9980 <_Z21tflite_learn_9_invokev+0x40>)
 23f9950:	f8df 9030 	ldr.w	r9, [pc, #48]	; 23f9984 <_Z21tflite_learn_9_invokev+0x44>
    ResetTensors();
 23f9954:	f7ff fe04 	bl	23f9560 <_ZN12_GLOBAL__N_1L12ResetTensorsEv>
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
 23f9958:	f816 3b01 	ldrb.w	r3, [r6], #1
 23f995c:	4629      	mov	r1, r5
 23f995e:	fb08 7303 	mla	r3, r8, r3, r7
 23f9962:	4648      	mov	r0, r9
 23f9964:	68db      	ldr	r3, [r3, #12]
 23f9966:	4798      	blx	r3
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 23f9968:	b920      	cbnz	r0, 23f9974 <_Z21tflite_learn_9_invokev+0x34>
  for (size_t i = 0; i < 3; ++i) {
 23f996a:	3401      	adds	r4, #1
 23f996c:	2c03      	cmp	r4, #3
 23f996e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 23f9972:	d1ef      	bne.n	23f9954 <_Z21tflite_learn_9_invokev+0x14>
      return status;
    }
  }
  return kTfLiteOk;
}
 23f9974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23f9978:	023ff90c 	.word	0x023ff90c
 23f997c:	1007a414 	.word	0x1007a414
 23f9980:	1007ac10 	.word	0x1007ac10
 23f9984:	1007ac38 	.word	0x1007ac38

023f9988 <_Z20tflite_learn_9_resetPFvPvE>:

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
 23f9988:	b570      	push	{r4, r5, r6, lr}
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
 23f998a:	2400      	movs	r4, #0
  free_fnc(tensor_arena);
 23f998c:	4a09      	ldr	r2, [pc, #36]	; (23f99b4 <_Z20tflite_learn_9_resetPFvPvE+0x2c>)
TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
 23f998e:	4603      	mov	r3, r0
  free_fnc(tensor_arena);
 23f9990:	6810      	ldr	r0, [r2, #0]
 23f9992:	4798      	blx	r3
  scratch_buffers_ix = 0;
 23f9994:	4b08      	ldr	r3, [pc, #32]	; (23f99b8 <_Z20tflite_learn_9_resetPFvPvE+0x30>)
 23f9996:	4e09      	ldr	r6, [pc, #36]	; (23f99bc <_Z20tflite_learn_9_resetPFvPvE+0x34>)

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f9998:	4d09      	ldr	r5, [pc, #36]	; (23f99c0 <_Z20tflite_learn_9_resetPFvPvE+0x38>)
  scratch_buffers_ix = 0;
 23f999a:	601c      	str	r4, [r3, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f999c:	682b      	ldr	r3, [r5, #0]
 23f999e:	42a3      	cmp	r3, r4
 23f99a0:	d905      	bls.n	23f99ae <_Z20tflite_learn_9_resetPFvPvE+0x26>
    ei_free(overflow_buffers[ix]);
 23f99a2:	f856 0b04 	ldr.w	r0, [r6], #4
 23f99a6:	f7fe fca7 	bl	23f82f8 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
 23f99aa:	3401      	adds	r4, #1
 23f99ac:	e7f6      	b.n	23f999c <_Z20tflite_learn_9_resetPFvPvE+0x14>
  }
  overflow_buffers_ix = 0;
 23f99ae:	2000      	movs	r0, #0
 23f99b0:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
 23f99b2:	bd70      	pop	{r4, r5, r6, pc}
 23f99b4:	1007ac0c 	.word	0x1007ac0c
 23f99b8:	1007ae30 	.word	0x1007ae30
 23f99bc:	1007ae08 	.word	0x1007ae08
 23f99c0:	1007ae34 	.word	0x1007ae34

023f99c4 <_GLOBAL__sub_I__Z19tflite_learn_9_initPFPvjjE>:
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension0, 17, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
 23f99c4:	4b06      	ldr	r3, [pc, #24]	; (23f99e0 <_GLOBAL__sub_I__Z19tflite_learn_9_initPFPvjjE+0x1c>)
 23f99c6:	681a      	ldr	r2, [r3, #0]
};
 23f99c8:	4b06      	ldr	r3, [pc, #24]	; (23f99e4 <_GLOBAL__sub_I__Z19tflite_learn_9_initPFPvjjE+0x20>)
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension0, 17, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
 23f99ca:	f102 0120 	add.w	r1, r2, #32
};
 23f99ce:	6059      	str	r1, [r3, #4]
 23f99d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 23f99d4:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 23f99d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
}
 23f99dc:	4770      	bx	lr
 23f99de:	bf00      	nop
 23f99e0:	1007ac0c 	.word	0x1007ac0c
 23f99e4:	1007a324 	.word	0x1007a324

023f99e8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f99e8:	b509      	push	{r0, r3, lr}
 23f99ea:	4804      	ldr	r0, [pc, #16]	; (23f99fc <os_mutex_recursive_create+0x14>)
 23f99ec:	6800      	ldr	r0, [r0, #0]
 23f99ee:	4b04      	ldr	r3, [pc, #16]	; (23f9a00 <os_mutex_recursive_create+0x18>)
 23f99f0:	4403      	add	r3, r0
 23f99f2:	681b      	ldr	r3, [r3, #0]
 23f99f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f99f6:	9302      	str	r3, [sp, #8]
 23f99f8:	bd09      	pop	{r0, r3, pc}
 23f99fa:	0000      	.short	0x0000
 23f99fc:	1007a2ec 	.word	0x1007a2ec
 23f9a00:	00000030 	.word	0x00000030

023f9a04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f9a04:	b509      	push	{r0, r3, lr}
 23f9a06:	4804      	ldr	r0, [pc, #16]	; (23f9a18 <os_mutex_recursive_destroy+0x14>)
 23f9a08:	6800      	ldr	r0, [r0, #0]
 23f9a0a:	4b04      	ldr	r3, [pc, #16]	; (23f9a1c <os_mutex_recursive_destroy+0x18>)
 23f9a0c:	4403      	add	r3, r0
 23f9a0e:	681b      	ldr	r3, [r3, #0]
 23f9a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9a12:	9302      	str	r3, [sp, #8]
 23f9a14:	bd09      	pop	{r0, r3, pc}
 23f9a16:	0000      	.short	0x0000
 23f9a18:	1007a2ec 	.word	0x1007a2ec
 23f9a1c:	00000030 	.word	0x00000030

023f9a20 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f9a20:	b509      	push	{r0, r3, lr}
 23f9a22:	4804      	ldr	r0, [pc, #16]	; (23f9a34 <os_mutex_recursive_lock+0x14>)
 23f9a24:	6800      	ldr	r0, [r0, #0]
 23f9a26:	4b04      	ldr	r3, [pc, #16]	; (23f9a38 <os_mutex_recursive_lock+0x18>)
 23f9a28:	4403      	add	r3, r0
 23f9a2a:	681b      	ldr	r3, [r3, #0]
 23f9a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f9a2e:	9302      	str	r3, [sp, #8]
 23f9a30:	bd09      	pop	{r0, r3, pc}
 23f9a32:	0000      	.short	0x0000
 23f9a34:	1007a2ec 	.word	0x1007a2ec
 23f9a38:	00000030 	.word	0x00000030

023f9a3c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f9a3c:	b509      	push	{r0, r3, lr}
 23f9a3e:	4804      	ldr	r0, [pc, #16]	; (23f9a50 <os_mutex_recursive_unlock+0x14>)
 23f9a40:	6800      	ldr	r0, [r0, #0]
 23f9a42:	4b04      	ldr	r3, [pc, #16]	; (23f9a54 <os_mutex_recursive_unlock+0x18>)
 23f9a44:	4403      	add	r3, r0
 23f9a46:	681b      	ldr	r3, [r3, #0]
 23f9a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9a4a:	9302      	str	r3, [sp, #8]
 23f9a4c:	bd09      	pop	{r0, r3, pc}
 23f9a4e:	0000      	.short	0x0000
 23f9a50:	1007a2ec 	.word	0x1007a2ec
 23f9a54:	00000030 	.word	0x00000030

023f9a58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f9a58:	b509      	push	{r0, r3, lr}
 23f9a5a:	4804      	ldr	r0, [pc, #16]	; (23f9a6c <HAL_RNG_GetRandomNumber+0x14>)
 23f9a5c:	6800      	ldr	r0, [r0, #0]
 23f9a5e:	4b04      	ldr	r3, [pc, #16]	; (23f9a70 <HAL_RNG_GetRandomNumber+0x18>)
 23f9a60:	4403      	add	r3, r0
 23f9a62:	681b      	ldr	r3, [r3, #0]
 23f9a64:	685b      	ldr	r3, [r3, #4]
 23f9a66:	9302      	str	r3, [sp, #8]
 23f9a68:	bd09      	pop	{r0, r3, pc}
 23f9a6a:	0000      	.short	0x0000
 23f9a6c:	1007a2ec 	.word	0x1007a2ec
 23f9a70:	00000000 	.word	0x00000000

023f9a74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f9a74:	b509      	push	{r0, r3, lr}
 23f9a76:	4804      	ldr	r0, [pc, #16]	; (23f9a88 <HAL_Delay_Microseconds+0x14>)
 23f9a78:	6800      	ldr	r0, [r0, #0]
 23f9a7a:	4b04      	ldr	r3, [pc, #16]	; (23f9a8c <HAL_Delay_Microseconds+0x18>)
 23f9a7c:	4403      	add	r3, r0
 23f9a7e:	681b      	ldr	r3, [r3, #0]
 23f9a80:	68db      	ldr	r3, [r3, #12]
 23f9a82:	9302      	str	r3, [sp, #8]
 23f9a84:	bd09      	pop	{r0, r3, pc}
 23f9a86:	0000      	.short	0x0000
 23f9a88:	1007a2ec 	.word	0x1007a2ec
 23f9a8c:	00000000 	.word	0x00000000

023f9a90 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23f9a90:	b509      	push	{r0, r3, lr}
 23f9a92:	4804      	ldr	r0, [pc, #16]	; (23f9aa4 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23f9a94:	6800      	ldr	r0, [r0, #0]
 23f9a96:	4b04      	ldr	r3, [pc, #16]	; (23f9aa8 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23f9a98:	4403      	add	r3, r0
 23f9a9a:	681b      	ldr	r3, [r3, #0]
 23f9a9c:	691b      	ldr	r3, [r3, #16]
 23f9a9e:	9302      	str	r3, [sp, #8]
 23f9aa0:	bd09      	pop	{r0, r3, pc}
 23f9aa2:	0000      	.short	0x0000
 23f9aa4:	1007a2ec 	.word	0x1007a2ec
 23f9aa8:	00000000 	.word	0x00000000

023f9aac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f9aac:	b509      	push	{r0, r3, lr}
 23f9aae:	4804      	ldr	r0, [pc, #16]	; (23f9ac0 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f9ab0:	6800      	ldr	r0, [r0, #0]
 23f9ab2:	4b04      	ldr	r3, [pc, #16]	; (23f9ac4 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f9ab4:	4403      	add	r3, r0
 23f9ab6:	681b      	ldr	r3, [r3, #0]
 23f9ab8:	695b      	ldr	r3, [r3, #20]
 23f9aba:	9302      	str	r3, [sp, #8]
 23f9abc:	bd09      	pop	{r0, r3, pc}
 23f9abe:	0000      	.short	0x0000
 23f9ac0:	1007a2ec 	.word	0x1007a2ec
 23f9ac4:	00000000 	.word	0x00000000

023f9ac8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23f9ac8:	b509      	push	{r0, r3, lr}
 23f9aca:	4804      	ldr	r0, [pc, #16]	; (23f9adc <HAL_EEPROM_Init+0x14>)
 23f9acc:	6800      	ldr	r0, [r0, #0]
 23f9ace:	4b04      	ldr	r3, [pc, #16]	; (23f9ae0 <HAL_EEPROM_Init+0x18>)
 23f9ad0:	4403      	add	r3, r0
 23f9ad2:	681b      	ldr	r3, [r3, #0]
 23f9ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9ad6:	9302      	str	r3, [sp, #8]
 23f9ad8:	bd09      	pop	{r0, r3, pc}
 23f9ada:	0000      	.short	0x0000
 23f9adc:	1007a2ec 	.word	0x1007a2ec
 23f9ae0:	00000000 	.word	0x00000000

023f9ae4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23f9ae4:	b509      	push	{r0, r3, lr}
 23f9ae6:	4804      	ldr	r0, [pc, #16]	; (23f9af8 <HAL_EEPROM_Get+0x14>)
 23f9ae8:	6800      	ldr	r0, [r0, #0]
 23f9aea:	4b04      	ldr	r3, [pc, #16]	; (23f9afc <HAL_EEPROM_Get+0x18>)
 23f9aec:	4403      	add	r3, r0
 23f9aee:	681b      	ldr	r3, [r3, #0]
 23f9af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f9af2:	9302      	str	r3, [sp, #8]
 23f9af4:	bd09      	pop	{r0, r3, pc}
 23f9af6:	0000      	.short	0x0000
 23f9af8:	1007a2ec 	.word	0x1007a2ec
 23f9afc:	00000000 	.word	0x00000000

023f9b00 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23f9b00:	b509      	push	{r0, r3, lr}
 23f9b02:	4804      	ldr	r0, [pc, #16]	; (23f9b14 <HAL_EEPROM_Put+0x14>)
 23f9b04:	6800      	ldr	r0, [r0, #0]
 23f9b06:	4b04      	ldr	r3, [pc, #16]	; (23f9b18 <HAL_EEPROM_Put+0x18>)
 23f9b08:	4403      	add	r3, r0
 23f9b0a:	681b      	ldr	r3, [r3, #0]
 23f9b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f9b0e:	9302      	str	r3, [sp, #8]
 23f9b10:	bd09      	pop	{r0, r3, pc}
 23f9b12:	0000      	.short	0x0000
 23f9b14:	1007a2ec 	.word	0x1007a2ec
 23f9b18:	00000000 	.word	0x00000000

023f9b1c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f9b1c:	b509      	push	{r0, r3, lr}
 23f9b1e:	4804      	ldr	r0, [pc, #16]	; (23f9b30 <hal_timer_millis+0x14>)
 23f9b20:	6800      	ldr	r0, [r0, #0]
 23f9b22:	4b04      	ldr	r3, [pc, #16]	; (23f9b34 <hal_timer_millis+0x18>)
 23f9b24:	4403      	add	r3, r0
 23f9b26:	681b      	ldr	r3, [r3, #0]
 23f9b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f9b2a:	9302      	str	r3, [sp, #8]
 23f9b2c:	bd09      	pop	{r0, r3, pc}
 23f9b2e:	0000      	.short	0x0000
 23f9b30:	1007a2ec 	.word	0x1007a2ec
 23f9b34:	00000000 	.word	0x00000000

023f9b38 <hal_i2c_begin_transmission>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23f9b38:	b509      	push	{r0, r3, lr}
 23f9b3a:	4804      	ldr	r0, [pc, #16]	; (23f9b4c <hal_i2c_begin_transmission+0x14>)
 23f9b3c:	6800      	ldr	r0, [r0, #0]
 23f9b3e:	4b04      	ldr	r3, [pc, #16]	; (23f9b50 <hal_i2c_begin_transmission+0x18>)
 23f9b40:	4403      	add	r3, r0
 23f9b42:	681b      	ldr	r3, [r3, #0]
 23f9b44:	699b      	ldr	r3, [r3, #24]
 23f9b46:	9302      	str	r3, [sp, #8]
 23f9b48:	bd09      	pop	{r0, r3, pc}
 23f9b4a:	0000      	.short	0x0000
 23f9b4c:	1007a2ec 	.word	0x1007a2ec
 23f9b50:	00000010 	.word	0x00000010

023f9b54 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23f9b54:	b509      	push	{r0, r3, lr}
 23f9b56:	4804      	ldr	r0, [pc, #16]	; (23f9b68 <hal_i2c_end_transmission+0x14>)
 23f9b58:	6800      	ldr	r0, [r0, #0]
 23f9b5a:	4b04      	ldr	r3, [pc, #16]	; (23f9b6c <hal_i2c_end_transmission+0x18>)
 23f9b5c:	4403      	add	r3, r0
 23f9b5e:	681b      	ldr	r3, [r3, #0]
 23f9b60:	69db      	ldr	r3, [r3, #28]
 23f9b62:	9302      	str	r3, [sp, #8]
 23f9b64:	bd09      	pop	{r0, r3, pc}
 23f9b66:	0000      	.short	0x0000
 23f9b68:	1007a2ec 	.word	0x1007a2ec
 23f9b6c:	00000010 	.word	0x00000010

023f9b70 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f9b70:	b509      	push	{r0, r3, lr}
 23f9b72:	4804      	ldr	r0, [pc, #16]	; (23f9b84 <hal_i2c_write+0x14>)
 23f9b74:	6800      	ldr	r0, [r0, #0]
 23f9b76:	4b04      	ldr	r3, [pc, #16]	; (23f9b88 <hal_i2c_write+0x18>)
 23f9b78:	4403      	add	r3, r0
 23f9b7a:	681b      	ldr	r3, [r3, #0]
 23f9b7c:	6a1b      	ldr	r3, [r3, #32]
 23f9b7e:	9302      	str	r3, [sp, #8]
 23f9b80:	bd09      	pop	{r0, r3, pc}
 23f9b82:	0000      	.short	0x0000
 23f9b84:	1007a2ec 	.word	0x1007a2ec
 23f9b88:	00000010 	.word	0x00000010

023f9b8c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f9b8c:	b509      	push	{r0, r3, lr}
 23f9b8e:	4804      	ldr	r0, [pc, #16]	; (23f9ba0 <hal_i2c_available+0x14>)
 23f9b90:	6800      	ldr	r0, [r0, #0]
 23f9b92:	4b04      	ldr	r3, [pc, #16]	; (23f9ba4 <hal_i2c_available+0x18>)
 23f9b94:	4403      	add	r3, r0
 23f9b96:	681b      	ldr	r3, [r3, #0]
 23f9b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f9b9a:	9302      	str	r3, [sp, #8]
 23f9b9c:	bd09      	pop	{r0, r3, pc}
 23f9b9e:	0000      	.short	0x0000
 23f9ba0:	1007a2ec 	.word	0x1007a2ec
 23f9ba4:	00000010 	.word	0x00000010

023f9ba8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f9ba8:	b509      	push	{r0, r3, lr}
 23f9baa:	4804      	ldr	r0, [pc, #16]	; (23f9bbc <hal_i2c_read+0x14>)
 23f9bac:	6800      	ldr	r0, [r0, #0]
 23f9bae:	4b04      	ldr	r3, [pc, #16]	; (23f9bc0 <hal_i2c_read+0x18>)
 23f9bb0:	4403      	add	r3, r0
 23f9bb2:	681b      	ldr	r3, [r3, #0]
 23f9bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9bb6:	9302      	str	r3, [sp, #8]
 23f9bb8:	bd09      	pop	{r0, r3, pc}
 23f9bba:	0000      	.short	0x0000
 23f9bbc:	1007a2ec 	.word	0x1007a2ec
 23f9bc0:	00000010 	.word	0x00000010

023f9bc4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f9bc4:	b509      	push	{r0, r3, lr}
 23f9bc6:	4804      	ldr	r0, [pc, #16]	; (23f9bd8 <hal_i2c_peek+0x14>)
 23f9bc8:	6800      	ldr	r0, [r0, #0]
 23f9bca:	4b04      	ldr	r3, [pc, #16]	; (23f9bdc <hal_i2c_peek+0x18>)
 23f9bcc:	4403      	add	r3, r0
 23f9bce:	681b      	ldr	r3, [r3, #0]
 23f9bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9bd2:	9302      	str	r3, [sp, #8]
 23f9bd4:	bd09      	pop	{r0, r3, pc}
 23f9bd6:	0000      	.short	0x0000
 23f9bd8:	1007a2ec 	.word	0x1007a2ec
 23f9bdc:	00000010 	.word	0x00000010

023f9be0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f9be0:	b509      	push	{r0, r3, lr}
 23f9be2:	4804      	ldr	r0, [pc, #16]	; (23f9bf4 <hal_i2c_flush+0x14>)
 23f9be4:	6800      	ldr	r0, [r0, #0]
 23f9be6:	4b04      	ldr	r3, [pc, #16]	; (23f9bf8 <hal_i2c_flush+0x18>)
 23f9be8:	4403      	add	r3, r0
 23f9bea:	681b      	ldr	r3, [r3, #0]
 23f9bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f9bee:	9302      	str	r3, [sp, #8]
 23f9bf0:	bd09      	pop	{r0, r3, pc}
 23f9bf2:	0000      	.short	0x0000
 23f9bf4:	1007a2ec 	.word	0x1007a2ec
 23f9bf8:	00000010 	.word	0x00000010

023f9bfc <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f9bfc:	b509      	push	{r0, r3, lr}
 23f9bfe:	4804      	ldr	r0, [pc, #16]	; (23f9c10 <hal_i2c_init+0x14>)
 23f9c00:	6800      	ldr	r0, [r0, #0]
 23f9c02:	4b04      	ldr	r3, [pc, #16]	; (23f9c14 <hal_i2c_init+0x18>)
 23f9c04:	4403      	add	r3, r0
 23f9c06:	681b      	ldr	r3, [r3, #0]
 23f9c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9c0a:	9302      	str	r3, [sp, #8]
 23f9c0c:	bd09      	pop	{r0, r3, pc}
 23f9c0e:	0000      	.short	0x0000
 23f9c10:	1007a2ec 	.word	0x1007a2ec
 23f9c14:	00000010 	.word	0x00000010

023f9c18 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23f9c18:	b509      	push	{r0, r3, lr}
 23f9c1a:	4804      	ldr	r0, [pc, #16]	; (23f9c2c <hal_i2c_request_ex+0x14>)
 23f9c1c:	6800      	ldr	r0, [r0, #0]
 23f9c1e:	4b04      	ldr	r3, [pc, #16]	; (23f9c30 <hal_i2c_request_ex+0x18>)
 23f9c20:	4403      	add	r3, r0
 23f9c22:	681b      	ldr	r3, [r3, #0]
 23f9c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23f9c26:	9302      	str	r3, [sp, #8]
 23f9c28:	bd09      	pop	{r0, r3, pc}
 23f9c2a:	0000      	.short	0x0000
 23f9c2c:	1007a2ec 	.word	0x1007a2ec
 23f9c30:	00000010 	.word	0x00000010

023f9c34 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f9c34:	b509      	push	{r0, r3, lr}
 23f9c36:	4804      	ldr	r0, [pc, #16]	; (23f9c48 <inet_inet_ntop+0x14>)
 23f9c38:	6800      	ldr	r0, [r0, #0]
 23f9c3a:	4b04      	ldr	r3, [pc, #16]	; (23f9c4c <inet_inet_ntop+0x18>)
 23f9c3c:	4403      	add	r3, r0
 23f9c3e:	681b      	ldr	r3, [r3, #0]
 23f9c40:	695b      	ldr	r3, [r3, #20]
 23f9c42:	9302      	str	r3, [sp, #8]
 23f9c44:	bd09      	pop	{r0, r3, pc}
 23f9c46:	0000      	.short	0x0000
 23f9c48:	1007a2ec 	.word	0x1007a2ec
 23f9c4c:	0000004c 	.word	0x0000004c

023f9c50 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f9c50:	b509      	push	{r0, r3, lr}
 23f9c52:	4804      	ldr	r0, [pc, #16]	; (23f9c64 <netdb_freeaddrinfo+0x14>)
 23f9c54:	6800      	ldr	r0, [r0, #0]
 23f9c56:	4b04      	ldr	r3, [pc, #16]	; (23f9c68 <netdb_freeaddrinfo+0x18>)
 23f9c58:	4403      	add	r3, r0
 23f9c5a:	681b      	ldr	r3, [r3, #0]
 23f9c5c:	689b      	ldr	r3, [r3, #8]
 23f9c5e:	9302      	str	r3, [sp, #8]
 23f9c60:	bd09      	pop	{r0, r3, pc}
 23f9c62:	0000      	.short	0x0000
 23f9c64:	1007a2ec 	.word	0x1007a2ec
 23f9c68:	00000050 	.word	0x00000050

023f9c6c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f9c6c:	b509      	push	{r0, r3, lr}
 23f9c6e:	4804      	ldr	r0, [pc, #16]	; (23f9c80 <netdb_getaddrinfo+0x14>)
 23f9c70:	6800      	ldr	r0, [r0, #0]
 23f9c72:	4b04      	ldr	r3, [pc, #16]	; (23f9c84 <netdb_getaddrinfo+0x18>)
 23f9c74:	4403      	add	r3, r0
 23f9c76:	681b      	ldr	r3, [r3, #0]
 23f9c78:	68db      	ldr	r3, [r3, #12]
 23f9c7a:	9302      	str	r3, [sp, #8]
 23f9c7c:	bd09      	pop	{r0, r3, pc}
 23f9c7e:	0000      	.short	0x0000
 23f9c80:	1007a2ec 	.word	0x1007a2ec
 23f9c84:	00000050 	.word	0x00000050

023f9c88 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f9c88:	b509      	push	{r0, r3, lr}
 23f9c8a:	4804      	ldr	r0, [pc, #16]	; (23f9c9c <hal_usart_end+0x14>)
 23f9c8c:	6800      	ldr	r0, [r0, #0]
 23f9c8e:	4b04      	ldr	r3, [pc, #16]	; (23f9ca0 <hal_usart_end+0x18>)
 23f9c90:	4403      	add	r3, r0
 23f9c92:	681b      	ldr	r3, [r3, #0]
 23f9c94:	689b      	ldr	r3, [r3, #8]
 23f9c96:	9302      	str	r3, [sp, #8]
 23f9c98:	bd09      	pop	{r0, r3, pc}
 23f9c9a:	0000      	.short	0x0000
 23f9c9c:	1007a2ec 	.word	0x1007a2ec
 23f9ca0:	00000024 	.word	0x00000024

023f9ca4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f9ca4:	b509      	push	{r0, r3, lr}
 23f9ca6:	4804      	ldr	r0, [pc, #16]	; (23f9cb8 <hal_usart_write+0x14>)
 23f9ca8:	6800      	ldr	r0, [r0, #0]
 23f9caa:	4b04      	ldr	r3, [pc, #16]	; (23f9cbc <hal_usart_write+0x18>)
 23f9cac:	4403      	add	r3, r0
 23f9cae:	681b      	ldr	r3, [r3, #0]
 23f9cb0:	68db      	ldr	r3, [r3, #12]
 23f9cb2:	9302      	str	r3, [sp, #8]
 23f9cb4:	bd09      	pop	{r0, r3, pc}
 23f9cb6:	0000      	.short	0x0000
 23f9cb8:	1007a2ec 	.word	0x1007a2ec
 23f9cbc:	00000024 	.word	0x00000024

023f9cc0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f9cc0:	b509      	push	{r0, r3, lr}
 23f9cc2:	4804      	ldr	r0, [pc, #16]	; (23f9cd4 <hal_usart_available+0x14>)
 23f9cc4:	6800      	ldr	r0, [r0, #0]
 23f9cc6:	4b04      	ldr	r3, [pc, #16]	; (23f9cd8 <hal_usart_available+0x18>)
 23f9cc8:	4403      	add	r3, r0
 23f9cca:	681b      	ldr	r3, [r3, #0]
 23f9ccc:	691b      	ldr	r3, [r3, #16]
 23f9cce:	9302      	str	r3, [sp, #8]
 23f9cd0:	bd09      	pop	{r0, r3, pc}
 23f9cd2:	0000      	.short	0x0000
 23f9cd4:	1007a2ec 	.word	0x1007a2ec
 23f9cd8:	00000024 	.word	0x00000024

023f9cdc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f9cdc:	b509      	push	{r0, r3, lr}
 23f9cde:	4804      	ldr	r0, [pc, #16]	; (23f9cf0 <hal_usart_read+0x14>)
 23f9ce0:	6800      	ldr	r0, [r0, #0]
 23f9ce2:	4b04      	ldr	r3, [pc, #16]	; (23f9cf4 <hal_usart_read+0x18>)
 23f9ce4:	4403      	add	r3, r0
 23f9ce6:	681b      	ldr	r3, [r3, #0]
 23f9ce8:	695b      	ldr	r3, [r3, #20]
 23f9cea:	9302      	str	r3, [sp, #8]
 23f9cec:	bd09      	pop	{r0, r3, pc}
 23f9cee:	0000      	.short	0x0000
 23f9cf0:	1007a2ec 	.word	0x1007a2ec
 23f9cf4:	00000024 	.word	0x00000024

023f9cf8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f9cf8:	b509      	push	{r0, r3, lr}
 23f9cfa:	4804      	ldr	r0, [pc, #16]	; (23f9d0c <hal_usart_peek+0x14>)
 23f9cfc:	6800      	ldr	r0, [r0, #0]
 23f9cfe:	4b04      	ldr	r3, [pc, #16]	; (23f9d10 <hal_usart_peek+0x18>)
 23f9d00:	4403      	add	r3, r0
 23f9d02:	681b      	ldr	r3, [r3, #0]
 23f9d04:	699b      	ldr	r3, [r3, #24]
 23f9d06:	9302      	str	r3, [sp, #8]
 23f9d08:	bd09      	pop	{r0, r3, pc}
 23f9d0a:	0000      	.short	0x0000
 23f9d0c:	1007a2ec 	.word	0x1007a2ec
 23f9d10:	00000024 	.word	0x00000024

023f9d14 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f9d14:	b509      	push	{r0, r3, lr}
 23f9d16:	4804      	ldr	r0, [pc, #16]	; (23f9d28 <hal_usart_flush+0x14>)
 23f9d18:	6800      	ldr	r0, [r0, #0]
 23f9d1a:	4b04      	ldr	r3, [pc, #16]	; (23f9d2c <hal_usart_flush+0x18>)
 23f9d1c:	4403      	add	r3, r0
 23f9d1e:	681b      	ldr	r3, [r3, #0]
 23f9d20:	69db      	ldr	r3, [r3, #28]
 23f9d22:	9302      	str	r3, [sp, #8]
 23f9d24:	bd09      	pop	{r0, r3, pc}
 23f9d26:	0000      	.short	0x0000
 23f9d28:	1007a2ec 	.word	0x1007a2ec
 23f9d2c:	00000024 	.word	0x00000024

023f9d30 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f9d30:	b509      	push	{r0, r3, lr}
 23f9d32:	4804      	ldr	r0, [pc, #16]	; (23f9d44 <hal_usart_is_enabled+0x14>)
 23f9d34:	6800      	ldr	r0, [r0, #0]
 23f9d36:	4b04      	ldr	r3, [pc, #16]	; (23f9d48 <hal_usart_is_enabled+0x18>)
 23f9d38:	4403      	add	r3, r0
 23f9d3a:	681b      	ldr	r3, [r3, #0]
 23f9d3c:	6a1b      	ldr	r3, [r3, #32]
 23f9d3e:	9302      	str	r3, [sp, #8]
 23f9d40:	bd09      	pop	{r0, r3, pc}
 23f9d42:	0000      	.short	0x0000
 23f9d44:	1007a2ec 	.word	0x1007a2ec
 23f9d48:	00000024 	.word	0x00000024

023f9d4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f9d4c:	b509      	push	{r0, r3, lr}
 23f9d4e:	4804      	ldr	r0, [pc, #16]	; (23f9d60 <hal_usart_available_data_for_write+0x14>)
 23f9d50:	6800      	ldr	r0, [r0, #0]
 23f9d52:	4b04      	ldr	r3, [pc, #16]	; (23f9d64 <hal_usart_available_data_for_write+0x18>)
 23f9d54:	4403      	add	r3, r0
 23f9d56:	681b      	ldr	r3, [r3, #0]
 23f9d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9d5a:	9302      	str	r3, [sp, #8]
 23f9d5c:	bd09      	pop	{r0, r3, pc}
 23f9d5e:	0000      	.short	0x0000
 23f9d60:	1007a2ec 	.word	0x1007a2ec
 23f9d64:	00000024 	.word	0x00000024

023f9d68 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f9d68:	b509      	push	{r0, r3, lr}
 23f9d6a:	4804      	ldr	r0, [pc, #16]	; (23f9d7c <hal_usart_begin_config+0x14>)
 23f9d6c:	6800      	ldr	r0, [r0, #0]
 23f9d6e:	4b04      	ldr	r3, [pc, #16]	; (23f9d80 <hal_usart_begin_config+0x18>)
 23f9d70:	4403      	add	r3, r0
 23f9d72:	681b      	ldr	r3, [r3, #0]
 23f9d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f9d76:	9302      	str	r3, [sp, #8]
 23f9d78:	bd09      	pop	{r0, r3, pc}
 23f9d7a:	0000      	.short	0x0000
 23f9d7c:	1007a2ec 	.word	0x1007a2ec
 23f9d80:	00000024 	.word	0x00000024

023f9d84 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f9d84:	b509      	push	{r0, r3, lr}
 23f9d86:	4804      	ldr	r0, [pc, #16]	; (23f9d98 <hal_usart_init_ex+0x14>)
 23f9d88:	6800      	ldr	r0, [r0, #0]
 23f9d8a:	4b04      	ldr	r3, [pc, #16]	; (23f9d9c <hal_usart_init_ex+0x18>)
 23f9d8c:	4403      	add	r3, r0
 23f9d8e:	681b      	ldr	r3, [r3, #0]
 23f9d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f9d92:	9302      	str	r3, [sp, #8]
 23f9d94:	bd09      	pop	{r0, r3, pc}
 23f9d96:	0000      	.short	0x0000
 23f9d98:	1007a2ec 	.word	0x1007a2ec
 23f9d9c:	00000024 	.word	0x00000024

023f9da0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f9da0:	b509      	push	{r0, r3, lr}
 23f9da2:	4804      	ldr	r0, [pc, #16]	; (23f9db4 <HAL_USB_USART_Init+0x14>)
 23f9da4:	6800      	ldr	r0, [r0, #0]
 23f9da6:	4b04      	ldr	r3, [pc, #16]	; (23f9db8 <HAL_USB_USART_Init+0x18>)
 23f9da8:	4403      	add	r3, r0
 23f9daa:	681b      	ldr	r3, [r3, #0]
 23f9dac:	681b      	ldr	r3, [r3, #0]
 23f9dae:	9302      	str	r3, [sp, #8]
 23f9db0:	bd09      	pop	{r0, r3, pc}
 23f9db2:	0000      	.short	0x0000
 23f9db4:	1007a2ec 	.word	0x1007a2ec
 23f9db8:	00000034 	.word	0x00000034

023f9dbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f9dbc:	b509      	push	{r0, r3, lr}
 23f9dbe:	4804      	ldr	r0, [pc, #16]	; (23f9dd0 <HAL_USB_USART_Begin+0x14>)
 23f9dc0:	6800      	ldr	r0, [r0, #0]
 23f9dc2:	4b04      	ldr	r3, [pc, #16]	; (23f9dd4 <HAL_USB_USART_Begin+0x18>)
 23f9dc4:	4403      	add	r3, r0
 23f9dc6:	681b      	ldr	r3, [r3, #0]
 23f9dc8:	685b      	ldr	r3, [r3, #4]
 23f9dca:	9302      	str	r3, [sp, #8]
 23f9dcc:	bd09      	pop	{r0, r3, pc}
 23f9dce:	0000      	.short	0x0000
 23f9dd0:	1007a2ec 	.word	0x1007a2ec
 23f9dd4:	00000034 	.word	0x00000034

023f9dd8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f9dd8:	b509      	push	{r0, r3, lr}
 23f9dda:	4804      	ldr	r0, [pc, #16]	; (23f9dec <HAL_USB_USART_End+0x14>)
 23f9ddc:	6800      	ldr	r0, [r0, #0]
 23f9dde:	4b04      	ldr	r3, [pc, #16]	; (23f9df0 <HAL_USB_USART_End+0x18>)
 23f9de0:	4403      	add	r3, r0
 23f9de2:	681b      	ldr	r3, [r3, #0]
 23f9de4:	689b      	ldr	r3, [r3, #8]
 23f9de6:	9302      	str	r3, [sp, #8]
 23f9de8:	bd09      	pop	{r0, r3, pc}
 23f9dea:	0000      	.short	0x0000
 23f9dec:	1007a2ec 	.word	0x1007a2ec
 23f9df0:	00000034 	.word	0x00000034

023f9df4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23f9df4:	b509      	push	{r0, r3, lr}
 23f9df6:	4804      	ldr	r0, [pc, #16]	; (23f9e08 <HAL_USB_USART_Available_Data+0x14>)
 23f9df8:	6800      	ldr	r0, [r0, #0]
 23f9dfa:	4b04      	ldr	r3, [pc, #16]	; (23f9e0c <HAL_USB_USART_Available_Data+0x18>)
 23f9dfc:	4403      	add	r3, r0
 23f9dfe:	681b      	ldr	r3, [r3, #0]
 23f9e00:	691b      	ldr	r3, [r3, #16]
 23f9e02:	9302      	str	r3, [sp, #8]
 23f9e04:	bd09      	pop	{r0, r3, pc}
 23f9e06:	0000      	.short	0x0000
 23f9e08:	1007a2ec 	.word	0x1007a2ec
 23f9e0c:	00000034 	.word	0x00000034

023f9e10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23f9e10:	b509      	push	{r0, r3, lr}
 23f9e12:	4804      	ldr	r0, [pc, #16]	; (23f9e24 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f9e14:	6800      	ldr	r0, [r0, #0]
 23f9e16:	4b04      	ldr	r3, [pc, #16]	; (23f9e28 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f9e18:	4403      	add	r3, r0
 23f9e1a:	681b      	ldr	r3, [r3, #0]
 23f9e1c:	695b      	ldr	r3, [r3, #20]
 23f9e1e:	9302      	str	r3, [sp, #8]
 23f9e20:	bd09      	pop	{r0, r3, pc}
 23f9e22:	0000      	.short	0x0000
 23f9e24:	1007a2ec 	.word	0x1007a2ec
 23f9e28:	00000034 	.word	0x00000034

023f9e2c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f9e2c:	b509      	push	{r0, r3, lr}
 23f9e2e:	4804      	ldr	r0, [pc, #16]	; (23f9e40 <HAL_USB_USART_Receive_Data+0x14>)
 23f9e30:	6800      	ldr	r0, [r0, #0]
 23f9e32:	4b04      	ldr	r3, [pc, #16]	; (23f9e44 <HAL_USB_USART_Receive_Data+0x18>)
 23f9e34:	4403      	add	r3, r0
 23f9e36:	681b      	ldr	r3, [r3, #0]
 23f9e38:	699b      	ldr	r3, [r3, #24]
 23f9e3a:	9302      	str	r3, [sp, #8]
 23f9e3c:	bd09      	pop	{r0, r3, pc}
 23f9e3e:	0000      	.short	0x0000
 23f9e40:	1007a2ec 	.word	0x1007a2ec
 23f9e44:	00000034 	.word	0x00000034

023f9e48 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f9e48:	b509      	push	{r0, r3, lr}
 23f9e4a:	4804      	ldr	r0, [pc, #16]	; (23f9e5c <HAL_USB_USART_Send_Data+0x14>)
 23f9e4c:	6800      	ldr	r0, [r0, #0]
 23f9e4e:	4b04      	ldr	r3, [pc, #16]	; (23f9e60 <HAL_USB_USART_Send_Data+0x18>)
 23f9e50:	4403      	add	r3, r0
 23f9e52:	681b      	ldr	r3, [r3, #0]
 23f9e54:	69db      	ldr	r3, [r3, #28]
 23f9e56:	9302      	str	r3, [sp, #8]
 23f9e58:	bd09      	pop	{r0, r3, pc}
 23f9e5a:	0000      	.short	0x0000
 23f9e5c:	1007a2ec 	.word	0x1007a2ec
 23f9e60:	00000034 	.word	0x00000034

023f9e64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23f9e64:	b509      	push	{r0, r3, lr}
 23f9e66:	4804      	ldr	r0, [pc, #16]	; (23f9e78 <HAL_USB_USART_Flush_Data+0x14>)
 23f9e68:	6800      	ldr	r0, [r0, #0]
 23f9e6a:	4b04      	ldr	r3, [pc, #16]	; (23f9e7c <HAL_USB_USART_Flush_Data+0x18>)
 23f9e6c:	4403      	add	r3, r0
 23f9e6e:	681b      	ldr	r3, [r3, #0]
 23f9e70:	6a1b      	ldr	r3, [r3, #32]
 23f9e72:	9302      	str	r3, [sp, #8]
 23f9e74:	bd09      	pop	{r0, r3, pc}
 23f9e76:	0000      	.short	0x0000
 23f9e78:	1007a2ec 	.word	0x1007a2ec
 23f9e7c:	00000034 	.word	0x00000034

023f9e80 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f9e80:	b509      	push	{r0, r3, lr}
 23f9e82:	4804      	ldr	r0, [pc, #16]	; (23f9e94 <HAL_USB_USART_Is_Connected+0x14>)
 23f9e84:	6800      	ldr	r0, [r0, #0]
 23f9e86:	4b04      	ldr	r3, [pc, #16]	; (23f9e98 <HAL_USB_USART_Is_Connected+0x18>)
 23f9e88:	4403      	add	r3, r0
 23f9e8a:	681b      	ldr	r3, [r3, #0]
 23f9e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f9e8e:	9302      	str	r3, [sp, #8]
 23f9e90:	bd09      	pop	{r0, r3, pc}
 23f9e92:	0000      	.short	0x0000
 23f9e94:	1007a2ec 	.word	0x1007a2ec
 23f9e98:	00000034 	.word	0x00000034

023f9e9c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f9e9c:	b509      	push	{r0, r3, lr}
 23f9e9e:	4804      	ldr	r0, [pc, #16]	; (23f9eb0 <panic_+0x14>)
 23f9ea0:	6800      	ldr	r0, [r0, #0]
 23f9ea2:	4b04      	ldr	r3, [pc, #16]	; (23f9eb4 <panic_+0x18>)
 23f9ea4:	4403      	add	r3, r0
 23f9ea6:	681b      	ldr	r3, [r3, #0]
 23f9ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f9eaa:	9302      	str	r3, [sp, #8]
 23f9eac:	bd09      	pop	{r0, r3, pc}
 23f9eae:	0000      	.short	0x0000
 23f9eb0:	1007a2ec 	.word	0x1007a2ec
 23f9eb4:	00000048 	.word	0x00000048

023f9eb8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23f9eb8:	b509      	push	{r0, r3, lr}
 23f9eba:	4804      	ldr	r0, [pc, #16]	; (23f9ecc <log_message_v+0x14>)
 23f9ebc:	6800      	ldr	r0, [r0, #0]
 23f9ebe:	4b04      	ldr	r3, [pc, #16]	; (23f9ed0 <log_message_v+0x18>)
 23f9ec0:	4403      	add	r3, r0
 23f9ec2:	681b      	ldr	r3, [r3, #0]
 23f9ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f9ec6:	9302      	str	r3, [sp, #8]
 23f9ec8:	bd09      	pop	{r0, r3, pc}
 23f9eca:	0000      	.short	0x0000
 23f9ecc:	1007a2ec 	.word	0x1007a2ec
 23f9ed0:	00000048 	.word	0x00000048

023f9ed4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f9ed4:	b509      	push	{r0, r3, lr}
 23f9ed6:	4804      	ldr	r0, [pc, #16]	; (23f9ee8 <log_level_name+0x14>)
 23f9ed8:	6800      	ldr	r0, [r0, #0]
 23f9eda:	4b04      	ldr	r3, [pc, #16]	; (23f9eec <log_level_name+0x18>)
 23f9edc:	4403      	add	r3, r0
 23f9ede:	681b      	ldr	r3, [r3, #0]
 23f9ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f9ee2:	9302      	str	r3, [sp, #8]
 23f9ee4:	bd09      	pop	{r0, r3, pc}
 23f9ee6:	0000      	.short	0x0000
 23f9ee8:	1007a2ec 	.word	0x1007a2ec
 23f9eec:	00000048 	.word	0x00000048

023f9ef0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f9ef0:	b509      	push	{r0, r3, lr}
 23f9ef2:	4804      	ldr	r0, [pc, #16]	; (23f9f04 <log_set_callbacks+0x14>)
 23f9ef4:	6800      	ldr	r0, [r0, #0]
 23f9ef6:	4b04      	ldr	r3, [pc, #16]	; (23f9f08 <log_set_callbacks+0x18>)
 23f9ef8:	4403      	add	r3, r0
 23f9efa:	681b      	ldr	r3, [r3, #0]
 23f9efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f9efe:	9302      	str	r3, [sp, #8]
 23f9f00:	bd09      	pop	{r0, r3, pc}
 23f9f02:	0000      	.short	0x0000
 23f9f04:	1007a2ec 	.word	0x1007a2ec
 23f9f08:	00000048 	.word	0x00000048

023f9f0c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f9f0c:	b509      	push	{r0, r3, lr}
 23f9f0e:	4804      	ldr	r0, [pc, #16]	; (23f9f20 <set_system_mode+0x14>)
 23f9f10:	6800      	ldr	r0, [r0, #0]
 23f9f12:	4b04      	ldr	r3, [pc, #16]	; (23f9f24 <set_system_mode+0x18>)
 23f9f14:	4403      	add	r3, r0
 23f9f16:	681b      	ldr	r3, [r3, #0]
 23f9f18:	685b      	ldr	r3, [r3, #4]
 23f9f1a:	9302      	str	r3, [sp, #8]
 23f9f1c:	bd09      	pop	{r0, r3, pc}
 23f9f1e:	0000      	.short	0x0000
 23f9f20:	1007a2ec 	.word	0x1007a2ec
 23f9f24:	00000008 	.word	0x00000008

023f9f28 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f9f28:	b509      	push	{r0, r3, lr}
 23f9f2a:	4804      	ldr	r0, [pc, #16]	; (23f9f3c <system_delay_ms+0x14>)
 23f9f2c:	6800      	ldr	r0, [r0, #0]
 23f9f2e:	4b04      	ldr	r3, [pc, #16]	; (23f9f40 <system_delay_ms+0x18>)
 23f9f30:	4403      	add	r3, r0
 23f9f32:	681b      	ldr	r3, [r3, #0]
 23f9f34:	695b      	ldr	r3, [r3, #20]
 23f9f36:	9302      	str	r3, [sp, #8]
 23f9f38:	bd09      	pop	{r0, r3, pc}
 23f9f3a:	0000      	.short	0x0000
 23f9f3c:	1007a2ec 	.word	0x1007a2ec
 23f9f40:	00000008 	.word	0x00000008

023f9f44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f9f44:	b509      	push	{r0, r3, lr}
 23f9f46:	4804      	ldr	r0, [pc, #16]	; (23f9f58 <system_ctrl_set_app_request_handler+0x14>)
 23f9f48:	6800      	ldr	r0, [r0, #0]
 23f9f4a:	4b04      	ldr	r3, [pc, #16]	; (23f9f5c <system_ctrl_set_app_request_handler+0x18>)
 23f9f4c:	4403      	add	r3, r0
 23f9f4e:	681b      	ldr	r3, [r3, #0]
 23f9f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f9f54:	9302      	str	r3, [sp, #8]
 23f9f56:	bd09      	pop	{r0, r3, pc}
 23f9f58:	1007a2ec 	.word	0x1007a2ec
 23f9f5c:	00000008 	.word	0x00000008

023f9f60 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f9f60:	b509      	push	{r0, r3, lr}
 23f9f62:	4804      	ldr	r0, [pc, #16]	; (23f9f74 <system_ctrl_set_result+0x14>)
 23f9f64:	6800      	ldr	r0, [r0, #0]
 23f9f66:	4b04      	ldr	r3, [pc, #16]	; (23f9f78 <system_ctrl_set_result+0x18>)
 23f9f68:	4403      	add	r3, r0
 23f9f6a:	681b      	ldr	r3, [r3, #0]
 23f9f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f9f70:	9302      	str	r3, [sp, #8]
 23f9f72:	bd09      	pop	{r0, r3, pc}
 23f9f74:	1007a2ec 	.word	0x1007a2ec
 23f9f78:	00000008 	.word	0x00000008

023f9f7c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f9f7c:	b509      	push	{r0, r3, lr}
 23f9f7e:	4804      	ldr	r0, [pc, #16]	; (23f9f90 <spark_process+0x14>)
 23f9f80:	6800      	ldr	r0, [r0, #0]
 23f9f82:	4b04      	ldr	r3, [pc, #16]	; (23f9f94 <spark_process+0x18>)
 23f9f84:	4403      	add	r3, r0
 23f9f86:	681b      	ldr	r3, [r3, #0]
 23f9f88:	689b      	ldr	r3, [r3, #8]
 23f9f8a:	9302      	str	r3, [sp, #8]
 23f9f8c:	bd09      	pop	{r0, r3, pc}
 23f9f8e:	0000      	.short	0x0000
 23f9f90:	1007a2ec 	.word	0x1007a2ec
 23f9f94:	0000002c 	.word	0x0000002c

023f9f98 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f9f98:	b509      	push	{r0, r3, lr}
 23f9f9a:	4804      	ldr	r0, [pc, #16]	; (23f9fac <spark_set_random_seed_from_cloud_handler+0x14>)
 23f9f9c:	6800      	ldr	r0, [r0, #0]
 23f9f9e:	4b04      	ldr	r3, [pc, #16]	; (23f9fb0 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f9fa0:	4403      	add	r3, r0
 23f9fa2:	681b      	ldr	r3, [r3, #0]
 23f9fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f9fa6:	9302      	str	r3, [sp, #8]
 23f9fa8:	bd09      	pop	{r0, r3, pc}
 23f9faa:	0000      	.short	0x0000
 23f9fac:	1007a2ec 	.word	0x1007a2ec
 23f9fb0:	0000002c 	.word	0x0000002c

023f9fb4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f9fb4:	b509      	push	{r0, r3, lr}
 23f9fb6:	4804      	ldr	r0, [pc, #16]	; (23f9fc8 <network_connect+0x14>)
 23f9fb8:	6800      	ldr	r0, [r0, #0]
 23f9fba:	4b04      	ldr	r3, [pc, #16]	; (23f9fcc <network_connect+0x18>)
 23f9fbc:	4403      	add	r3, r0
 23f9fbe:	681b      	ldr	r3, [r3, #0]
 23f9fc0:	685b      	ldr	r3, [r3, #4]
 23f9fc2:	9302      	str	r3, [sp, #8]
 23f9fc4:	bd09      	pop	{r0, r3, pc}
 23f9fc6:	0000      	.short	0x0000
 23f9fc8:	1007a2ec 	.word	0x1007a2ec
 23f9fcc:	00000028 	.word	0x00000028

023f9fd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f9fd0:	b509      	push	{r0, r3, lr}
 23f9fd2:	4804      	ldr	r0, [pc, #16]	; (23f9fe4 <network_connecting+0x14>)
 23f9fd4:	6800      	ldr	r0, [r0, #0]
 23f9fd6:	4b04      	ldr	r3, [pc, #16]	; (23f9fe8 <network_connecting+0x18>)
 23f9fd8:	4403      	add	r3, r0
 23f9fda:	681b      	ldr	r3, [r3, #0]
 23f9fdc:	689b      	ldr	r3, [r3, #8]
 23f9fde:	9302      	str	r3, [sp, #8]
 23f9fe0:	bd09      	pop	{r0, r3, pc}
 23f9fe2:	0000      	.short	0x0000
 23f9fe4:	1007a2ec 	.word	0x1007a2ec
 23f9fe8:	00000028 	.word	0x00000028

023f9fec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f9fec:	b509      	push	{r0, r3, lr}
 23f9fee:	4804      	ldr	r0, [pc, #16]	; (23fa000 <network_disconnect+0x14>)
 23f9ff0:	6800      	ldr	r0, [r0, #0]
 23f9ff2:	4b04      	ldr	r3, [pc, #16]	; (23fa004 <network_disconnect+0x18>)
 23f9ff4:	4403      	add	r3, r0
 23f9ff6:	681b      	ldr	r3, [r3, #0]
 23f9ff8:	68db      	ldr	r3, [r3, #12]
 23f9ffa:	9302      	str	r3, [sp, #8]
 23f9ffc:	bd09      	pop	{r0, r3, pc}
 23f9ffe:	0000      	.short	0x0000
 23fa000:	1007a2ec 	.word	0x1007a2ec
 23fa004:	00000028 	.word	0x00000028

023fa008 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fa008:	b509      	push	{r0, r3, lr}
 23fa00a:	4804      	ldr	r0, [pc, #16]	; (23fa01c <network_ready+0x14>)
 23fa00c:	6800      	ldr	r0, [r0, #0]
 23fa00e:	4b04      	ldr	r3, [pc, #16]	; (23fa020 <network_ready+0x18>)
 23fa010:	4403      	add	r3, r0
 23fa012:	681b      	ldr	r3, [r3, #0]
 23fa014:	691b      	ldr	r3, [r3, #16]
 23fa016:	9302      	str	r3, [sp, #8]
 23fa018:	bd09      	pop	{r0, r3, pc}
 23fa01a:	0000      	.short	0x0000
 23fa01c:	1007a2ec 	.word	0x1007a2ec
 23fa020:	00000028 	.word	0x00000028

023fa024 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fa024:	b509      	push	{r0, r3, lr}
 23fa026:	4804      	ldr	r0, [pc, #16]	; (23fa038 <network_on+0x14>)
 23fa028:	6800      	ldr	r0, [r0, #0]
 23fa02a:	4b04      	ldr	r3, [pc, #16]	; (23fa03c <network_on+0x18>)
 23fa02c:	4403      	add	r3, r0
 23fa02e:	681b      	ldr	r3, [r3, #0]
 23fa030:	695b      	ldr	r3, [r3, #20]
 23fa032:	9302      	str	r3, [sp, #8]
 23fa034:	bd09      	pop	{r0, r3, pc}
 23fa036:	0000      	.short	0x0000
 23fa038:	1007a2ec 	.word	0x1007a2ec
 23fa03c:	00000028 	.word	0x00000028

023fa040 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fa040:	b509      	push	{r0, r3, lr}
 23fa042:	4804      	ldr	r0, [pc, #16]	; (23fa054 <network_off+0x14>)
 23fa044:	6800      	ldr	r0, [r0, #0]
 23fa046:	4b04      	ldr	r3, [pc, #16]	; (23fa058 <network_off+0x18>)
 23fa048:	4403      	add	r3, r0
 23fa04a:	681b      	ldr	r3, [r3, #0]
 23fa04c:	699b      	ldr	r3, [r3, #24]
 23fa04e:	9302      	str	r3, [sp, #8]
 23fa050:	bd09      	pop	{r0, r3, pc}
 23fa052:	0000      	.short	0x0000
 23fa054:	1007a2ec 	.word	0x1007a2ec
 23fa058:	00000028 	.word	0x00000028

023fa05c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fa05c:	b509      	push	{r0, r3, lr}
 23fa05e:	4804      	ldr	r0, [pc, #16]	; (23fa070 <network_listen+0x14>)
 23fa060:	6800      	ldr	r0, [r0, #0]
 23fa062:	4b04      	ldr	r3, [pc, #16]	; (23fa074 <network_listen+0x18>)
 23fa064:	4403      	add	r3, r0
 23fa066:	681b      	ldr	r3, [r3, #0]
 23fa068:	69db      	ldr	r3, [r3, #28]
 23fa06a:	9302      	str	r3, [sp, #8]
 23fa06c:	bd09      	pop	{r0, r3, pc}
 23fa06e:	0000      	.short	0x0000
 23fa070:	1007a2ec 	.word	0x1007a2ec
 23fa074:	00000028 	.word	0x00000028

023fa078 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fa078:	b509      	push	{r0, r3, lr}
 23fa07a:	4804      	ldr	r0, [pc, #16]	; (23fa08c <network_listening+0x14>)
 23fa07c:	6800      	ldr	r0, [r0, #0]
 23fa07e:	4b04      	ldr	r3, [pc, #16]	; (23fa090 <network_listening+0x18>)
 23fa080:	4403      	add	r3, r0
 23fa082:	681b      	ldr	r3, [r3, #0]
 23fa084:	6a1b      	ldr	r3, [r3, #32]
 23fa086:	9302      	str	r3, [sp, #8]
 23fa088:	bd09      	pop	{r0, r3, pc}
 23fa08a:	0000      	.short	0x0000
 23fa08c:	1007a2ec 	.word	0x1007a2ec
 23fa090:	00000028 	.word	0x00000028

023fa094 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fa094:	b509      	push	{r0, r3, lr}
 23fa096:	4804      	ldr	r0, [pc, #16]	; (23fa0a8 <network_set_listen_timeout+0x14>)
 23fa098:	6800      	ldr	r0, [r0, #0]
 23fa09a:	4b04      	ldr	r3, [pc, #16]	; (23fa0ac <network_set_listen_timeout+0x18>)
 23fa09c:	4403      	add	r3, r0
 23fa09e:	681b      	ldr	r3, [r3, #0]
 23fa0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fa0a2:	9302      	str	r3, [sp, #8]
 23fa0a4:	bd09      	pop	{r0, r3, pc}
 23fa0a6:	0000      	.short	0x0000
 23fa0a8:	1007a2ec 	.word	0x1007a2ec
 23fa0ac:	00000028 	.word	0x00000028

023fa0b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fa0b0:	b509      	push	{r0, r3, lr}
 23fa0b2:	4804      	ldr	r0, [pc, #16]	; (23fa0c4 <network_get_listen_timeout+0x14>)
 23fa0b4:	6800      	ldr	r0, [r0, #0]
 23fa0b6:	4b04      	ldr	r3, [pc, #16]	; (23fa0c8 <network_get_listen_timeout+0x18>)
 23fa0b8:	4403      	add	r3, r0
 23fa0ba:	681b      	ldr	r3, [r3, #0]
 23fa0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fa0be:	9302      	str	r3, [sp, #8]
 23fa0c0:	bd09      	pop	{r0, r3, pc}
 23fa0c2:	0000      	.short	0x0000
 23fa0c4:	1007a2ec 	.word	0x1007a2ec
 23fa0c8:	00000028 	.word	0x00000028

023fa0cc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fa0cc:	b509      	push	{r0, r3, lr}
 23fa0ce:	4804      	ldr	r0, [pc, #16]	; (23fa0e0 <network_is_on+0x14>)
 23fa0d0:	6800      	ldr	r0, [r0, #0]
 23fa0d2:	4b04      	ldr	r3, [pc, #16]	; (23fa0e4 <network_is_on+0x18>)
 23fa0d4:	4403      	add	r3, r0
 23fa0d6:	681b      	ldr	r3, [r3, #0]
 23fa0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa0da:	9302      	str	r3, [sp, #8]
 23fa0dc:	bd09      	pop	{r0, r3, pc}
 23fa0de:	0000      	.short	0x0000
 23fa0e0:	1007a2ec 	.word	0x1007a2ec
 23fa0e4:	00000028 	.word	0x00000028

023fa0e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fa0e8:	b509      	push	{r0, r3, lr}
 23fa0ea:	4804      	ldr	r0, [pc, #16]	; (23fa0fc <network_is_off+0x14>)
 23fa0ec:	6800      	ldr	r0, [r0, #0]
 23fa0ee:	4b04      	ldr	r3, [pc, #16]	; (23fa100 <network_is_off+0x18>)
 23fa0f0:	4403      	add	r3, r0
 23fa0f2:	681b      	ldr	r3, [r3, #0]
 23fa0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa0f6:	9302      	str	r3, [sp, #8]
 23fa0f8:	bd09      	pop	{r0, r3, pc}
 23fa0fa:	0000      	.short	0x0000
 23fa0fc:	1007a2ec 	.word	0x1007a2ec
 23fa100:	00000028 	.word	0x00000028

023fa104 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fa104:	b509      	push	{r0, r3, lr}
 23fa106:	4804      	ldr	r0, [pc, #16]	; (23fa118 <network_prefer+0x14>)
 23fa108:	6800      	ldr	r0, [r0, #0]
 23fa10a:	4b04      	ldr	r3, [pc, #16]	; (23fa11c <network_prefer+0x18>)
 23fa10c:	4403      	add	r3, r0
 23fa10e:	681b      	ldr	r3, [r3, #0]
 23fa110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fa112:	9302      	str	r3, [sp, #8]
 23fa114:	bd09      	pop	{r0, r3, pc}
 23fa116:	0000      	.short	0x0000
 23fa118:	1007a2ec 	.word	0x1007a2ec
 23fa11c:	00000028 	.word	0x00000028

023fa120 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fa120:	b509      	push	{r0, r3, lr}
 23fa122:	4804      	ldr	r0, [pc, #16]	; (23fa134 <network_is_preferred+0x14>)
 23fa124:	6800      	ldr	r0, [r0, #0]
 23fa126:	4b04      	ldr	r3, [pc, #16]	; (23fa138 <network_is_preferred+0x18>)
 23fa128:	4403      	add	r3, r0
 23fa12a:	681b      	ldr	r3, [r3, #0]
 23fa12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fa12e:	9302      	str	r3, [sp, #8]
 23fa130:	bd09      	pop	{r0, r3, pc}
 23fa132:	0000      	.short	0x0000
 23fa134:	1007a2ec 	.word	0x1007a2ec
 23fa138:	00000028 	.word	0x00000028

023fa13c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fa13c:	b509      	push	{r0, r3, lr}
 23fa13e:	4804      	ldr	r0, [pc, #16]	; (23fa150 <malloc+0x14>)
 23fa140:	6800      	ldr	r0, [r0, #0]
 23fa142:	4b04      	ldr	r3, [pc, #16]	; (23fa154 <malloc+0x18>)
 23fa144:	4403      	add	r3, r0
 23fa146:	681b      	ldr	r3, [r3, #0]
 23fa148:	681b      	ldr	r3, [r3, #0]
 23fa14a:	9302      	str	r3, [sp, #8]
 23fa14c:	bd09      	pop	{r0, r3, pc}
 23fa14e:	0000      	.short	0x0000
 23fa150:	1007a2ec 	.word	0x1007a2ec
 23fa154:	00000004 	.word	0x00000004

023fa158 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fa158:	b509      	push	{r0, r3, lr}
 23fa15a:	4804      	ldr	r0, [pc, #16]	; (23fa16c <free+0x14>)
 23fa15c:	6800      	ldr	r0, [r0, #0]
 23fa15e:	4b04      	ldr	r3, [pc, #16]	; (23fa170 <free+0x18>)
 23fa160:	4403      	add	r3, r0
 23fa162:	681b      	ldr	r3, [r3, #0]
 23fa164:	685b      	ldr	r3, [r3, #4]
 23fa166:	9302      	str	r3, [sp, #8]
 23fa168:	bd09      	pop	{r0, r3, pc}
 23fa16a:	0000      	.short	0x0000
 23fa16c:	1007a2ec 	.word	0x1007a2ec
 23fa170:	00000004 	.word	0x00000004

023fa174 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fa174:	b509      	push	{r0, r3, lr}
 23fa176:	4804      	ldr	r0, [pc, #16]	; (23fa188 <realloc+0x14>)
 23fa178:	6800      	ldr	r0, [r0, #0]
 23fa17a:	4b04      	ldr	r3, [pc, #16]	; (23fa18c <realloc+0x18>)
 23fa17c:	4403      	add	r3, r0
 23fa17e:	681b      	ldr	r3, [r3, #0]
 23fa180:	689b      	ldr	r3, [r3, #8]
 23fa182:	9302      	str	r3, [sp, #8]
 23fa184:	bd09      	pop	{r0, r3, pc}
 23fa186:	0000      	.short	0x0000
 23fa188:	1007a2ec 	.word	0x1007a2ec
 23fa18c:	00000004 	.word	0x00000004

023fa190 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23fa190:	b509      	push	{r0, r3, lr}
 23fa192:	4804      	ldr	r0, [pc, #16]	; (23fa1a4 <snprintf+0x14>)
 23fa194:	6800      	ldr	r0, [r0, #0]
 23fa196:	4b04      	ldr	r3, [pc, #16]	; (23fa1a8 <snprintf+0x18>)
 23fa198:	4403      	add	r3, r0
 23fa19a:	681b      	ldr	r3, [r3, #0]
 23fa19c:	69db      	ldr	r3, [r3, #28]
 23fa19e:	9302      	str	r3, [sp, #8]
 23fa1a0:	bd09      	pop	{r0, r3, pc}
 23fa1a2:	0000      	.short	0x0000
 23fa1a4:	1007a2ec 	.word	0x1007a2ec
 23fa1a8:	00000004 	.word	0x00000004

023fa1ac <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fa1ac:	b509      	push	{r0, r3, lr}
 23fa1ae:	4804      	ldr	r0, [pc, #16]	; (23fa1c0 <vsnprintf+0x14>)
 23fa1b0:	6800      	ldr	r0, [r0, #0]
 23fa1b2:	4b04      	ldr	r3, [pc, #16]	; (23fa1c4 <vsnprintf+0x18>)
 23fa1b4:	4403      	add	r3, r0
 23fa1b6:	681b      	ldr	r3, [r3, #0]
 23fa1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fa1ba:	9302      	str	r3, [sp, #8]
 23fa1bc:	bd09      	pop	{r0, r3, pc}
 23fa1be:	0000      	.short	0x0000
 23fa1c0:	1007a2ec 	.word	0x1007a2ec
 23fa1c4:	00000004 	.word	0x00000004

023fa1c8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fa1c8:	b509      	push	{r0, r3, lr}
 23fa1ca:	4804      	ldr	r0, [pc, #16]	; (23fa1dc <abort+0x14>)
 23fa1cc:	6800      	ldr	r0, [r0, #0]
 23fa1ce:	4b04      	ldr	r3, [pc, #16]	; (23fa1e0 <abort+0x18>)
 23fa1d0:	4403      	add	r3, r0
 23fa1d2:	681b      	ldr	r3, [r3, #0]
 23fa1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fa1d6:	9302      	str	r3, [sp, #8]
 23fa1d8:	bd09      	pop	{r0, r3, pc}
 23fa1da:	0000      	.short	0x0000
 23fa1dc:	1007a2ec 	.word	0x1007a2ec
 23fa1e0:	00000004 	.word	0x00000004

023fa1e4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fa1e4:	b509      	push	{r0, r3, lr}
 23fa1e6:	4804      	ldr	r0, [pc, #16]	; (23fa1f8 <_malloc_r+0x14>)
 23fa1e8:	6800      	ldr	r0, [r0, #0]
 23fa1ea:	4b04      	ldr	r3, [pc, #16]	; (23fa1fc <_malloc_r+0x18>)
 23fa1ec:	4403      	add	r3, r0
 23fa1ee:	681b      	ldr	r3, [r3, #0]
 23fa1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fa1f2:	9302      	str	r3, [sp, #8]
 23fa1f4:	bd09      	pop	{r0, r3, pc}
 23fa1f6:	0000      	.short	0x0000
 23fa1f8:	1007a2ec 	.word	0x1007a2ec
 23fa1fc:	00000004 	.word	0x00000004

023fa200 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fa200:	b509      	push	{r0, r3, lr}
 23fa202:	4804      	ldr	r0, [pc, #16]	; (23fa214 <__errno+0x14>)
 23fa204:	6800      	ldr	r0, [r0, #0]
 23fa206:	4b04      	ldr	r3, [pc, #16]	; (23fa218 <__errno+0x18>)
 23fa208:	4403      	add	r3, r0
 23fa20a:	681b      	ldr	r3, [r3, #0]
 23fa20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fa20e:	9302      	str	r3, [sp, #8]
 23fa210:	bd09      	pop	{r0, r3, pc}
 23fa212:	0000      	.short	0x0000
 23fa214:	1007a2ec 	.word	0x1007a2ec
 23fa218:	00000004 	.word	0x00000004

023fa21c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fa21c:	b509      	push	{r0, r3, lr}
 23fa21e:	4804      	ldr	r0, [pc, #16]	; (23fa230 <__assert_func+0x14>)
 23fa220:	6800      	ldr	r0, [r0, #0]
 23fa222:	4b04      	ldr	r3, [pc, #16]	; (23fa234 <__assert_func+0x18>)
 23fa224:	4403      	add	r3, r0
 23fa226:	681b      	ldr	r3, [r3, #0]
 23fa228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa22a:	9302      	str	r3, [sp, #8]
 23fa22c:	bd09      	pop	{r0, r3, pc}
 23fa22e:	0000      	.short	0x0000
 23fa230:	1007a2ec 	.word	0x1007a2ec
 23fa234:	00000004 	.word	0x00000004

023fa238 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fa238:	b509      	push	{r0, r3, lr}
 23fa23a:	4804      	ldr	r0, [pc, #16]	; (23fa24c <newlib_impure_ptr_callback+0x14>)
 23fa23c:	6800      	ldr	r0, [r0, #0]
 23fa23e:	4b04      	ldr	r3, [pc, #16]	; (23fa250 <newlib_impure_ptr_callback+0x18>)
 23fa240:	4403      	add	r3, r0
 23fa242:	681b      	ldr	r3, [r3, #0]
 23fa244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa246:	9302      	str	r3, [sp, #8]
 23fa248:	bd09      	pop	{r0, r3, pc}
 23fa24a:	0000      	.short	0x0000
 23fa24c:	1007a2ec 	.word	0x1007a2ec
 23fa250:	00000004 	.word	0x00000004

023fa254 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fa254:	2100      	movs	r1, #0
 23fa256:	f7ff be67 	b.w	23f9f28 <system_delay_ms>

023fa25a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fa25a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fa25c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fa25e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fa260:	b17c      	cbz	r4, 23fa282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fa262:	6863      	ldr	r3, [r4, #4]
 23fa264:	3b01      	subs	r3, #1
 23fa266:	6063      	str	r3, [r4, #4]
 23fa268:	b95b      	cbnz	r3, 23fa282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fa26a:	6823      	ldr	r3, [r4, #0]
 23fa26c:	4620      	mov	r0, r4
 23fa26e:	689b      	ldr	r3, [r3, #8]
 23fa270:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa272:	68a3      	ldr	r3, [r4, #8]
 23fa274:	3b01      	subs	r3, #1
 23fa276:	60a3      	str	r3, [r4, #8]
 23fa278:	b91b      	cbnz	r3, 23fa282 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fa27a:	6823      	ldr	r3, [r4, #0]
 23fa27c:	4620      	mov	r0, r4
 23fa27e:	68db      	ldr	r3, [r3, #12]
 23fa280:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fa282:	4628      	mov	r0, r5
 23fa284:	bd38      	pop	{r3, r4, r5, pc}

023fa286 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fa286:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fa288:	6843      	ldr	r3, [r0, #4]
    {
 23fa28a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fa28c:	3b01      	subs	r3, #1
 23fa28e:	6043      	str	r3, [r0, #4]
 23fa290:	b963      	cbnz	r3, 23fa2ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fa292:	6803      	ldr	r3, [r0, #0]
 23fa294:	689b      	ldr	r3, [r3, #8]
 23fa296:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa298:	68a3      	ldr	r3, [r4, #8]
 23fa29a:	3b01      	subs	r3, #1
 23fa29c:	60a3      	str	r3, [r4, #8]
 23fa29e:	b92b      	cbnz	r3, 23fa2ac <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fa2a0:	6823      	ldr	r3, [r4, #0]
 23fa2a2:	4620      	mov	r0, r4
    }
 23fa2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fa2a8:	68db      	ldr	r3, [r3, #12]
 23fa2aa:	4718      	bx	r3
    }
 23fa2ac:	bd10      	pop	{r4, pc}

023fa2ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa2ae:	b570      	push	{r4, r5, r6, lr}
 23fa2b0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa2b2:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fa2b6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fa2ba:	42ae      	cmp	r6, r5
 23fa2bc:	d004      	beq.n	23fa2c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fa2be:	4628      	mov	r0, r5
 23fa2c0:	f001 fcba 	bl	23fbc38 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fa2c4:	3510      	adds	r5, #16
 23fa2c6:	e7f8      	b.n	23fa2ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fa2c8:	6820      	ldr	r0, [r4, #0]
 23fa2ca:	f7ff ff45 	bl	23fa158 <free>
    AllocatorT::free(data_);
}
 23fa2ce:	4620      	mov	r0, r4
 23fa2d0:	bd70      	pop	{r4, r5, r6, pc}
	...

023fa2d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fa2d4:	2300      	movs	r3, #0
 23fa2d6:	4802      	ldr	r0, [pc, #8]	; (23fa2e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fa2d8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fa2da:	f7ff bb85 	b.w	23f99e8 <os_mutex_recursive_create>
 23fa2de:	bf00      	nop
 23fa2e0:	1007ae38 	.word	0x1007ae38

023fa2e4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23fa2e4:	2200      	movs	r2, #0
 23fa2e6:	6840      	ldr	r0, [r0, #4]
 23fa2e8:	4611      	mov	r1, r2
 23fa2ea:	f7ff be8d 	b.w	23fa008 <network_ready>

023fa2ee <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23fa2ee:	2200      	movs	r2, #0
 23fa2f0:	6840      	ldr	r0, [r0, #4]
 23fa2f2:	4611      	mov	r1, r2
 23fa2f4:	f7ff bec0 	b.w	23fa078 <network_listening>

023fa2f8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fa2f8:	2200      	movs	r2, #0
 23fa2fa:	6840      	ldr	r0, [r0, #4]
 23fa2fc:	4611      	mov	r1, r2
 23fa2fe:	f7ff bed7 	b.w	23fa0b0 <network_get_listen_timeout>

023fa302 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fa302:	2200      	movs	r2, #0
 23fa304:	6840      	ldr	r0, [r0, #4]
 23fa306:	f7ff bec5 	b.w	23fa094 <network_set_listen_timeout>

023fa30a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fa30a:	2200      	movs	r2, #0
 23fa30c:	6840      	ldr	r0, [r0, #4]
 23fa30e:	f081 0101 	eor.w	r1, r1, #1
 23fa312:	f7ff bea3 	b.w	23fa05c <network_listen>

023fa316 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fa316:	2300      	movs	r3, #0
 23fa318:	6840      	ldr	r0, [r0, #4]
 23fa31a:	461a      	mov	r2, r3
 23fa31c:	4619      	mov	r1, r3
 23fa31e:	f7ff be8f 	b.w	23fa040 <network_off>

023fa322 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fa322:	2300      	movs	r3, #0
 23fa324:	6840      	ldr	r0, [r0, #4]
 23fa326:	461a      	mov	r2, r3
 23fa328:	4619      	mov	r1, r3
 23fa32a:	f7ff be7b 	b.w	23fa024 <network_on>

023fa32e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fa32e:	2200      	movs	r2, #0
 23fa330:	6840      	ldr	r0, [r0, #4]
 23fa332:	4611      	mov	r1, r2
 23fa334:	f7ff be4c 	b.w	23f9fd0 <network_connecting>

023fa338 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fa338:	2200      	movs	r2, #0
 23fa33a:	2102      	movs	r1, #2
 23fa33c:	6840      	ldr	r0, [r0, #4]
 23fa33e:	f7ff be55 	b.w	23f9fec <network_disconnect>

023fa342 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fa342:	2300      	movs	r3, #0
 23fa344:	6840      	ldr	r0, [r0, #4]
 23fa346:	461a      	mov	r2, r3
 23fa348:	f7ff be34 	b.w	23f9fb4 <network_connect>

023fa34c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23fa34c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23fa34e:	2428      	movs	r4, #40	; 0x28
 23fa350:	4b07      	ldr	r3, [pc, #28]	; (23fa370 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23fa352:	4622      	mov	r2, r4
 23fa354:	4618      	mov	r0, r3
 23fa356:	2100      	movs	r1, #0
 23fa358:	f002 f94f 	bl	23fc5fa <memset>
        cid = -1;
 23fa35c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fa360:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fa362:	2204      	movs	r2, #4
 23fa364:	4b03      	ldr	r3, [pc, #12]	; (23fa374 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23fa366:	8004      	strh	r4, [r0, #0]
 23fa368:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23fa36a:	4a03      	ldr	r2, [pc, #12]	; (23fa378 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23fa36c:	601a      	str	r2, [r3, #0]
 23fa36e:	bd10      	pop	{r4, pc}
 23fa370:	1007ae44 	.word	0x1007ae44
 23fa374:	1007ae3c 	.word	0x1007ae3c
 23fa378:	023ff954 	.word	0x023ff954

023fa37c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fa37c:	2200      	movs	r2, #0
 23fa37e:	6840      	ldr	r0, [r0, #4]
 23fa380:	4611      	mov	r1, r2
 23fa382:	f7ff be79 	b.w	23fa078 <network_listening>

023fa386 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fa386:	2200      	movs	r2, #0
 23fa388:	6840      	ldr	r0, [r0, #4]
 23fa38a:	4611      	mov	r1, r2
 23fa38c:	f7ff be90 	b.w	23fa0b0 <network_get_listen_timeout>

023fa390 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fa390:	2200      	movs	r2, #0
 23fa392:	6840      	ldr	r0, [r0, #4]
 23fa394:	f7ff be7e 	b.w	23fa094 <network_set_listen_timeout>

023fa398 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fa398:	2200      	movs	r2, #0
 23fa39a:	6840      	ldr	r0, [r0, #4]
 23fa39c:	f081 0101 	eor.w	r1, r1, #1
 23fa3a0:	f7ff be5c 	b.w	23fa05c <network_listen>

023fa3a4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fa3a4:	2300      	movs	r3, #0
 23fa3a6:	6840      	ldr	r0, [r0, #4]
 23fa3a8:	461a      	mov	r2, r3
 23fa3aa:	4619      	mov	r1, r3
 23fa3ac:	f7ff be48 	b.w	23fa040 <network_off>

023fa3b0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fa3b0:	2300      	movs	r3, #0
 23fa3b2:	6840      	ldr	r0, [r0, #4]
 23fa3b4:	461a      	mov	r2, r3
 23fa3b6:	4619      	mov	r1, r3
 23fa3b8:	f7ff be34 	b.w	23fa024 <network_on>

023fa3bc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fa3bc:	2200      	movs	r2, #0
 23fa3be:	6840      	ldr	r0, [r0, #4]
 23fa3c0:	4611      	mov	r1, r2
 23fa3c2:	f7ff be21 	b.w	23fa008 <network_ready>

023fa3c6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fa3c6:	2200      	movs	r2, #0
 23fa3c8:	6840      	ldr	r0, [r0, #4]
 23fa3ca:	4611      	mov	r1, r2
 23fa3cc:	f7ff be00 	b.w	23f9fd0 <network_connecting>

023fa3d0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fa3d0:	2200      	movs	r2, #0
 23fa3d2:	2102      	movs	r1, #2
 23fa3d4:	6840      	ldr	r0, [r0, #4]
 23fa3d6:	f7ff be09 	b.w	23f9fec <network_disconnect>

023fa3da <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fa3da:	2300      	movs	r3, #0
 23fa3dc:	6840      	ldr	r0, [r0, #4]
 23fa3de:	461a      	mov	r2, r3
 23fa3e0:	f7ff bde8 	b.w	23f9fb4 <network_connect>

023fa3e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23fa3e4:	2203      	movs	r2, #3
 23fa3e6:	4b02      	ldr	r3, [pc, #8]	; (23fa3f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fa3e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fa3ea:	4a02      	ldr	r2, [pc, #8]	; (23fa3f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fa3ec:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fa3ee:	4770      	bx	lr
 23fa3f0:	1007ae6c 	.word	0x1007ae6c
 23fa3f4:	023ff998 	.word	0x023ff998

023fa3f8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fa3f8:	4770      	bx	lr

023fa3fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fa3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa3fc:	4606      	mov	r6, r0
 23fa3fe:	4615      	mov	r5, r2
 23fa400:	460c      	mov	r4, r1
 23fa402:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fa404:	42bc      	cmp	r4, r7
 23fa406:	d006      	beq.n	23fa416 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fa408:	6833      	ldr	r3, [r6, #0]
 23fa40a:	4630      	mov	r0, r6
 23fa40c:	689b      	ldr	r3, [r3, #8]
 23fa40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fa412:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fa414:	e7f6      	b.n	23fa404 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fa416:	4628      	mov	r0, r5
 23fa418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa41a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fa41a:	2200      	movs	r2, #0
 23fa41c:	7c00      	ldrb	r0, [r0, #16]
 23fa41e:	f7ff bba7 	b.w	23f9b70 <hal_i2c_write>

023fa422 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fa422:	2100      	movs	r1, #0
 23fa424:	7c00      	ldrb	r0, [r0, #16]
 23fa426:	f7ff bbb1 	b.w	23f9b8c <hal_i2c_available>

023fa42a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fa42a:	2100      	movs	r1, #0
 23fa42c:	7c00      	ldrb	r0, [r0, #16]
 23fa42e:	f7ff bbbb 	b.w	23f9ba8 <hal_i2c_read>

023fa432 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fa432:	2100      	movs	r1, #0
 23fa434:	7c00      	ldrb	r0, [r0, #16]
 23fa436:	f7ff bbc5 	b.w	23f9bc4 <hal_i2c_peek>

023fa43a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fa43a:	2100      	movs	r1, #0
 23fa43c:	7c00      	ldrb	r0, [r0, #16]
 23fa43e:	f7ff bbcf 	b.w	23f9be0 <hal_i2c_flush>

023fa442 <_ZN7TwoWireD0Ev>:
 23fa442:	b510      	push	{r4, lr}
 23fa444:	4604      	mov	r4, r0
 23fa446:	2114      	movs	r1, #20
 23fa448:	f7fc f941 	bl	23f66ce <_ZdlPvj>
 23fa44c:	4620      	mov	r0, r4
 23fa44e:	bd10      	pop	{r4, pc}

023fa450 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23fa450:	2200      	movs	r2, #0
 23fa452:	e9c0 2200 	strd	r2, r2, [r0]
 23fa456:	2218      	movs	r2, #24
 23fa458:	8002      	strh	r2, [r0, #0]
    };
 23fa45a:	780a      	ldrb	r2, [r1, #0]
 23fa45c:	7102      	strb	r2, [r0, #4]
 23fa45e:	684a      	ldr	r2, [r1, #4]
 23fa460:	6082      	str	r2, [r0, #8]
 23fa462:	68ca      	ldr	r2, [r1, #12]
 23fa464:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23fa466:	7a0a      	ldrb	r2, [r1, #8]
 23fa468:	6102      	str	r2, [r0, #16]
    };
 23fa46a:	690a      	ldr	r2, [r1, #16]
 23fa46c:	6142      	str	r2, [r0, #20]
  }
 23fa46e:	4770      	bx	lr

023fa470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fa470:	b538      	push	{r3, r4, r5, lr}
 23fa472:	4604      	mov	r4, r0
 23fa474:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fa476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fa47a:	2200      	movs	r2, #0
 23fa47c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fa480:	4b09      	ldr	r3, [pc, #36]	; (23fa4a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fa482:	4608      	mov	r0, r1
  _i2c = i2c;
 23fa484:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fa486:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fa488:	4629      	mov	r1, r5
 23fa48a:	f7ff fbb7 	bl	23f9bfc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fa48e:	30bf      	adds	r0, #191	; 0xbf
 23fa490:	d108      	bne.n	23fa4a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fa492:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fa494:	07db      	lsls	r3, r3, #31
 23fa496:	d505      	bpl.n	23fa4a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fa498:	6868      	ldr	r0, [r5, #4]
 23fa49a:	f7ff fe5d 	bl	23fa158 <free>
    free(conf.tx_buffer);
 23fa49e:	68e8      	ldr	r0, [r5, #12]
 23fa4a0:	f7ff fe5a 	bl	23fa158 <free>
}
 23fa4a4:	4620      	mov	r0, r4
 23fa4a6:	bd38      	pop	{r3, r4, r5, pc}
 23fa4a8:	023ff9dc 	.word	0x023ff9dc

023fa4ac <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fa4ac:	b510      	push	{r4, lr}
 23fa4ae:	4604      	mov	r4, r0
 23fa4b0:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23fa4b2:	4668      	mov	r0, sp
 23fa4b4:	f7ff ffcc 	bl	23fa450 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fa4b8:	2200      	movs	r2, #0
 23fa4ba:	4669      	mov	r1, sp
 23fa4bc:	7c20      	ldrb	r0, [r4, #16]
 23fa4be:	f7ff fbab 	bl	23f9c18 <hal_i2c_request_ex>
}
 23fa4c2:	b006      	add	sp, #24
 23fa4c4:	bd10      	pop	{r4, pc}

023fa4c6 <_ZN7TwoWire11requestFromEhjh>:
{
 23fa4c6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23fa4c8:	f88d 1004 	strb.w	r1, [sp, #4]
 23fa4cc:	2100      	movs	r1, #0
 23fa4ce:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fa4d2:	1a5b      	subs	r3, r3, r1
 23fa4d4:	bf18      	it	ne
 23fa4d6:	2301      	movne	r3, #1
 23fa4d8:	e9cd c104 	strd	ip, r1, [sp, #16]
 23fa4dc:	a901      	add	r1, sp, #4
    size_ = size;
 23fa4de:	9202      	str	r2, [sp, #8]
 23fa4e0:	f88d 300c 	strb.w	r3, [sp, #12]
 23fa4e4:	f7ff ffe2 	bl	23fa4ac <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fa4e8:	b007      	add	sp, #28
 23fa4ea:	f85d fb04 	ldr.w	pc, [sp], #4

023fa4ee <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fa4ee:	2301      	movs	r3, #1
 23fa4f0:	f7ff bfe9 	b.w	23fa4c6 <_ZN7TwoWire11requestFromEhjh>

023fa4f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fa4f4:	2200      	movs	r2, #0
 23fa4f6:	7c00      	ldrb	r0, [r0, #16]
 23fa4f8:	f7ff bb1e 	b.w	23f9b38 <hal_i2c_begin_transmission>

023fa4fc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fa4fc:	2200      	movs	r2, #0
 23fa4fe:	7c00      	ldrb	r0, [r0, #16]
 23fa500:	f7ff bb28 	b.w	23f9b54 <hal_i2c_end_transmission>

023fa504 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fa504:	2101      	movs	r1, #1
 23fa506:	f7ff bff9 	b.w	23fa4fc <_ZN7TwoWire15endTransmissionEh>
	...

023fa50c <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fa50c:	21ff      	movs	r1, #255	; 0xff
 23fa50e:	2200      	movs	r2, #0
      : address_{address},
 23fa510:	4b04      	ldr	r3, [pc, #16]	; (23fa524 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fa512:	2001      	movs	r0, #1
 23fa514:	e9c3 1200 	strd	r1, r2, [r3]
 23fa518:	2164      	movs	r1, #100	; 0x64
 23fa51a:	611a      	str	r2, [r3, #16]
 23fa51c:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fa520:	4770      	bx	lr
 23fa522:	bf00      	nop
 23fa524:	1007ae74 	.word	0x1007ae74

023fa528 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fa528:	4770      	bx	lr

023fa52a <_ZN9IPAddressD0Ev>:
 23fa52a:	b510      	push	{r4, lr}
 23fa52c:	4604      	mov	r4, r0
 23fa52e:	2118      	movs	r1, #24
 23fa530:	f7fc f8cd 	bl	23f66ce <_ZdlPvj>
 23fa534:	4620      	mov	r0, r4
 23fa536:	bd10      	pop	{r4, pc}

023fa538 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fa538:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fa53a:	7d03      	ldrb	r3, [r0, #20]
{
 23fa53c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fa53e:	2b06      	cmp	r3, #6
 23fa540:	f04f 0400 	mov.w	r4, #0
{
 23fa544:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa546:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fa54a:	d012      	beq.n	23fa572 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fa54c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fa550:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fa554:	220a      	movs	r2, #10
 23fa556:	4630      	mov	r0, r6
 23fa558:	f001 fb07 	bl	23fbb6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fa55c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fa55e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fa560:	d019      	beq.n	23fa596 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fa562:	2c00      	cmp	r4, #0
 23fa564:	d0f4      	beq.n	23fa550 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fa566:	212e      	movs	r1, #46	; 0x2e
 23fa568:	4630      	mov	r0, r6
 23fa56a:	f001 fae5 	bl	23fbb38 <_ZN5Print5printEc>
 23fa56e:	4404      	add	r4, r0
 23fa570:	e7ee      	b.n	23fa550 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa572:	232f      	movs	r3, #47	; 0x2f
 23fa574:	466a      	mov	r2, sp
 23fa576:	4639      	mov	r1, r7
 23fa578:	200a      	movs	r0, #10
		buf[0] = 0;
 23fa57a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fa57e:	f7ff fb59 	bl	23f9c34 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fa582:	4668      	mov	r0, sp
 23fa584:	f7fc f878 	bl	23f6678 <strlen>
 23fa588:	6833      	ldr	r3, [r6, #0]
 23fa58a:	4602      	mov	r2, r0
 23fa58c:	4669      	mov	r1, sp
 23fa58e:	4630      	mov	r0, r6
 23fa590:	68db      	ldr	r3, [r3, #12]
 23fa592:	4798      	blx	r3
 23fa594:	4604      	mov	r4, r0
    }
    return n;
}
 23fa596:	4620      	mov	r0, r4
 23fa598:	b00d      	add	sp, #52	; 0x34
 23fa59a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fa59c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fa59c:	b510      	push	{r4, lr}
 23fa59e:	4604      	mov	r4, r0
 23fa5a0:	4b04      	ldr	r3, [pc, #16]	; (23fa5b4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fa5a2:	2211      	movs	r2, #17
 23fa5a4:	2100      	movs	r1, #0
 23fa5a6:	f840 3b04 	str.w	r3, [r0], #4
 23fa5aa:	f002 f826 	bl	23fc5fa <memset>
}
 23fa5ae:	4620      	mov	r0, r4
 23fa5b0:	bd10      	pop	{r4, pc}
 23fa5b2:	bf00      	nop
 23fa5b4:	023ffa08 	.word	0x023ffa08

023fa5b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fa5b8:	4603      	mov	r3, r0
 23fa5ba:	4a07      	ldr	r2, [pc, #28]	; (23fa5d8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fa5bc:	b510      	push	{r4, lr}
 23fa5be:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fa5c2:	f101 0210 	add.w	r2, r1, #16
 23fa5c6:	f851 4b04 	ldr.w	r4, [r1], #4
 23fa5ca:	4291      	cmp	r1, r2
 23fa5cc:	f843 4b04 	str.w	r4, [r3], #4
 23fa5d0:	d1f9      	bne.n	23fa5c6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fa5d2:	780a      	ldrb	r2, [r1, #0]
 23fa5d4:	701a      	strb	r2, [r3, #0]
}
 23fa5d6:	bd10      	pop	{r4, pc}
 23fa5d8:	023ffa08 	.word	0x023ffa08

023fa5dc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fa5dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fa5de:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fa5e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fa5e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fa5ea:	2304      	movs	r3, #4
 23fa5ec:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fa5f0:	6041      	str	r1, [r0, #4]
 23fa5f2:	7503      	strb	r3, [r0, #20]
}
 23fa5f4:	bd10      	pop	{r4, pc}
	...

023fa5f8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fa5f8:	b507      	push	{r0, r1, r2, lr}
 23fa5fa:	4b06      	ldr	r3, [pc, #24]	; (23fa614 <_ZN9IPAddressC1EPKh+0x1c>)
 23fa5fc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fa5fe:	78cb      	ldrb	r3, [r1, #3]
 23fa600:	9300      	str	r3, [sp, #0]
 23fa602:	788b      	ldrb	r3, [r1, #2]
 23fa604:	784a      	ldrb	r2, [r1, #1]
 23fa606:	7809      	ldrb	r1, [r1, #0]
 23fa608:	f7ff ffe8 	bl	23fa5dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fa60c:	b003      	add	sp, #12
 23fa60e:	f85d fb04 	ldr.w	pc, [sp], #4
 23fa612:	bf00      	nop
 23fa614:	023ffa08 	.word	0x023ffa08

023fa618 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fa618:	2201      	movs	r2, #1
 23fa61a:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fa61e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fa622:	4618      	mov	r0, r3
 23fa624:	2901      	cmp	r1, #1
 23fa626:	d108      	bne.n	23fa63a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fa628:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fa62c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fa630:	3a01      	subs	r2, #1
 23fa632:	f103 0310 	add.w	r3, r3, #16
 23fa636:	d1f2      	bne.n	23fa61e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fa638:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fa63a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fa63c:	bf04      	itt	eq
 23fa63e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fa642:	1852      	addeq	r2, r2, r1
 23fa644:	e7f4      	b.n	23fa630 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fa646 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa646:	b40e      	push	{r1, r2, r3}
 23fa648:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa64a:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa64c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fa64e:	af00      	add	r7, sp, #0
 23fa650:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fa654:	f855 2b04 	ldr.w	r2, [r5], #4
 23fa658:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa65a:	462b      	mov	r3, r5
 23fa65c:	1878      	adds	r0, r7, r1
 23fa65e:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fa660:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa662:	f7ff fda3 	bl	23fa1ac <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fa666:	280f      	cmp	r0, #15
 23fa668:	687a      	ldr	r2, [r7, #4]
 23fa66a:	d91a      	bls.n	23fa6a2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fa66c:	f100 0308 	add.w	r3, r0, #8
 23fa670:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fa674:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fa676:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa67a:	1c41      	adds	r1, r0, #1
 23fa67c:	462b      	mov	r3, r5
 23fa67e:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fa680:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fa682:	f7ff fd93 	bl	23fa1ac <vsnprintf>
        if (n > 0) {
 23fa686:	1e02      	subs	r2, r0, #0
 23fa688:	dd04      	ble.n	23fa694 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fa68a:	6823      	ldr	r3, [r4, #0]
 23fa68c:	4669      	mov	r1, sp
 23fa68e:	4620      	mov	r0, r4
 23fa690:	689b      	ldr	r3, [r3, #8]
 23fa692:	4798      	blx	r3
 23fa694:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fa696:	3720      	adds	r7, #32
 23fa698:	46bd      	mov	sp, r7
 23fa69a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fa69e:	b003      	add	sp, #12
 23fa6a0:	4770      	bx	lr
    } else if (n > 0) {
 23fa6a2:	2800      	cmp	r0, #0
 23fa6a4:	d0f7      	beq.n	23fa696 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fa6a6:	6823      	ldr	r3, [r4, #0]
 23fa6a8:	4602      	mov	r2, r0
 23fa6aa:	689b      	ldr	r3, [r3, #8]
 23fa6ac:	4620      	mov	r0, r4
 23fa6ae:	f107 0110 	add.w	r1, r7, #16
 23fa6b2:	4798      	blx	r3
}
 23fa6b4:	e7ef      	b.n	23fa696 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fa6b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa6b6:	b538      	push	{r3, r4, r5, lr}
 23fa6b8:	680b      	ldr	r3, [r1, #0]
 23fa6ba:	4604      	mov	r4, r0
 23fa6bc:	6003      	str	r3, [r0, #0]
 23fa6be:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fa6c0:	6843      	ldr	r3, [r0, #4]
 23fa6c2:	429d      	cmp	r5, r3
 23fa6c4:	d008      	beq.n	23fa6d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fa6c6:	b115      	cbz	r5, 23fa6ce <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fa6c8:	686b      	ldr	r3, [r5, #4]
 23fa6ca:	3301      	adds	r3, #1
 23fa6cc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fa6ce:	6860      	ldr	r0, [r4, #4]
 23fa6d0:	b108      	cbz	r0, 23fa6d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fa6d2:	f7ff fdd8 	bl	23fa286 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fa6d6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa6d8:	bd38      	pop	{r3, r4, r5, pc}

023fa6da <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fa6da:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fa6dc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fa6de:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fa6e2:	2201      	movs	r2, #1
 23fa6e4:	689b      	ldr	r3, [r3, #8]
 23fa6e6:	f10d 0107 	add.w	r1, sp, #7
 23fa6ea:	4798      	blx	r3
}
 23fa6ec:	b003      	add	sp, #12
 23fa6ee:	f85d fb04 	ldr.w	pc, [sp], #4

023fa6f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa6f2:	460b      	mov	r3, r1
 23fa6f4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fa6f6:	2200      	movs	r2, #0
 23fa6f8:	b510      	push	{r4, lr}
 23fa6fa:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa6fc:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fa700:	6083      	str	r3, [r0, #8]
    if (t) {
 23fa702:	b90b      	cbnz	r3, 23fa708 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fa704:	4620      	mov	r0, r4
 23fa706:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fa708:	f7ff ffd5 	bl	23fa6b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fa70c:	e7fa      	b.n	23fa704 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fa70e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fa70e:	6883      	ldr	r3, [r0, #8]
 23fa710:	b1eb      	cbz	r3, 23fa74e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fa712:	781a      	ldrb	r2, [r3, #0]
 23fa714:	2a03      	cmp	r2, #3
 23fa716:	d81a      	bhi.n	23fa74e <_ZNK5spark9JSONValue4typeEv+0x40>
 23fa718:	e8df f002 	tbb	[pc, r2]
 23fa71c:	1b021704 	.word	0x1b021704
 23fa720:	2005      	movs	r0, #5
 23fa722:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fa724:	6802      	ldr	r2, [r0, #0]
 23fa726:	685b      	ldr	r3, [r3, #4]
 23fa728:	6852      	ldr	r2, [r2, #4]
 23fa72a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fa72c:	282d      	cmp	r0, #45	; 0x2d
 23fa72e:	d012      	beq.n	23fa756 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fa730:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fa734:	2b09      	cmp	r3, #9
 23fa736:	d90e      	bls.n	23fa756 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fa738:	2874      	cmp	r0, #116	; 0x74
 23fa73a:	d00e      	beq.n	23fa75a <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fa73c:	2866      	cmp	r0, #102	; 0x66
 23fa73e:	d00c      	beq.n	23fa75a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fa740:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fa744:	4258      	negs	r0, r3
 23fa746:	4158      	adcs	r0, r3
 23fa748:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fa74a:	2006      	movs	r0, #6
 23fa74c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fa74e:	2000      	movs	r0, #0
 23fa750:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fa752:	2004      	movs	r0, #4
 23fa754:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fa756:	2003      	movs	r0, #3
 23fa758:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fa75a:	2002      	movs	r0, #2
}
 23fa75c:	4770      	bx	lr

023fa75e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fa75e:	b510      	push	{r4, lr}
 23fa760:	4604      	mov	r4, r0
    switch (type()) {
 23fa762:	f7ff ffd4 	bl	23fa70e <_ZNK5spark9JSONValue4typeEv>
 23fa766:	2802      	cmp	r0, #2
 23fa768:	d00e      	beq.n	23fa788 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fa76a:	1ec3      	subs	r3, r0, #3
 23fa76c:	b2db      	uxtb	r3, r3
 23fa76e:	2b01      	cmp	r3, #1
 23fa770:	d814      	bhi.n	23fa79c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fa772:	6822      	ldr	r2, [r4, #0]
 23fa774:	68a3      	ldr	r3, [r4, #8]
 23fa776:	6850      	ldr	r0, [r2, #4]
 23fa778:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fa77a:	220a      	movs	r2, #10
}
 23fa77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fa780:	2100      	movs	r1, #0
 23fa782:	4418      	add	r0, r3
 23fa784:	f002 be74 	b.w	23fd470 <strtol>
        const char* const s = d_->json + t_->start;
 23fa788:	6822      	ldr	r2, [r4, #0]
 23fa78a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fa78c:	6852      	ldr	r2, [r2, #4]
 23fa78e:	685b      	ldr	r3, [r3, #4]
 23fa790:	5cd0      	ldrb	r0, [r2, r3]
 23fa792:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fa796:	4258      	negs	r0, r3
 23fa798:	4158      	adcs	r0, r3
}
 23fa79a:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fa79c:	2000      	movs	r0, #0
 23fa79e:	e7fc      	b.n	23fa79a <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fa7a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa7a0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa7a2:	2300      	movs	r3, #0
 23fa7a4:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa7a6:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fa7aa:	480e      	ldr	r0, [pc, #56]	; (23fa7e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fa7ac:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fa7b0:	b1a9      	cbz	r1, 23fa7de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fa7b2:	780b      	ldrb	r3, [r1, #0]
 23fa7b4:	2b03      	cmp	r3, #3
 23fa7b6:	d006      	beq.n	23fa7c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fa7b8:	b98b      	cbnz	r3, 23fa7de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fa7ba:	6813      	ldr	r3, [r2, #0]
 23fa7bc:	6858      	ldr	r0, [r3, #4]
 23fa7be:	684b      	ldr	r3, [r1, #4]
 23fa7c0:	5cc3      	ldrb	r3, [r0, r3]
 23fa7c2:	2b6e      	cmp	r3, #110	; 0x6e
 23fa7c4:	d007      	beq.n	23fa7d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fa7c6:	6813      	ldr	r3, [r2, #0]
 23fa7c8:	684d      	ldr	r5, [r1, #4]
 23fa7ca:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fa7cc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fa7ce:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fa7d0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fa7d2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fa7d4:	60e3      	str	r3, [r4, #12]
 23fa7d6:	4611      	mov	r1, r2
 23fa7d8:	4620      	mov	r0, r4
 23fa7da:	f7ff ff6c 	bl	23fa6b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa7de:	4620      	mov	r0, r4
 23fa7e0:	bd38      	pop	{r3, r4, r5, pc}
 23fa7e2:	bf00      	nop
 23fa7e4:	023fe9d8 	.word	0x023fe9d8

023fa7e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fa7e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fa7ea:	2500      	movs	r5, #0
 23fa7ec:	460b      	mov	r3, r1
 23fa7ee:	4604      	mov	r4, r0
 23fa7f0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fa7f2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fa7f6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fa7fa:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fa7fe:	b14b      	cbz	r3, 23fa814 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fa800:	781a      	ldrb	r2, [r3, #0]
 23fa802:	2a01      	cmp	r2, #1
 23fa804:	d106      	bne.n	23fa814 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fa806:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fa80a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fa80c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fa80e:	6143      	str	r3, [r0, #20]
 23fa810:	f7ff ff51 	bl	23fa6b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fa814:	4620      	mov	r0, r4
 23fa816:	bd38      	pop	{r3, r4, r5, pc}

023fa818 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fa818:	b510      	push	{r4, lr}
    if (!n_) {
 23fa81a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fa81c:	4604      	mov	r4, r0
    if (!n_) {
 23fa81e:	b163      	cbz	r3, 23fa83a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fa820:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fa822:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fa824:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fa826:	3010      	adds	r0, #16
 23fa828:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fa82a:	6120      	str	r0, [r4, #16]
    --n_;
 23fa82c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fa82e:	b113      	cbz	r3, 23fa836 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fa830:	f7ff fef2 	bl	23fa618 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fa834:	60a0      	str	r0, [r4, #8]
    return true;
 23fa836:	2001      	movs	r0, #1
 23fa838:	e000      	b.n	23fa83c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fa83a:	4618      	mov	r0, r3
}
 23fa83c:	bd10      	pop	{r4, pc}

023fa83e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa83e:	b510      	push	{r4, lr}
    write('}');
 23fa840:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fa842:	4604      	mov	r4, r0
    write('}');
 23fa844:	f7ff ff49 	bl	23fa6da <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fa848:	2301      	movs	r3, #1
}
 23fa84a:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa84c:	7123      	strb	r3, [r4, #4]
}
 23fa84e:	bd10      	pop	{r4, pc}

023fa850 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fa850:	b508      	push	{r3, lr}
    switch (state_) {
 23fa852:	7903      	ldrb	r3, [r0, #4]
 23fa854:	2b01      	cmp	r3, #1
 23fa856:	d002      	beq.n	23fa85e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fa858:	2b02      	cmp	r3, #2
 23fa85a:	d004      	beq.n	23fa866 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fa85c:	bd08      	pop	{r3, pc}
        write(',');
 23fa85e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fa860:	f7ff ff3b 	bl	23fa6da <_ZN5spark10JSONWriter5writeEc>
}
 23fa864:	e7fa      	b.n	23fa85c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fa866:	213a      	movs	r1, #58	; 0x3a
 23fa868:	e7fa      	b.n	23fa860 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fa86a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fa86a:	b510      	push	{r4, lr}
 23fa86c:	4604      	mov	r4, r0
    writeSeparator();
 23fa86e:	f7ff ffef 	bl	23fa850 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fa872:	4620      	mov	r0, r4
 23fa874:	217b      	movs	r1, #123	; 0x7b
 23fa876:	f7ff ff30 	bl	23fa6da <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fa87a:	2300      	movs	r3, #0
}
 23fa87c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fa87e:	7123      	strb	r3, [r4, #4]
}
 23fa880:	bd10      	pop	{r4, pc}
	...

023fa884 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fa884:	b513      	push	{r0, r1, r4, lr}
 23fa886:	4604      	mov	r4, r0
 23fa888:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa88a:	f7ff ffe1 	bl	23fa850 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fa88e:	6823      	ldr	r3, [r4, #0]
 23fa890:	4620      	mov	r0, r4
 23fa892:	68db      	ldr	r3, [r3, #12]
 23fa894:	9a01      	ldr	r2, [sp, #4]
 23fa896:	4903      	ldr	r1, [pc, #12]	; (23fa8a4 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fa898:	4798      	blx	r3
    state_ = NEXT;
 23fa89a:	2301      	movs	r3, #1
}
 23fa89c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa89e:	7123      	strb	r3, [r4, #4]
}
 23fa8a0:	b002      	add	sp, #8
 23fa8a2:	bd10      	pop	{r4, pc}
 23fa8a4:	023ffa14 	.word	0x023ffa14

023fa8a8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fa8a8:	b513      	push	{r0, r1, r4, lr}
 23fa8aa:	4604      	mov	r4, r0
 23fa8ac:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fa8ae:	f7ff ffcf 	bl	23fa850 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fa8b2:	6823      	ldr	r3, [r4, #0]
 23fa8b4:	4620      	mov	r0, r4
 23fa8b6:	68db      	ldr	r3, [r3, #12]
 23fa8b8:	9a01      	ldr	r2, [sp, #4]
 23fa8ba:	4903      	ldr	r1, [pc, #12]	; (23fa8c8 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fa8bc:	4798      	blx	r3
    state_ = NEXT;
 23fa8be:	2301      	movs	r3, #1
}
 23fa8c0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa8c2:	7123      	strb	r3, [r4, #4]
}
 23fa8c4:	b002      	add	sp, #8
 23fa8c6:	bd10      	pop	{r4, pc}
 23fa8c8:	023ffa17 	.word	0x023ffa17

023fa8cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa8d0:	460d      	mov	r5, r1
 23fa8d2:	4690      	mov	r8, r2
    write('"');
 23fa8d4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fa8d6:	4604      	mov	r4, r0
 23fa8d8:	462f      	mov	r7, r5
    write('"');
 23fa8da:	f7ff fefe 	bl	23fa6da <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fa8de:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fa984 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fa8e2:	44a8      	add	r8, r5
    while (s != end) {
 23fa8e4:	4547      	cmp	r7, r8
 23fa8e6:	46ba      	mov	sl, r7
 23fa8e8:	d03d      	beq.n	23fa966 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fa8ea:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fa8ee:	2e22      	cmp	r6, #34	; 0x22
 23fa8f0:	d006      	beq.n	23fa900 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa8f2:	2e5c      	cmp	r6, #92	; 0x5c
 23fa8f4:	d004      	beq.n	23fa900 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fa8f6:	4630      	mov	r0, r6
 23fa8f8:	f001 fe48 	bl	23fc58c <isprint>
 23fa8fc:	2800      	cmp	r0, #0
 23fa8fe:	d1f1      	bne.n	23fa8e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fa900:	6823      	ldr	r3, [r4, #0]
 23fa902:	4629      	mov	r1, r5
 23fa904:	4620      	mov	r0, r4
 23fa906:	689b      	ldr	r3, [r3, #8]
 23fa908:	ebaa 0205 	sub.w	r2, sl, r5
 23fa90c:	4798      	blx	r3
            write('\\');
 23fa90e:	215c      	movs	r1, #92	; 0x5c
 23fa910:	4620      	mov	r0, r4
 23fa912:	f7ff fee2 	bl	23fa6da <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fa916:	2e0d      	cmp	r6, #13
 23fa918:	d80a      	bhi.n	23fa930 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fa91a:	2e07      	cmp	r6, #7
 23fa91c:	d91c      	bls.n	23fa958 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa91e:	f1a6 0308 	sub.w	r3, r6, #8
 23fa922:	2b05      	cmp	r3, #5
 23fa924:	d818      	bhi.n	23fa958 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fa926:	e8df f003 	tbb	[pc, r3]
 23fa92a:	0f0d      	.short	0x0f0d
 23fa92c:	15131711 	.word	0x15131711
 23fa930:	2e22      	cmp	r6, #34	; 0x22
 23fa932:	d001      	beq.n	23fa938 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fa934:	2e5c      	cmp	r6, #92	; 0x5c
 23fa936:	d10f      	bne.n	23fa958 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fa938:	4631      	mov	r1, r6
                write('b');
 23fa93a:	4620      	mov	r0, r4
 23fa93c:	f7ff fecd 	bl	23fa6da <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fa940:	463d      	mov	r5, r7
    while (s != end) {
 23fa942:	e7cf      	b.n	23fa8e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fa944:	2162      	movs	r1, #98	; 0x62
 23fa946:	e7f8      	b.n	23fa93a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fa948:	2174      	movs	r1, #116	; 0x74
 23fa94a:	e7f6      	b.n	23fa93a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fa94c:	216e      	movs	r1, #110	; 0x6e
 23fa94e:	e7f4      	b.n	23fa93a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fa950:	2166      	movs	r1, #102	; 0x66
 23fa952:	e7f2      	b.n	23fa93a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fa954:	2172      	movs	r1, #114	; 0x72
 23fa956:	e7f0      	b.n	23fa93a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fa958:	6823      	ldr	r3, [r4, #0]
 23fa95a:	4632      	mov	r2, r6
 23fa95c:	4649      	mov	r1, r9
 23fa95e:	4620      	mov	r0, r4
 23fa960:	68db      	ldr	r3, [r3, #12]
 23fa962:	4798      	blx	r3
                break;
 23fa964:	e7ec      	b.n	23fa940 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fa966:	42bd      	cmp	r5, r7
 23fa968:	d005      	beq.n	23fa976 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fa96a:	6823      	ldr	r3, [r4, #0]
 23fa96c:	4629      	mov	r1, r5
 23fa96e:	4620      	mov	r0, r4
 23fa970:	689b      	ldr	r3, [r3, #8]
 23fa972:	1b7a      	subs	r2, r7, r5
 23fa974:	4798      	blx	r3
    }
    write('"');
 23fa976:	2122      	movs	r1, #34	; 0x22
 23fa978:	4620      	mov	r0, r4
 23fa97a:	f7ff feae 	bl	23fa6da <_ZN5spark10JSONWriter5writeEc>
}
 23fa97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa982:	bf00      	nop
 23fa984:	023ffa1a 	.word	0x023ffa1a

023fa988 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fa988:	b513      	push	{r0, r1, r4, lr}
 23fa98a:	4604      	mov	r4, r0
 23fa98c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa990:	f7ff ff5e 	bl	23fa850 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fa994:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa998:	4620      	mov	r0, r4
 23fa99a:	f7ff ff97 	bl	23fa8cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fa99e:	2302      	movs	r3, #2
}
 23fa9a0:	4620      	mov	r0, r4
    state_ = VALUE;
 23fa9a2:	7123      	strb	r3, [r4, #4]
}
 23fa9a4:	b002      	add	sp, #8
 23fa9a6:	bd10      	pop	{r4, pc}

023fa9a8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fa9a8:	b513      	push	{r0, r1, r4, lr}
 23fa9aa:	4604      	mov	r4, r0
 23fa9ac:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fa9b0:	f7ff ff4e 	bl	23fa850 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fa9b4:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fa9b8:	4620      	mov	r0, r4
 23fa9ba:	f7ff ff87 	bl	23fa8cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fa9be:	2301      	movs	r3, #1
}
 23fa9c0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fa9c2:	7123      	strb	r3, [r4, #4]
}
 23fa9c4:	b002      	add	sp, #8
 23fa9c6:	bd10      	pop	{r4, pc}

023fa9c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fa9c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa9cc:	4604      	mov	r4, r0
 23fa9ce:	460d      	mov	r5, r1
 23fa9d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa9d2:	d914      	bls.n	23fa9fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fa9d4:	4290      	cmp	r0, r2
 23fa9d6:	d213      	bcs.n	23faa00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fa9d8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fa9dc:	1a75      	subs	r5, r6, r1
 23fa9de:	f1a1 0710 	sub.w	r7, r1, #16
 23fa9e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa9e4:	42b7      	cmp	r7, r6
 23fa9e6:	d018      	beq.n	23faa1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fa9e8:	b11c      	cbz	r4, 23fa9f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fa9ea:	4631      	mov	r1, r6
 23fa9ec:	4620      	mov	r0, r4
 23fa9ee:	f001 f9a0 	bl	23fbd32 <_ZN6StringC1EOS_>
                end->~T();
 23fa9f2:	4630      	mov	r0, r6
 23fa9f4:	f001 f920 	bl	23fbc38 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fa9f8:	3e10      	subs	r6, #16
 23fa9fa:	3c10      	subs	r4, #16
 23fa9fc:	e7f2      	b.n	23fa9e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fa9fe:	d00c      	beq.n	23faa1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23faa00:	42b5      	cmp	r5, r6
 23faa02:	d00a      	beq.n	23faa1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23faa04:	b11c      	cbz	r4, 23faa0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23faa06:	4629      	mov	r1, r5
 23faa08:	4620      	mov	r0, r4
 23faa0a:	f001 f992 	bl	23fbd32 <_ZN6StringC1EOS_>
                p->~T();
 23faa0e:	4628      	mov	r0, r5
 23faa10:	f001 f912 	bl	23fbc38 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23faa14:	3510      	adds	r5, #16
 23faa16:	3410      	adds	r4, #16
 23faa18:	e7f2      	b.n	23faa00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23faa1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023faa1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23faa1c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23faa1e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23faa20:	4605      	mov	r5, r0
        if (n > 0) {
 23faa22:	dd11      	ble.n	23faa48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23faa24:	0130      	lsls	r0, r6, #4
 23faa26:	f7ff fb89 	bl	23fa13c <malloc>
            if (!d) {
 23faa2a:	4604      	mov	r4, r0
 23faa2c:	b158      	cbz	r0, 23faa46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23faa2e:	e9d5 1200 	ldrd	r1, r2, [r5]
 23faa32:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23faa36:	f7ff ffc7 	bl	23fa9c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23faa3a:	6828      	ldr	r0, [r5, #0]
 23faa3c:	f7ff fb8c 	bl	23fa158 <free>
        return true;
 23faa40:	2001      	movs	r0, #1
        data_ = d;
 23faa42:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23faa44:	60ae      	str	r6, [r5, #8]
    }
 23faa46:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23faa48:	2400      	movs	r4, #0
 23faa4a:	e7f6      	b.n	23faa3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023faa4c <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23faa4c:	b510      	push	{r4, lr}
 23faa4e:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23faa50:	6880      	ldr	r0, [r0, #8]
 23faa52:	6803      	ldr	r3, [r0, #0]
 23faa54:	68db      	ldr	r3, [r3, #12]
 23faa56:	4798      	blx	r3
 23faa58:	68e3      	ldr	r3, [r4, #12]
 23faa5a:	4418      	add	r0, r3
 23faa5c:	60e0      	str	r0, [r4, #12]
}
 23faa5e:	bd10      	pop	{r4, pc}

023faa60 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23faa60:	4770      	bx	lr

023faa62 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23faa62:	4608      	mov	r0, r1
 23faa64:	b111      	cbz	r1, 23faa6c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23faa66:	680b      	ldr	r3, [r1, #0]
 23faa68:	685b      	ldr	r3, [r3, #4]
 23faa6a:	4718      	bx	r3
}
 23faa6c:	4770      	bx	lr

023faa6e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23faa6e:	4770      	bx	lr

023faa70 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23faa70:	4770      	bx	lr

023faa72 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23faa72:	4770      	bx	lr

023faa74 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23faa74:	4770      	bx	lr

023faa76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23faa76:	b538      	push	{r3, r4, r5, lr}
 23faa78:	4604      	mov	r4, r0
 23faa7a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23faa7c:	6800      	ldr	r0, [r0, #0]
 23faa7e:	212e      	movs	r1, #46	; 0x2e
 23faa80:	f001 fe0d 	bl	23fc69e <strchrnul>
    size = s - category;
 23faa84:	6823      	ldr	r3, [r4, #0]
 23faa86:	1ac3      	subs	r3, r0, r3
 23faa88:	602b      	str	r3, [r5, #0]
    if (size) {
 23faa8a:	b123      	cbz	r3, 23faa96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23faa8c:	7803      	ldrb	r3, [r0, #0]
 23faa8e:	b103      	cbz	r3, 23faa92 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23faa90:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23faa92:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23faa94:	6020      	str	r0, [r4, #0]
}
 23faa96:	4618      	mov	r0, r3
 23faa98:	bd38      	pop	{r3, r4, r5, pc}

023faa9a <_ZN5spark16JSONStreamWriterD0Ev>:
 23faa9a:	b510      	push	{r4, lr}
 23faa9c:	4604      	mov	r4, r0
 23faa9e:	2110      	movs	r1, #16
 23faaa0:	f7fb fe15 	bl	23f66ce <_ZdlPvj>
 23faaa4:	4620      	mov	r0, r4
 23faaa6:	bd10      	pop	{r4, pc}

023faaa8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23faaa8:	b510      	push	{r4, lr}
 23faaaa:	4604      	mov	r4, r0
 23faaac:	2104      	movs	r1, #4
 23faaae:	f7fb fe0e 	bl	23f66ce <_ZdlPvj>
 23faab2:	4620      	mov	r0, r4
 23faab4:	bd10      	pop	{r4, pc}

023faab6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23faab6:	b510      	push	{r4, lr}
 23faab8:	4604      	mov	r4, r0
 23faaba:	2104      	movs	r1, #4
 23faabc:	f7fb fe07 	bl	23f66ce <_ZdlPvj>
 23faac0:	4620      	mov	r0, r4
 23faac2:	bd10      	pop	{r4, pc}

023faac4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23faac4:	f7fe bfac 	b.w	23f9a20 <os_mutex_recursive_lock>

023faac8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23faac8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23faaca:	f7fb fdcb 	bl	23f6664 <strcmp>
}
 23faace:	fab0 f080 	clz	r0, r0
 23faad2:	0940      	lsrs	r0, r0, #5
 23faad4:	bd08      	pop	{r3, pc}

023faad6 <__tcf_1>:
 23faad6:	4770      	bx	lr

023faad8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23faad8:	b510      	push	{r4, lr}
 23faada:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23faadc:	f001 fabc 	bl	23fc058 <_Z16_fetch_usbserialv>
 23faae0:	4284      	cmp	r4, r0
 23faae2:	d105      	bne.n	23faaf0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23faae4:	f001 fab8 	bl	23fc058 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23faae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23faaec:	f001 baa6 	b.w	23fc03c <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23faaf0:	f001 fc44 	bl	23fc37c <_Z22__fetch_global_Serial1v>
 23faaf4:	4284      	cmp	r4, r0
 23faaf6:	d105      	bne.n	23fab04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23faaf8:	f001 fc40 	bl	23fc37c <_Z22__fetch_global_Serial1v>
}
 23faafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fab00:	f001 ba3f 	b.w	23fbf82 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fab04:	b12c      	cbz	r4, 23fab12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fab06:	6823      	ldr	r3, [r4, #0]
 23fab08:	4620      	mov	r0, r4
}
 23fab0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fab0e:	685b      	ldr	r3, [r3, #4]
 23fab10:	4718      	bx	r3
 23fab12:	bd10      	pop	{r4, pc}

023fab14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fab14:	680b      	ldr	r3, [r1, #0]
 23fab16:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fab18:	684b      	ldr	r3, [r1, #4]
 23fab1a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fab1c:	b113      	cbz	r3, 23fab24 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fab1e:	685a      	ldr	r2, [r3, #4]
 23fab20:	3201      	adds	r2, #1
 23fab22:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fab24:	4770      	bx	lr

023fab26 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fab26:	b513      	push	{r0, r1, r4, lr}
 23fab28:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fab2a:	4608      	mov	r0, r1
 23fab2c:	9101      	str	r1, [sp, #4]
 23fab2e:	f7fb fda3 	bl	23f6678 <strlen>
 23fab32:	4602      	mov	r2, r0
 23fab34:	4620      	mov	r0, r4
 23fab36:	9901      	ldr	r1, [sp, #4]
}
 23fab38:	b002      	add	sp, #8
 23fab3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fab3e:	f7ff bf33 	b.w	23fa9a8 <_ZN5spark10JSONWriter5valueEPKcj>

023fab42 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fab42:	b513      	push	{r0, r1, r4, lr}
 23fab44:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fab46:	4608      	mov	r0, r1
 23fab48:	9101      	str	r1, [sp, #4]
 23fab4a:	f7fb fd95 	bl	23f6678 <strlen>
 23fab4e:	4602      	mov	r2, r0
 23fab50:	4620      	mov	r0, r4
 23fab52:	6823      	ldr	r3, [r4, #0]
 23fab54:	9901      	ldr	r1, [sp, #4]
 23fab56:	68db      	ldr	r3, [r3, #12]
}
 23fab58:	b002      	add	sp, #8
 23fab5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fab5e:	4718      	bx	r3

023fab60 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fab60:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fab62:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fab64:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fab68:	2201      	movs	r2, #1
 23fab6a:	68db      	ldr	r3, [r3, #12]
 23fab6c:	f10d 0107 	add.w	r1, sp, #7
 23fab70:	4798      	blx	r3
}
 23fab72:	b003      	add	sp, #12
 23fab74:	f85d fb04 	ldr.w	pc, [sp], #4

023fab78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fab78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fab7c:	f04f 0a14 	mov.w	sl, #20
 23fab80:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fab84:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fab86:	4645      	mov	r5, r8
 23fab88:	fb0a f404 	mul.w	r4, sl, r4
 23fab8c:	9300      	str	r3, [sp, #0]
 23fab8e:	4b17      	ldr	r3, [pc, #92]	; (23fabec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fab90:	10a4      	asrs	r4, r4, #2
 23fab92:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fab94:	2c00      	cmp	r4, #0
 23fab96:	dd21      	ble.n	23fabdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fab98:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fab9a:	fb0a f006 	mul.w	r0, sl, r6
 23fab9e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23faba2:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23faba6:	463a      	mov	r2, r7
 23faba8:	455f      	cmp	r7, fp
 23fabaa:	bf28      	it	cs
 23fabac:	465a      	movcs	r2, fp
 23fabae:	5828      	ldr	r0, [r5, r0]
 23fabb0:	9101      	str	r1, [sp, #4]
 23fabb2:	f001 fd86 	bl	23fc6c2 <strncmp>
                if (cmp == 0) {
 23fabb6:	2800      	cmp	r0, #0
 23fabb8:	f04f 0301 	mov.w	r3, #1
 23fabbc:	9901      	ldr	r1, [sp, #4]
 23fabbe:	d10b      	bne.n	23fabd8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fabc0:	455f      	cmp	r7, fp
 23fabc2:	d103      	bne.n	23fabcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fabc4:	9a00      	ldr	r2, [sp, #0]
 23fabc6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fabc8:	4634      	mov	r4, r6
 23fabca:	e7e3      	b.n	23fab94 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fabcc:	d9fc      	bls.n	23fabc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fabce:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fabd0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fabd4:	3e01      	subs	r6, #1
 23fabd6:	e7f7      	b.n	23fabc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fabd8:	dbf9      	blt.n	23fabce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fabda:	e7f5      	b.n	23fabc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fabdc:	eba5 0508 	sub.w	r5, r5, r8
}
 23fabe0:	4802      	ldr	r0, [pc, #8]	; (23fabec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fabe2:	10ad      	asrs	r5, r5, #2
 23fabe4:	4368      	muls	r0, r5
 23fabe6:	b003      	add	sp, #12
 23fabe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fabec:	cccccccd 	.word	0xcccccccd

023fabf0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fabf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fabf2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fabf4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fabf6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fabf8:	b303      	cbz	r3, 23fac3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fabfa:	b1f9      	cbz	r1, 23fac3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fabfc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fabfe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fac02:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fac04:	a903      	add	r1, sp, #12
 23fac06:	a801      	add	r0, sp, #4
 23fac08:	f7ff ff35 	bl	23faa76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fac0c:	4601      	mov	r1, r0
 23fac0e:	b1a8      	cbz	r0, 23fac3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fac10:	f10d 030b 	add.w	r3, sp, #11
 23fac14:	4620      	mov	r0, r4
 23fac16:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fac18:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fac1c:	f7ff ffac 	bl	23fab78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fac20:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fac24:	b153      	cbz	r3, 23fac3c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fac26:	6823      	ldr	r3, [r4, #0]
 23fac28:	2414      	movs	r4, #20
 23fac2a:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fac2e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fac32:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fac34:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fac36:	bfa8      	it	ge
 23fac38:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fac3a:	e7e3      	b.n	23fac04 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fac3c:	4628      	mov	r0, r5
 23fac3e:	b004      	add	sp, #16
 23fac40:	bd70      	pop	{r4, r5, r6, pc}

023fac42 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fac42:	b40e      	push	{r1, r2, r3}
 23fac44:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fac46:	b08c      	sub	sp, #48	; 0x30
 23fac48:	af00      	add	r7, sp, #0
 23fac4a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fac4e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fac52:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fac54:	462b      	mov	r3, r5
 23fac56:	2120      	movs	r1, #32
 23fac58:	f107 0010 	add.w	r0, r7, #16
 23fac5c:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fac5e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fac60:	f7ff faa4 	bl	23fa1ac <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fac64:	281f      	cmp	r0, #31
 23fac66:	687a      	ldr	r2, [r7, #4]
 23fac68:	d91a      	bls.n	23faca0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fac6a:	f100 0308 	add.w	r3, r0, #8
 23fac6e:	f023 0307 	bic.w	r3, r3, #7
        }
 23fac72:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fac74:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fac78:	1c41      	adds	r1, r0, #1
 23fac7a:	462b      	mov	r3, r5
 23fac7c:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fac7e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fac80:	f7ff fa94 	bl	23fa1ac <vsnprintf>
        if (n > 0) {
 23fac84:	1e02      	subs	r2, r0, #0
 23fac86:	dd04      	ble.n	23fac92 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fac88:	6823      	ldr	r3, [r4, #0]
 23fac8a:	4669      	mov	r1, sp
 23fac8c:	4620      	mov	r0, r4
 23fac8e:	68db      	ldr	r3, [r3, #12]
 23fac90:	4798      	blx	r3
 23fac92:	46b5      	mov	sp, r6
}
 23fac94:	3730      	adds	r7, #48	; 0x30
 23fac96:	46bd      	mov	sp, r7
 23fac98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fac9c:	b003      	add	sp, #12
 23fac9e:	4770      	bx	lr
    } else if (n > 0) {
 23faca0:	2800      	cmp	r0, #0
 23faca2:	d0f7      	beq.n	23fac94 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23faca4:	6823      	ldr	r3, [r4, #0]
 23faca6:	4602      	mov	r2, r0
 23faca8:	68db      	ldr	r3, [r3, #12]
 23facaa:	4620      	mov	r0, r4
 23facac:	f107 0110 	add.w	r1, r7, #16
 23facb0:	4798      	blx	r3
}
 23facb2:	e7ef      	b.n	23fac94 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023facb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23facb4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23facb6:	4c08      	ldr	r4, [pc, #32]	; (23facd8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23facb8:	e8d4 3f8f 	ldab	r3, [r4]
 23facbc:	07db      	lsls	r3, r3, #31
 23facbe:	d409      	bmi.n	23facd4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23facc0:	4620      	mov	r0, r4
 23facc2:	f7fb fd15 	bl	23f66f0 <__cxa_guard_acquire>
 23facc6:	b128      	cbz	r0, 23facd4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23facc8:	4620      	mov	r0, r4
 23facca:	f7fb fd16 	bl	23f66fa <__cxa_guard_release>
 23facce:	4803      	ldr	r0, [pc, #12]	; (23facdc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23facd0:	f001 fc4a 	bl	23fc568 <atexit>
}
 23facd4:	4802      	ldr	r0, [pc, #8]	; (23face0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23facd6:	bd10      	pop	{r4, pc}
 23facd8:	1007ae8c 	.word	0x1007ae8c
 23facdc:	023faa6f 	.word	0x023faa6f
 23face0:	1007a48c 	.word	0x1007a48c

023face4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23face4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23face6:	4c08      	ldr	r4, [pc, #32]	; (23fad08 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23face8:	e8d4 3f8f 	ldab	r3, [r4]
 23facec:	07db      	lsls	r3, r3, #31
 23facee:	d409      	bmi.n	23fad04 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23facf0:	4620      	mov	r0, r4
 23facf2:	f7fb fcfd 	bl	23f66f0 <__cxa_guard_acquire>
 23facf6:	b128      	cbz	r0, 23fad04 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23facf8:	4620      	mov	r0, r4
 23facfa:	f7fb fcfe 	bl	23f66fa <__cxa_guard_release>
 23facfe:	4803      	ldr	r0, [pc, #12]	; (23fad0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fad00:	f001 fc32 	bl	23fc568 <atexit>
    return &factory;
}
 23fad04:	4802      	ldr	r0, [pc, #8]	; (23fad10 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fad06:	bd10      	pop	{r4, pc}
 23fad08:	1007ae90 	.word	0x1007ae90
 23fad0c:	023faad7 	.word	0x023faad7
 23fad10:	1007a490 	.word	0x1007a490

023fad14 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fad14:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fad16:	2500      	movs	r5, #0
 23fad18:	4604      	mov	r4, r0
 23fad1a:	e9c0 5500 	strd	r5, r5, [r0]
 23fad1e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fad22:	6085      	str	r5, [r0, #8]
 23fad24:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fad26:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fad2a:	f7fe fe5d 	bl	23f99e8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fad2e:	f7ff ffc1 	bl	23facb4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fad32:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fad34:	f7ff ffd6 	bl	23face4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fad38:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fad3a:	6220      	str	r0, [r4, #32]
}
 23fad3c:	4620      	mov	r0, r4
 23fad3e:	bd38      	pop	{r3, r4, r5, pc}

023fad40 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fad40:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fad42:	4c0a      	ldr	r4, [pc, #40]	; (23fad6c <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fad44:	e8d4 3f8f 	ldab	r3, [r4]
 23fad48:	07db      	lsls	r3, r3, #31
 23fad4a:	d40c      	bmi.n	23fad66 <_ZN5spark10LogManager8instanceEv+0x26>
 23fad4c:	4620      	mov	r0, r4
 23fad4e:	f7fb fccf 	bl	23f66f0 <__cxa_guard_acquire>
 23fad52:	b140      	cbz	r0, 23fad66 <_ZN5spark10LogManager8instanceEv+0x26>
 23fad54:	4806      	ldr	r0, [pc, #24]	; (23fad70 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fad56:	f7ff ffdd 	bl	23fad14 <_ZN5spark10LogManagerC1Ev>
 23fad5a:	4620      	mov	r0, r4
 23fad5c:	f7fb fccd 	bl	23f66fa <__cxa_guard_release>
 23fad60:	4804      	ldr	r0, [pc, #16]	; (23fad74 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fad62:	f001 fc01 	bl	23fc568 <atexit>
    return &mgr;
}
 23fad66:	4802      	ldr	r0, [pc, #8]	; (23fad70 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fad68:	bd10      	pop	{r4, pc}
 23fad6a:	bf00      	nop
 23fad6c:	1007ae88 	.word	0x1007ae88
 23fad70:	1007ae98 	.word	0x1007ae98
 23fad74:	023fb2b5 	.word	0x023fb2b5

023fad78 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fad78:	2300      	movs	r3, #0
 23fad7a:	4a02      	ldr	r2, [pc, #8]	; (23fad84 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fad7c:	4902      	ldr	r1, [pc, #8]	; (23fad88 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fad7e:	4803      	ldr	r0, [pc, #12]	; (23fad8c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fad80:	f7ff b8b6 	b.w	23f9ef0 <log_set_callbacks>
 23fad84:	023fb09d 	.word	0x023fb09d
 23fad88:	023fb029 	.word	0x023fb029
 23fad8c:	023fafa9 	.word	0x023fafa9

023fad90 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fad90:	2300      	movs	r3, #0
 23fad92:	461a      	mov	r2, r3
 23fad94:	4619      	mov	r1, r3
 23fad96:	4618      	mov	r0, r3
 23fad98:	f7ff b8aa 	b.w	23f9ef0 <log_set_callbacks>

023fad9c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fad9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fad9e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fada0:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fada2:	4668      	mov	r0, sp
 23fada4:	f7ff feb6 	bl	23fab14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fada8:	466a      	mov	r2, sp
 23fadaa:	4629      	mov	r1, r5
 23fadac:	4620      	mov	r0, r4
 23fadae:	f7ff fd1b 	bl	23fa7e8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fadb2:	a801      	add	r0, sp, #4
 23fadb4:	f7ff fa51 	bl	23fa25a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fadb8:	4620      	mov	r0, r4
 23fadba:	b003      	add	sp, #12
 23fadbc:	bd30      	pop	{r4, r5, pc}

023fadbe <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fadbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fadc0:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fadc2:	68cd      	ldr	r5, [r1, #12]
 23fadc4:	4668      	mov	r0, sp
 23fadc6:	f7ff fea5 	bl	23fab14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fadca:	466a      	mov	r2, sp
 23fadcc:	4629      	mov	r1, r5
 23fadce:	4620      	mov	r0, r4
 23fadd0:	f7ff fce6 	bl	23fa7a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fadd4:	a801      	add	r0, sp, #4
 23fadd6:	f7ff fa40 	bl	23fa25a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fadda:	4620      	mov	r0, r4
 23faddc:	b003      	add	sp, #12
 23fadde:	bd30      	pop	{r4, r5, pc}

023fade0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fade0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fade2:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fade4:	690d      	ldr	r5, [r1, #16]
 23fade6:	4668      	mov	r0, sp
 23fade8:	f7ff fe94 	bl	23fab14 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fadec:	466a      	mov	r2, sp
 23fadee:	4629      	mov	r1, r5
 23fadf0:	4620      	mov	r0, r4
 23fadf2:	f7ff fc7e 	bl	23fa6f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fadf6:	a801      	add	r0, sp, #4
 23fadf8:	f7ff fa2f 	bl	23fa25a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fadfc:	4620      	mov	r0, r4
 23fadfe:	b003      	add	sp, #12
 23fae00:	bd30      	pop	{r4, r5, pc}
	...

023fae04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fae04:	b570      	push	{r4, r5, r6, lr}
 23fae06:	b08a      	sub	sp, #40	; 0x28
 23fae08:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fae0a:	4601      	mov	r1, r0
 23fae0c:	a804      	add	r0, sp, #16
 23fae0e:	f7ff ffc5 	bl	23fad9c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fae12:	4e14      	ldr	r6, [pc, #80]	; (23fae64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fae14:	a804      	add	r0, sp, #16
 23fae16:	f7ff fcff 	bl	23fa818 <_ZN5spark18JSONObjectIterator4nextEv>
 23fae1a:	b1e8      	cbz	r0, 23fae58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fae1c:	4668      	mov	r0, sp
 23fae1e:	a904      	add	r1, sp, #16
 23fae20:	f7ff ffcd 	bl	23fadbe <_ZNK5spark18JSONObjectIterator4nameEv>
 23fae24:	4631      	mov	r1, r6
 23fae26:	9802      	ldr	r0, [sp, #8]
 23fae28:	f7ff fe4e 	bl	23faac8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fae2c:	4604      	mov	r4, r0
 23fae2e:	b110      	cbz	r0, 23fae36 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fae30:	1e2c      	subs	r4, r5, #0
 23fae32:	bf18      	it	ne
 23fae34:	2401      	movne	r4, #1
 23fae36:	a801      	add	r0, sp, #4
 23fae38:	f7ff fa0f 	bl	23fa25a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fae3c:	2c00      	cmp	r4, #0
 23fae3e:	d0e9      	beq.n	23fae14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fae40:	4668      	mov	r0, sp
 23fae42:	a904      	add	r1, sp, #16
 23fae44:	f7ff ffcc 	bl	23fade0 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fae48:	4668      	mov	r0, sp
 23fae4a:	f7ff fc88 	bl	23fa75e <_ZNK5spark9JSONValue5toIntEv>
 23fae4e:	6028      	str	r0, [r5, #0]
 23fae50:	a801      	add	r0, sp, #4
 23fae52:	f7ff fa02 	bl	23fa25a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fae56:	e7dd      	b.n	23fae14 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fae58:	a805      	add	r0, sp, #20
 23fae5a:	f7ff f9fe 	bl	23fa25a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fae5e:	b00a      	add	sp, #40	; 0x28
 23fae60:	bd70      	pop	{r4, r5, r6, pc}
 23fae62:	bf00      	nop
 23fae64:	023ffa20 	.word	0x023ffa20

023fae68 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fae68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fae6a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fae6c:	4913      	ldr	r1, [pc, #76]	; (23faebc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fae6e:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fae70:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fae72:	f7fb fbf7 	bl	23f6664 <strcmp>
 23fae76:	b950      	cbnz	r0, 23fae8e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fae78:	f001 f8ee 	bl	23fc058 <_Z16_fetch_usbserialv>
 23fae7c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fae80:	f001 f8d8 	bl	23fc034 <_ZN9USBSerial5beginEl>
}
 23fae84:	b003      	add	sp, #12
 23fae86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fae8a:	f001 b8e5 	b.w	23fc058 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fae8e:	4620      	mov	r0, r4
 23fae90:	490b      	ldr	r1, [pc, #44]	; (23faec0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fae92:	f7fb fbe7 	bl	23f6664 <strcmp>
 23fae96:	b978      	cbnz	r0, 23faeb8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fae98:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fae9c:	a901      	add	r1, sp, #4
 23fae9e:	4628      	mov	r0, r5
        int baud = 9600;
 23faea0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23faea2:	f7ff ffaf 	bl	23fae04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23faea6:	f001 fa69 	bl	23fc37c <_Z22__fetch_global_Serial1v>
 23faeaa:	9901      	ldr	r1, [sp, #4]
 23faeac:	f001 f866 	bl	23fbf7c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23faeb0:	f001 fa64 	bl	23fc37c <_Z22__fetch_global_Serial1v>
}
 23faeb4:	b003      	add	sp, #12
 23faeb6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23faeb8:	2000      	movs	r0, #0
 23faeba:	e7fb      	b.n	23faeb4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23faebc:	023ffa25 	.word	0x023ffa25
 23faec0:	023ffa2c 	.word	0x023ffa2c

023faec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faec4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23faec6:	2614      	movs	r6, #20
 23faec8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23faecc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23faece:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23faed2:	42ae      	cmp	r6, r5
 23faed4:	d005      	beq.n	23faee2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23faed6:	f105 0008 	add.w	r0, r5, #8
 23faeda:	f7ff fff3 	bl	23faec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23faede:	3514      	adds	r5, #20
 23faee0:	e7f7      	b.n	23faed2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23faee2:	6820      	ldr	r0, [r4, #0]
 23faee4:	f7ff f938 	bl	23fa158 <free>
}
 23faee8:	4620      	mov	r0, r4
 23faeea:	bd70      	pop	{r4, r5, r6, pc}

023faeec <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23faeec:	b510      	push	{r4, lr}
 23faeee:	4604      	mov	r4, r0
 23faef0:	300c      	adds	r0, #12
 23faef2:	f7ff ffe7 	bl	23faec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23faef6:	4620      	mov	r0, r4
 23faef8:	f7ff f9d9 	bl	23fa2ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23faefc:	4620      	mov	r0, r4
 23faefe:	bd10      	pop	{r4, pc}

023faf00 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23faf00:	b510      	push	{r4, lr}
 23faf02:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23faf04:	4b03      	ldr	r3, [pc, #12]	; (23faf14 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23faf06:	f840 3b04 	str.w	r3, [r0], #4
 23faf0a:	f7ff ffef 	bl	23faeec <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23faf0e:	4620      	mov	r0, r4
 23faf10:	bd10      	pop	{r4, pc}
 23faf12:	bf00      	nop
 23faf14:	023febf8 	.word	0x023febf8

023faf18 <_ZN5spark16StreamLogHandlerD0Ev>:
 23faf18:	b510      	push	{r4, lr}
 23faf1a:	4604      	mov	r4, r0
 23faf1c:	f7ff fff0 	bl	23faf00 <_ZN5spark16StreamLogHandlerD1Ev>
 23faf20:	4620      	mov	r0, r4
 23faf22:	2124      	movs	r1, #36	; 0x24
 23faf24:	f7fb fbd3 	bl	23f66ce <_ZdlPvj>
 23faf28:	4620      	mov	r0, r4
 23faf2a:	bd10      	pop	{r4, pc}

023faf2c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23faf2c:	b510      	push	{r4, lr}
 23faf2e:	4604      	mov	r4, r0
 23faf30:	4b02      	ldr	r3, [pc, #8]	; (23faf3c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23faf32:	6003      	str	r3, [r0, #0]
 23faf34:	f7ff ffe4 	bl	23faf00 <_ZN5spark16StreamLogHandlerD1Ev>
 23faf38:	4620      	mov	r0, r4
 23faf3a:	bd10      	pop	{r4, pc}
 23faf3c:	023ffac4 	.word	0x023ffac4

023faf40 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23faf40:	b510      	push	{r4, lr}
 23faf42:	4604      	mov	r4, r0
 23faf44:	f7ff fff2 	bl	23faf2c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23faf48:	4620      	mov	r0, r4
 23faf4a:	2124      	movs	r1, #36	; 0x24
 23faf4c:	f7fb fbbf 	bl	23f66ce <_ZdlPvj>
 23faf50:	4620      	mov	r0, r4
 23faf52:	bd10      	pop	{r4, pc}

023faf54 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23faf54:	680a      	ldr	r2, [r1, #0]
 23faf56:	b510      	push	{r4, lr}
 23faf58:	6002      	str	r2, [r0, #0]
 23faf5a:	684a      	ldr	r2, [r1, #4]
 23faf5c:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23faf5e:	2200      	movs	r2, #0
 23faf60:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23faf64:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23faf66:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23faf68:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23faf6a:	6084      	str	r4, [r0, #8]
 23faf6c:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23faf6e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23faf70:	60c4      	str	r4, [r0, #12]
 23faf72:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23faf74:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23faf76:	6104      	str	r4, [r0, #16]
 23faf78:	bd10      	pop	{r4, pc}

023faf7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23faf7a:	2200      	movs	r2, #0
 23faf7c:	e9c0 2200 	strd	r2, r2, [r0]
 23faf80:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23faf82:	b510      	push	{r4, lr}
 23faf84:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23faf86:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23faf88:	6004      	str	r4, [r0, #0]
 23faf8a:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23faf8c:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23faf8e:	6044      	str	r4, [r0, #4]
 23faf90:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23faf92:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23faf94:	6084      	str	r4, [r0, #8]
}
 23faf96:	bd10      	pop	{r4, pc}

023faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23faf98:	b510      	push	{r4, lr}
 23faf9a:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23faf9c:	6803      	ldr	r3, [r0, #0]
 23faf9e:	6818      	ldr	r0, [r3, #0]
 23fafa0:	f7fe fd4c 	bl	23f9a3c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fafa4:	4620      	mov	r0, r4
 23fafa6:	bd10      	pop	{r4, pc}

023fafa8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fafa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fafac:	b087      	sub	sp, #28
 23fafae:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fafb0:	4b1c      	ldr	r3, [pc, #112]	; (23fb024 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fafb2:	4680      	mov	r8, r0
 23fafb4:	685b      	ldr	r3, [r3, #4]
 23fafb6:	4689      	mov	r9, r1
 23fafb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fafbc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fafbe:	b96b      	cbnz	r3, 23fafdc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fafc0:	f7ff febe 	bl	23fad40 <_ZN5spark10LogManager8instanceEv>
 23fafc4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fafc6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fafca:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fafcc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fafce:	f7ff fd79 	bl	23faac4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fafd2:	7b23      	ldrb	r3, [r4, #12]
 23fafd4:	b12b      	cbz	r3, 23fafe2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fafd6:	a805      	add	r0, sp, #20
 23fafd8:	f7ff ffde 	bl	23faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fafdc:	b007      	add	sp, #28
 23fafde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fafe2:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fafe4:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fafe8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fafea:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fafee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23faff2:	45aa      	cmp	sl, r5
 23faff4:	d012      	beq.n	23fb01c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23faff6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23faffa:	4631      	mov	r1, r6
 23faffc:	1d38      	adds	r0, r7, #4
 23faffe:	f7ff fdf7 	bl	23fabf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fb002:	4581      	cmp	r9, r0
 23fb004:	d3f5      	bcc.n	23faff2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fb006:	9a03      	ldr	r2, [sp, #12]
 23fb008:	683b      	ldr	r3, [r7, #0]
 23fb00a:	9200      	str	r2, [sp, #0]
 23fb00c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fb010:	464a      	mov	r2, r9
 23fb012:	4633      	mov	r3, r6
 23fb014:	4641      	mov	r1, r8
 23fb016:	4638      	mov	r0, r7
 23fb018:	47d8      	blx	fp
 23fb01a:	e7ea      	b.n	23faff2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fb01c:	2300      	movs	r3, #0
 23fb01e:	7323      	strb	r3, [r4, #12]
 23fb020:	e7d9      	b.n	23fafd6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fb022:	bf00      	nop
 23fb024:	e000ed00 	.word	0xe000ed00

023fb028 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fb028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb02c:	469b      	mov	fp, r3
 23fb02e:	4b1a      	ldr	r3, [pc, #104]	; (23fb098 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fb030:	4680      	mov	r8, r0
 23fb032:	685b      	ldr	r3, [r3, #4]
 23fb034:	4689      	mov	r9, r1
 23fb036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fb03a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fb03c:	b96b      	cbnz	r3, 23fb05a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fb03e:	f7ff fe7f 	bl	23fad40 <_ZN5spark10LogManager8instanceEv>
 23fb042:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fb044:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb048:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb04a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fb04c:	f7ff fd3a 	bl	23faac4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fb050:	7b23      	ldrb	r3, [r4, #12]
 23fb052:	b12b      	cbz	r3, 23fb060 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fb054:	a801      	add	r0, sp, #4
 23fb056:	f7ff ff9f 	bl	23faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fb05a:	b003      	add	sp, #12
 23fb05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fb060:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fb062:	b2f6      	uxtb	r6, r6
 23fb064:	7323      	strb	r3, [r4, #12]
 23fb066:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fb06a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fb06e:	4555      	cmp	r5, sl
 23fb070:	d00e      	beq.n	23fb090 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fb072:	f855 7b04 	ldr.w	r7, [r5], #4
 23fb076:	4659      	mov	r1, fp
 23fb078:	1d38      	adds	r0, r7, #4
 23fb07a:	f7ff fdb9 	bl	23fabf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fb07e:	4286      	cmp	r6, r0
 23fb080:	d3f5      	bcc.n	23fb06e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fb082:	683b      	ldr	r3, [r7, #0]
 23fb084:	464a      	mov	r2, r9
 23fb086:	4641      	mov	r1, r8
 23fb088:	4638      	mov	r0, r7
 23fb08a:	68db      	ldr	r3, [r3, #12]
 23fb08c:	4798      	blx	r3
 23fb08e:	e7ee      	b.n	23fb06e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fb090:	2300      	movs	r3, #0
 23fb092:	7323      	strb	r3, [r4, #12]
 23fb094:	e7de      	b.n	23fb054 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fb096:	bf00      	nop
 23fb098:	e000ed00 	.word	0xe000ed00

023fb09c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fb09c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb0a0:	4b16      	ldr	r3, [pc, #88]	; (23fb0fc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fb0a2:	4605      	mov	r5, r0
 23fb0a4:	685b      	ldr	r3, [r3, #4]
 23fb0a6:	460f      	mov	r7, r1
 23fb0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fb0ac:	bb1b      	cbnz	r3, 23fb0f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fb0ae:	f7ff fe47 	bl	23fad40 <_ZN5spark10LogManager8instanceEv>
 23fb0b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fb0b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb0b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb0ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fb0bc:	f7ff fd02 	bl	23faac4 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fb0c0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fb0c4:	2446      	movs	r4, #70	; 0x46
 23fb0c6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fb0ca:	45b0      	cmp	r8, r6
 23fb0cc:	d109      	bne.n	23fb0e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fb0ce:	a801      	add	r0, sp, #4
 23fb0d0:	f7ff ff62 	bl	23faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fb0d4:	42a5      	cmp	r5, r4
 23fb0d6:	bfb4      	ite	lt
 23fb0d8:	2000      	movlt	r0, #0
 23fb0da:	2001      	movge	r0, #1
}
 23fb0dc:	b002      	add	sp, #8
 23fb0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fb0e2:	f856 0b04 	ldr.w	r0, [r6], #4
 23fb0e6:	4639      	mov	r1, r7
 23fb0e8:	3004      	adds	r0, #4
 23fb0ea:	f7ff fd81 	bl	23fabf0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fb0ee:	4284      	cmp	r4, r0
 23fb0f0:	bfa8      	it	ge
 23fb0f2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fb0f4:	e7e9      	b.n	23fb0ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fb0f6:	2000      	movs	r0, #0
 23fb0f8:	e7f0      	b.n	23fb0dc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fb0fa:	bf00      	nop
 23fb0fc:	e000ed00 	.word	0xe000ed00

023fb100 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb102:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fb106:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fb108:	4604      	mov	r4, r0
 23fb10a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb10c:	db0d      	blt.n	23fb12a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fb10e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fb110:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fb112:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fb114:	dd04      	ble.n	23fb120 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fb116:	00b9      	lsls	r1, r7, #2
 23fb118:	f7ff f82c 	bl	23fa174 <realloc>
            if (!d) {
 23fb11c:	b918      	cbnz	r0, 23fb126 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fb11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fb120:	f7ff f81a 	bl	23fa158 <free>
        T* d = nullptr;
 23fb124:	2000      	movs	r0, #0
        data_ = d;
 23fb126:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb128:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fb12a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fb12c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fb12e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fb132:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb134:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fb138:	1d08      	adds	r0, r1, #4
 23fb13a:	f001 fa44 	bl	23fc5c6 <memmove>
    new(p) T(std::move(value));
 23fb13e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fb142:	6863      	ldr	r3, [r4, #4]
    return true;
 23fb144:	2001      	movs	r0, #1
    ++size_;
 23fb146:	3301      	adds	r3, #1
 23fb148:	6063      	str	r3, [r4, #4]
    return true;
 23fb14a:	e7e8      	b.n	23fb11e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fb14c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fb14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb14e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fb150:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb154:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb156:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fb158:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fb15a:	f7ff fcb3 	bl	23faac4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fb15e:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fb162:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fb166:	4293      	cmp	r3, r2
 23fb168:	4619      	mov	r1, r3
 23fb16a:	d00a      	beq.n	23fb182 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fb16c:	6809      	ldr	r1, [r1, #0]
 23fb16e:	3304      	adds	r3, #4
 23fb170:	42a9      	cmp	r1, r5
 23fb172:	d1f8      	bne.n	23fb166 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fb174:	a801      	add	r0, sp, #4
 23fb176:	f7ff ff0f 	bl	23faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fb17a:	2500      	movs	r5, #0
}
 23fb17c:	4628      	mov	r0, r5
 23fb17e:	b003      	add	sp, #12
 23fb180:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fb182:	4629      	mov	r1, r5
 23fb184:	4620      	mov	r0, r4
 23fb186:	f7ff ffbb 	bl	23fb100 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fb18a:	4605      	mov	r5, r0
 23fb18c:	2800      	cmp	r0, #0
 23fb18e:	d0f1      	beq.n	23fb174 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fb190:	6863      	ldr	r3, [r4, #4]
 23fb192:	2b01      	cmp	r3, #1
 23fb194:	d101      	bne.n	23fb19a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fb196:	f7ff fdef 	bl	23fad78 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fb19a:	a801      	add	r0, sp, #4
 23fb19c:	f7ff fefc 	bl	23faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fb1a0:	e7ec      	b.n	23fb17c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fb1a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fb1a2:	460b      	mov	r3, r1
 23fb1a4:	b570      	push	{r4, r5, r6, lr}
 23fb1a6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fb1a8:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fb1ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fb1b0:	4282      	cmp	r2, r0
 23fb1b2:	d00f      	beq.n	23fb1d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fb1b4:	4601      	mov	r1, r0
            if (*p == value) {
 23fb1b6:	681d      	ldr	r5, [r3, #0]
 23fb1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 23fb1bc:	42ae      	cmp	r6, r5
 23fb1be:	d107      	bne.n	23fb1d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fb1c0:	1a52      	subs	r2, r2, r1
 23fb1c2:	f001 fa00 	bl	23fc5c6 <memmove>
    return true;
 23fb1c6:	2001      	movs	r0, #1
    --size_;
 23fb1c8:	6863      	ldr	r3, [r4, #4]
 23fb1ca:	3b01      	subs	r3, #1
 23fb1cc:	6063      	str	r3, [r4, #4]
}
 23fb1ce:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fb1d0:	4608      	mov	r0, r1
 23fb1d2:	e7ed      	b.n	23fb1b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fb1d4:	2000      	movs	r0, #0
 23fb1d6:	e7fa      	b.n	23fb1ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fb1d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fb1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fb1da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fb1dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fb1e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fb1e2:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb1e4:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fb1e6:	f7ff fc6d 	bl	23faac4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fb1ea:	4620      	mov	r0, r4
 23fb1ec:	a901      	add	r1, sp, #4
 23fb1ee:	f7ff ffd8 	bl	23fb1a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fb1f2:	b118      	cbz	r0, 23fb1fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fb1f4:	6863      	ldr	r3, [r4, #4]
 23fb1f6:	b90b      	cbnz	r3, 23fb1fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fb1f8:	f7ff fdca 	bl	23fad90 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fb1fc:	a803      	add	r0, sp, #12
 23fb1fe:	f7ff fecb 	bl	23faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fb202:	b004      	add	sp, #16
 23fb204:	bd10      	pop	{r4, pc}

023fb206 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fb206:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fb208:	b570      	push	{r4, r5, r6, lr}
 23fb20a:	4604      	mov	r4, r0
 23fb20c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fb210:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fb214:	42ae      	cmp	r6, r5
 23fb216:	d015      	beq.n	23fb244 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fb218:	4620      	mov	r0, r4
 23fb21a:	f105 0110 	add.w	r1, r5, #16
 23fb21e:	f7ff ffc0 	bl	23fb1a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fb222:	6863      	ldr	r3, [r4, #4]
 23fb224:	b90b      	cbnz	r3, 23fb22a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fb226:	f7ff fdb3 	bl	23fad90 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fb22a:	69e0      	ldr	r0, [r4, #28]
 23fb22c:	6929      	ldr	r1, [r5, #16]
 23fb22e:	6803      	ldr	r3, [r0, #0]
 23fb230:	68db      	ldr	r3, [r3, #12]
 23fb232:	4798      	blx	r3
        if (h.stream) {
 23fb234:	6969      	ldr	r1, [r5, #20]
 23fb236:	b119      	cbz	r1, 23fb240 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fb238:	6a20      	ldr	r0, [r4, #32]
 23fb23a:	6803      	ldr	r3, [r0, #0]
 23fb23c:	68db      	ldr	r3, [r3, #12]
 23fb23e:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fb240:	3518      	adds	r5, #24
 23fb242:	e7e7      	b.n	23fb214 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fb244:	2618      	movs	r6, #24
 23fb246:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fb24a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb24e:	42ae      	cmp	r6, r5
 23fb250:	d004      	beq.n	23fb25c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fb252:	4628      	mov	r0, r5
 23fb254:	f000 fcf0 	bl	23fbc38 <_ZN6StringD1Ev>
 23fb258:	3518      	adds	r5, #24
 23fb25a:	e7f8      	b.n	23fb24e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fb25c:	2300      	movs	r3, #0
 23fb25e:	6163      	str	r3, [r4, #20]
}
 23fb260:	bd70      	pop	{r4, r5, r6, pc}

023fb262 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fb262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb264:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fb266:	f7ff fd93 	bl	23fad90 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fb26a:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fb26e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fb270:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fb272:	f7ff fc27 	bl	23faac4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fb276:	4620      	mov	r0, r4
 23fb278:	f7ff ffc5 	bl	23fb206 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fb27c:	a801      	add	r0, sp, #4
 23fb27e:	f7ff fe8b 	bl	23faf98 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fb282:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb284:	b108      	cbz	r0, 23fb28a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fb286:	f7fe fbbd 	bl	23f9a04 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fb28a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fb28e:	2618      	movs	r6, #24
 23fb290:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb294:	42ae      	cmp	r6, r5
 23fb296:	d004      	beq.n	23fb2a2 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fb298:	4628      	mov	r0, r5
 23fb29a:	f000 fccd 	bl	23fbc38 <_ZN6StringD1Ev>
 23fb29e:	3518      	adds	r5, #24
 23fb2a0:	e7f8      	b.n	23fb294 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fb2a2:	6920      	ldr	r0, [r4, #16]
 23fb2a4:	f7fe ff58 	bl	23fa158 <free>
 23fb2a8:	6820      	ldr	r0, [r4, #0]
 23fb2aa:	f7fe ff55 	bl	23fa158 <free>
}
 23fb2ae:	4620      	mov	r0, r4
 23fb2b0:	b002      	add	sp, #8
 23fb2b2:	bd70      	pop	{r4, r5, r6, pc}

023fb2b4 <__tcf_2>:
    static LogManager mgr;
 23fb2b4:	4801      	ldr	r0, [pc, #4]	; (23fb2bc <__tcf_2+0x8>)
 23fb2b6:	f7ff bfd4 	b.w	23fb262 <_ZN5spark10LogManagerD1Ev>
 23fb2ba:	bf00      	nop
 23fb2bc:	1007ae98 	.word	0x1007ae98

023fb2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fb2c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb2c4:	4604      	mov	r4, r0
 23fb2c6:	460d      	mov	r5, r1
 23fb2c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb2ca:	d915      	bls.n	23fb2f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fb2cc:	4290      	cmp	r0, r2
 23fb2ce:	d214      	bcs.n	23fb2fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fb2d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb2d4:	1a75      	subs	r5, r6, r1
 23fb2d6:	f1a1 0714 	sub.w	r7, r1, #20
 23fb2da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb2dc:	42b7      	cmp	r7, r6
 23fb2de:	d01a      	beq.n	23fb316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fb2e0:	b11c      	cbz	r4, 23fb2ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fb2e2:	4631      	mov	r1, r6
 23fb2e4:	4620      	mov	r0, r4
 23fb2e6:	f7ff fe35 	bl	23faf54 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fb2ea:	f106 0008 	add.w	r0, r6, #8
 23fb2ee:	f7ff fde9 	bl	23faec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fb2f2:	3e14      	subs	r6, #20
 23fb2f4:	3c14      	subs	r4, #20
 23fb2f6:	e7f1      	b.n	23fb2dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fb2f8:	d00d      	beq.n	23fb316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fb2fa:	42b5      	cmp	r5, r6
 23fb2fc:	d00b      	beq.n	23fb316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fb2fe:	b11c      	cbz	r4, 23fb308 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fb300:	4629      	mov	r1, r5
 23fb302:	4620      	mov	r0, r4
 23fb304:	f7ff fe26 	bl	23faf54 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fb308:	f105 0008 	add.w	r0, r5, #8
 23fb30c:	f7ff fdda 	bl	23faec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fb310:	3514      	adds	r5, #20
 23fb312:	3414      	adds	r4, #20
 23fb314:	e7f1      	b.n	23fb2fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fb316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fb318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb31c:	4690      	mov	r8, r2
        capacity_(0) {
 23fb31e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fb320:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fb322:	b095      	sub	sp, #84	; 0x54
 23fb324:	9103      	str	r1, [sp, #12]
    return size_;
 23fb326:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fb32a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fb32c:	4299      	cmp	r1, r3
        capacity_(0) {
 23fb32e:	e9c0 3300 	strd	r3, r3, [r0]
 23fb332:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fb336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fb33a:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fb33e:	7602      	strb	r2, [r0, #24]
 23fb340:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fb342:	dc23      	bgt.n	23fb38c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fb344:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fb348:	2314      	movs	r3, #20
 23fb34a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fb34e:	42af      	cmp	r7, r5
 23fb350:	d03b      	beq.n	23fb3ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fb352:	4629      	mov	r1, r5
 23fb354:	a80b      	add	r0, sp, #44	; 0x2c
 23fb356:	f000 fcec 	bl	23fbd32 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fb35a:	a90b      	add	r1, sp, #44	; 0x2c
 23fb35c:	a80f      	add	r0, sp, #60	; 0x3c
 23fb35e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fb360:	f000 fce7 	bl	23fbd32 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb364:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fb368:	4299      	cmp	r1, r3
 23fb36a:	da1b      	bge.n	23fb3a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fb36c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fb36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fb370:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fb374:	4631      	mov	r1, r6
 23fb376:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fb37a:	f106 0010 	add.w	r0, r6, #16
 23fb37e:	f7ff fb23 	bl	23fa9c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fb382:	b9ee      	cbnz	r6, 23fb3c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fb384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb386:	3301      	adds	r3, #1
 23fb388:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fb38a:	e011      	b.n	23fb3b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fb38c:	a808      	add	r0, sp, #32
 23fb38e:	f7ff fb45 	bl	23faa1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb392:	2800      	cmp	r0, #0
 23fb394:	d1d6      	bne.n	23fb344 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fb396:	a808      	add	r0, sp, #32
 23fb398:	f7fe ff89 	bl	23fa2ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fb39c:	4620      	mov	r0, r4
 23fb39e:	b015      	add	sp, #84	; 0x54
 23fb3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb3a4:	3101      	adds	r1, #1
 23fb3a6:	a808      	add	r0, sp, #32
 23fb3a8:	f7ff fb38 	bl	23faa1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fb3ac:	2800      	cmp	r0, #0
 23fb3ae:	d1dd      	bne.n	23fb36c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fb3b0:	a80f      	add	r0, sp, #60	; 0x3c
 23fb3b2:	f000 fc41 	bl	23fbc38 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fb3b6:	a80b      	add	r0, sp, #44	; 0x2c
 23fb3b8:	f000 fc3e 	bl	23fbc38 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fb3bc:	3514      	adds	r5, #20
 23fb3be:	e7c6      	b.n	23fb34e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fb3c0:	4630      	mov	r0, r6
 23fb3c2:	a90f      	add	r1, sp, #60	; 0x3c
 23fb3c4:	f000 fcb5 	bl	23fbd32 <_ZN6StringC1EOS_>
 23fb3c8:	e7dc      	b.n	23fb384 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fb3ca:	2600      	movs	r6, #0
 23fb3cc:	f04f 0914 	mov.w	r9, #20
 23fb3d0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fb3d4:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fb3d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fb3da:	429e      	cmp	r6, r3
 23fb3dc:	da7c      	bge.n	23fb4d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fb3de:	0133      	lsls	r3, r6, #4
 23fb3e0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fb3e2:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fb3e4:	b90b      	cbnz	r3, 23fb3ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fb3e6:	3601      	adds	r6, #1
 23fb3e8:	e7f5      	b.n	23fb3d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fb3ea:	2300      	movs	r3, #0
 23fb3ec:	9307      	str	r3, [sp, #28]
 23fb3ee:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fb3f2:	ad0b      	add	r5, sp, #44	; 0x2c
 23fb3f4:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fb3f6:	a907      	add	r1, sp, #28
 23fb3f8:	a806      	add	r0, sp, #24
 23fb3fa:	f7ff fb3c 	bl	23faa76 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fb3fe:	4682      	mov	sl, r0
 23fb400:	2800      	cmp	r0, #0
 23fb402:	d0f0      	beq.n	23fb3e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fb404:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb408:	4601      	mov	r1, r0
            bool found = false;
 23fb40a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb40e:	4628      	mov	r0, r5
 23fb410:	9a07      	ldr	r2, [sp, #28]
 23fb412:	f10d 0317 	add.w	r3, sp, #23
 23fb416:	f7ff fbaf 	bl	23fab78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb41a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb41e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb420:	2f00      	cmp	r7, #0
 23fb422:	d14a      	bne.n	23fb4ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fb424:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fb428:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fb42c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fb430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fb434:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fb438:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fb43c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fb43e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fb442:	4293      	cmp	r3, r2
 23fb444:	db17      	blt.n	23fb476 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fb446:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fb44a:	f1ba 0f00 	cmp.w	sl, #0
 23fb44e:	dd30      	ble.n	23fb4b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fb450:	fb09 f00a 	mul.w	r0, r9, sl
 23fb454:	f7fe fe72 	bl	23fa13c <malloc>
            if (!d) {
 23fb458:	4683      	mov	fp, r0
 23fb45a:	b360      	cbz	r0, 23fb4b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fb45c:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb460:	fb09 1202 	mla	r2, r9, r2, r1
 23fb464:	f7ff ff2c 	bl	23fb2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fb468:	6828      	ldr	r0, [r5, #0]
 23fb46a:	f7fe fe75 	bl	23fa158 <free>
        data_ = d;
 23fb46e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fb472:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fb476:	682b      	ldr	r3, [r5, #0]
 23fb478:	9a01      	ldr	r2, [sp, #4]
 23fb47a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fb47e:	686a      	ldr	r2, [r5, #4]
 23fb480:	4651      	mov	r1, sl
 23fb482:	fb09 3202 	mla	r2, r9, r2, r3
 23fb486:	f10a 0014 	add.w	r0, sl, #20
 23fb48a:	f7ff ff19 	bl	23fb2c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fb48e:	f1ba 0f00 	cmp.w	sl, #0
 23fb492:	d003      	beq.n	23fb49c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fb494:	4650      	mov	r0, sl
 23fb496:	a90f      	add	r1, sp, #60	; 0x3c
 23fb498:	f7ff fd5c 	bl	23faf54 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fb49c:	686b      	ldr	r3, [r5, #4]
 23fb49e:	3301      	adds	r3, #1
 23fb4a0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fb4a2:	a811      	add	r0, sp, #68	; 0x44
 23fb4a4:	f7ff fd0e 	bl	23faec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb4a8:	b13f      	cbz	r7, 23fb4ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fb4aa:	a80b      	add	r0, sp, #44	; 0x2c
 23fb4ac:	f7ff fd0a 	bl	23faec4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fb4b0:	e771      	b.n	23fb396 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fb4b2:	46bb      	mov	fp, r7
 23fb4b4:	e7d8      	b.n	23fb468 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fb4b6:	2701      	movs	r7, #1
 23fb4b8:	e7f3      	b.n	23fb4a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fb4ba:	9b01      	ldr	r3, [sp, #4]
 23fb4bc:	682d      	ldr	r5, [r5, #0]
 23fb4be:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fb4c2:	9b06      	ldr	r3, [sp, #24]
 23fb4c4:	781b      	ldrb	r3, [r3, #0]
 23fb4c6:	b92b      	cbnz	r3, 23fb4d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fb4c8:	f8d8 3000 	ldr.w	r3, [r8]
 23fb4cc:	9a02      	ldr	r2, [sp, #8]
 23fb4ce:	4413      	add	r3, r2
 23fb4d0:	7c1b      	ldrb	r3, [r3, #16]
 23fb4d2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fb4d4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fb4d6:	e78e      	b.n	23fb3f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb4d8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb4da:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb4dc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb4de:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb4e0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb4e2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fb4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fb4e6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb4e8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fb4ea:	60a2      	str	r2, [r4, #8]
 23fb4ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fb4ee:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb4f0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fb4f2:	60e2      	str	r2, [r4, #12]
 23fb4f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fb4f6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb4f8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fb4fa:	6122      	str	r2, [r4, #16]
 23fb4fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fb4fe:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fb500:	9b03      	ldr	r3, [sp, #12]
 23fb502:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fb504:	6162      	str	r2, [r4, #20]
 23fb506:	7623      	strb	r3, [r4, #24]
 23fb508:	e7cf      	b.n	23fb4aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fb50c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb50e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fb510:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fb512:	4617      	mov	r7, r2
 23fb514:	b087      	sub	sp, #28
 23fb516:	460d      	mov	r5, r1
        stream_(&stream) {
 23fb518:	4668      	mov	r0, sp
 23fb51a:	4619      	mov	r1, r3
 23fb51c:	f7fb ffec 	bl	23f74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb520:	4b0b      	ldr	r3, [pc, #44]	; (23fb550 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fb522:	4669      	mov	r1, sp
 23fb524:	f846 3b04 	str.w	r3, [r6], #4
 23fb528:	a803      	add	r0, sp, #12
 23fb52a:	f7fb ffe5 	bl	23f74f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb52e:	4639      	mov	r1, r7
 23fb530:	aa03      	add	r2, sp, #12
 23fb532:	4630      	mov	r0, r6
 23fb534:	f7ff fef0 	bl	23fb318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb538:	a803      	add	r0, sp, #12
 23fb53a:	f7fb fe0b 	bl	23f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb53e:	4668      	mov	r0, sp
 23fb540:	f7fb fe08 	bl	23f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fb544:	4620      	mov	r0, r4
        stream_(&stream) {
 23fb546:	4b03      	ldr	r3, [pc, #12]	; (23fb554 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fb548:	6225      	str	r5, [r4, #32]
 23fb54a:	6023      	str	r3, [r4, #0]
}
 23fb54c:	b007      	add	sp, #28
 23fb54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fb550:	023febf8 	.word	0x023febf8
 23fb554:	023ffaac 	.word	0x023ffaac

023fb558 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fb558:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb55a:	460f      	mov	r7, r1
 23fb55c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb55e:	4638      	mov	r0, r7
 23fb560:	491c      	ldr	r1, [pc, #112]	; (23fb5d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fb562:	4616      	mov	r6, r2
 23fb564:	461d      	mov	r5, r3
 23fb566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fb568:	f7fb f87c 	bl	23f6664 <strcmp>
 23fb56c:	b9c0      	cbnz	r0, 23fb5a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fb56e:	b1a4      	cbz	r4, 23fb59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fb570:	4629      	mov	r1, r5
 23fb572:	a801      	add	r0, sp, #4
 23fb574:	f7ff fd01 	bl	23faf7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb578:	2024      	movs	r0, #36	; 0x24
 23fb57a:	4917      	ldr	r1, [pc, #92]	; (23fb5d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb57c:	f000 ff58 	bl	23fc430 <_ZnwjRKSt9nothrow_t>
 23fb580:	4605      	mov	r5, r0
 23fb582:	b130      	cbz	r0, 23fb592 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fb584:	ab01      	add	r3, sp, #4
 23fb586:	4632      	mov	r2, r6
 23fb588:	4621      	mov	r1, r4
 23fb58a:	f7ff ffbf 	bl	23fb50c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb58e:	4b13      	ldr	r3, [pc, #76]	; (23fb5dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fb590:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb592:	a801      	add	r0, sp, #4
 23fb594:	f7fb fdde 	bl	23f7154 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb598:	462c      	mov	r4, r5
}
 23fb59a:	4620      	mov	r0, r4
 23fb59c:	b005      	add	sp, #20
 23fb59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fb5a0:	4638      	mov	r0, r7
 23fb5a2:	490f      	ldr	r1, [pc, #60]	; (23fb5e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fb5a4:	f7fb f85e 	bl	23f6664 <strcmp>
 23fb5a8:	b990      	cbnz	r0, 23fb5d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fb5aa:	2c00      	cmp	r4, #0
 23fb5ac:	d0f5      	beq.n	23fb59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fb5ae:	4629      	mov	r1, r5
 23fb5b0:	a801      	add	r0, sp, #4
 23fb5b2:	f7ff fce2 	bl	23faf7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fb5b6:	2024      	movs	r0, #36	; 0x24
 23fb5b8:	4907      	ldr	r1, [pc, #28]	; (23fb5d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fb5ba:	f000 ff39 	bl	23fc430 <_ZnwjRKSt9nothrow_t>
 23fb5be:	4605      	mov	r5, r0
 23fb5c0:	2800      	cmp	r0, #0
 23fb5c2:	d0e6      	beq.n	23fb592 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fb5c4:	4632      	mov	r2, r6
 23fb5c6:	4621      	mov	r1, r4
 23fb5c8:	ab01      	add	r3, sp, #4
 23fb5ca:	f7ff ff9f 	bl	23fb50c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb5ce:	e7e0      	b.n	23fb592 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fb5d0:	2400      	movs	r4, #0
 23fb5d2:	e7e2      	b.n	23fb59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fb5d4:	023ffa34 	.word	0x023ffa34
 23fb5d8:	023ffc20 	.word	0x023ffc20
 23fb5dc:	023ffac4 	.word	0x023ffac4
 23fb5e0:	023ffa38 	.word	0x023ffa38

023fb5e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fb5e4:	4b01      	ldr	r3, [pc, #4]	; (23fb5ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fb5e6:	4a02      	ldr	r2, [pc, #8]	; (23fb5f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fb5e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fb5ea:	4770      	bx	lr
 23fb5ec:	1007ae94 	.word	0x1007ae94
 23fb5f0:	023ffa49 	.word	0x023ffa49

023fb5f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb5f8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fb5fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb5fe:	4604      	mov	r4, r0
 23fb600:	460e      	mov	r6, r1
 23fb602:	4617      	mov	r7, r2
 23fb604:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fb606:	f000 fd27 	bl	23fc058 <_Z16_fetch_usbserialv>
 23fb60a:	4581      	cmp	r9, r0
 23fb60c:	d04d      	beq.n	23fb6aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fb60e:	792b      	ldrb	r3, [r5, #4]
 23fb610:	0719      	lsls	r1, r3, #28
 23fb612:	d504      	bpl.n	23fb61e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fb614:	4620      	mov	r0, r4
 23fb616:	696a      	ldr	r2, [r5, #20]
 23fb618:	4954      	ldr	r1, [pc, #336]	; (23fb76c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fb61a:	f7ff fb12 	bl	23fac42 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fb61e:	f1b8 0f00 	cmp.w	r8, #0
 23fb622:	d00d      	beq.n	23fb640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fb624:	215b      	movs	r1, #91	; 0x5b
 23fb626:	4620      	mov	r0, r4
 23fb628:	f7ff fa9a 	bl	23fab60 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fb62c:	4641      	mov	r1, r8
 23fb62e:	4620      	mov	r0, r4
 23fb630:	f7ff fa87 	bl	23fab42 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fb634:	6823      	ldr	r3, [r4, #0]
 23fb636:	2202      	movs	r2, #2
 23fb638:	4620      	mov	r0, r4
 23fb63a:	68db      	ldr	r3, [r3, #12]
 23fb63c:	494c      	ldr	r1, [pc, #304]	; (23fb770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fb63e:	4798      	blx	r3
    if (attr.has_file) {
 23fb640:	792b      	ldrb	r3, [r5, #4]
 23fb642:	07da      	lsls	r2, r3, #31
 23fb644:	d524      	bpl.n	23fb690 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fb646:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fb64a:	212f      	movs	r1, #47	; 0x2f
 23fb64c:	4640      	mov	r0, r8
 23fb64e:	f001 f84c 	bl	23fc6ea <strrchr>
    if (s1) {
 23fb652:	b108      	cbz	r0, 23fb658 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fb654:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fb658:	4641      	mov	r1, r8
 23fb65a:	4620      	mov	r0, r4
 23fb65c:	f7ff fa71 	bl	23fab42 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fb660:	792b      	ldrb	r3, [r5, #4]
 23fb662:	079b      	lsls	r3, r3, #30
 23fb664:	d508      	bpl.n	23fb678 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fb666:	213a      	movs	r1, #58	; 0x3a
 23fb668:	4620      	mov	r0, r4
 23fb66a:	f7ff fa79 	bl	23fab60 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fb66e:	4620      	mov	r0, r4
 23fb670:	68ea      	ldr	r2, [r5, #12]
 23fb672:	4940      	ldr	r1, [pc, #256]	; (23fb774 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fb674:	f7ff fae5 	bl	23fac42 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fb678:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fb67a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fb67c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fb680:	4620      	mov	r0, r4
            write(", ", 2);
 23fb682:	f04f 0202 	mov.w	r2, #2
 23fb686:	68db      	ldr	r3, [r3, #12]
 23fb688:	bf14      	ite	ne
 23fb68a:	493b      	ldrne	r1, [pc, #236]	; (23fb778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fb68c:	493b      	ldreq	r1, [pc, #236]	; (23fb77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb68e:	4798      	blx	r3
    if (attr.has_function) {
 23fb690:	792b      	ldrb	r3, [r5, #4]
 23fb692:	0758      	lsls	r0, r3, #29
 23fb694:	d51d      	bpl.n	23fb6d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb696:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb698:	460b      	mov	r3, r1
 23fb69a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fb69c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fb6a0:	b160      	cbz	r0, 23fb6bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fb6a2:	2820      	cmp	r0, #32
 23fb6a4:	d108      	bne.n	23fb6b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fb6a6:	4619      	mov	r1, r3
 23fb6a8:	e7f7      	b.n	23fb69a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fb6aa:	4835      	ldr	r0, [pc, #212]	; (23fb780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fb6ac:	f000 f983 	bl	23fb9b6 <_ZN5spark12NetworkClass9listeningEv>
 23fb6b0:	2800      	cmp	r0, #0
 23fb6b2:	d0ac      	beq.n	23fb60e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fb6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fb6b8:	2828      	cmp	r0, #40	; 0x28
 23fb6ba:	d1ee      	bne.n	23fb69a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fb6bc:	6823      	ldr	r3, [r4, #0]
 23fb6be:	1a52      	subs	r2, r2, r1
 23fb6c0:	4620      	mov	r0, r4
 23fb6c2:	68db      	ldr	r3, [r3, #12]
 23fb6c4:	4798      	blx	r3
        write("(): ", 4);
 23fb6c6:	6823      	ldr	r3, [r4, #0]
 23fb6c8:	2204      	movs	r2, #4
 23fb6ca:	4620      	mov	r0, r4
 23fb6cc:	68db      	ldr	r3, [r3, #12]
 23fb6ce:	492d      	ldr	r1, [pc, #180]	; (23fb784 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fb6d0:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fb6d2:	2100      	movs	r1, #0
 23fb6d4:	4638      	mov	r0, r7
 23fb6d6:	f7fe fbfd 	bl	23f9ed4 <log_level_name>
 23fb6da:	4601      	mov	r1, r0
    write(s);
 23fb6dc:	4620      	mov	r0, r4
 23fb6de:	f7ff fa30 	bl	23fab42 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fb6e2:	6823      	ldr	r3, [r4, #0]
 23fb6e4:	2202      	movs	r2, #2
 23fb6e6:	4620      	mov	r0, r4
 23fb6e8:	68db      	ldr	r3, [r3, #12]
 23fb6ea:	4924      	ldr	r1, [pc, #144]	; (23fb77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fb6ec:	4798      	blx	r3
    if (msg) {
 23fb6ee:	b11e      	cbz	r6, 23fb6f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fb6f0:	4631      	mov	r1, r6
 23fb6f2:	4620      	mov	r0, r4
 23fb6f4:	f7ff fa25 	bl	23fab42 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fb6f8:	792b      	ldrb	r3, [r5, #4]
 23fb6fa:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fb6fe:	d02c      	beq.n	23fb75a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fb700:	6823      	ldr	r3, [r4, #0]
 23fb702:	4921      	ldr	r1, [pc, #132]	; (23fb788 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fb704:	68db      	ldr	r3, [r3, #12]
 23fb706:	2202      	movs	r2, #2
 23fb708:	4620      	mov	r0, r4
 23fb70a:	4798      	blx	r3
        if (attr.has_code) {
 23fb70c:	792b      	ldrb	r3, [r5, #4]
 23fb70e:	06d9      	lsls	r1, r3, #27
 23fb710:	d50a      	bpl.n	23fb728 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fb712:	6823      	ldr	r3, [r4, #0]
 23fb714:	2207      	movs	r2, #7
 23fb716:	4620      	mov	r0, r4
 23fb718:	491c      	ldr	r1, [pc, #112]	; (23fb78c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fb71a:	68db      	ldr	r3, [r3, #12]
 23fb71c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fb71e:	4620      	mov	r0, r4
 23fb720:	69aa      	ldr	r2, [r5, #24]
 23fb722:	491b      	ldr	r1, [pc, #108]	; (23fb790 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fb724:	f7ff fa8d 	bl	23fac42 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fb728:	792b      	ldrb	r3, [r5, #4]
 23fb72a:	069a      	lsls	r2, r3, #26
 23fb72c:	d511      	bpl.n	23fb752 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fb72e:	06db      	lsls	r3, r3, #27
 23fb730:	d505      	bpl.n	23fb73e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fb732:	6823      	ldr	r3, [r4, #0]
 23fb734:	2202      	movs	r2, #2
 23fb736:	4620      	mov	r0, r4
 23fb738:	68db      	ldr	r3, [r3, #12]
 23fb73a:	490f      	ldr	r1, [pc, #60]	; (23fb778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fb73c:	4798      	blx	r3
            write("details = ", 10);
 23fb73e:	6823      	ldr	r3, [r4, #0]
 23fb740:	4620      	mov	r0, r4
 23fb742:	4914      	ldr	r1, [pc, #80]	; (23fb794 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fb744:	220a      	movs	r2, #10
 23fb746:	68db      	ldr	r3, [r3, #12]
 23fb748:	4798      	blx	r3
            write(attr.details);
 23fb74a:	4620      	mov	r0, r4
 23fb74c:	69e9      	ldr	r1, [r5, #28]
 23fb74e:	f7ff f9f8 	bl	23fab42 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fb752:	215d      	movs	r1, #93	; 0x5d
 23fb754:	4620      	mov	r0, r4
 23fb756:	f7ff fa03 	bl	23fab60 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fb75a:	6823      	ldr	r3, [r4, #0]
 23fb75c:	4620      	mov	r0, r4
}
 23fb75e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fb762:	2202      	movs	r2, #2
 23fb764:	68db      	ldr	r3, [r3, #12]
 23fb766:	490c      	ldr	r1, [pc, #48]	; (23fb798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fb768:	4718      	bx	r3
 23fb76a:	bf00      	nop
 23fb76c:	023ffa4d 	.word	0x023ffa4d
 23fb770:	023ffa54 	.word	0x023ffa54
 23fb774:	023ffa14 	.word	0x023ffa14
 23fb778:	023ffa57 	.word	0x023ffa57
 23fb77c:	023ffa5c 	.word	0x023ffa5c
 23fb780:	1007aec0 	.word	0x1007aec0
 23fb784:	023ffa5a 	.word	0x023ffa5a
 23fb788:	023ffa5f 	.word	0x023ffa5f
 23fb78c:	023ffa62 	.word	0x023ffa62
 23fb790:	023ffa6a 	.word	0x023ffa6a
 23fb794:	023ffa6d 	.word	0x023ffa6d
 23fb798:	023fea28 	.word	0x023fea28

023fb79c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb7a0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fb7a2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fb7a4:	460d      	mov	r5, r1
 23fb7a6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fb7a8:	f000 fc56 	bl	23fc058 <_Z16_fetch_usbserialv>
 23fb7ac:	4287      	cmp	r7, r0
 23fb7ae:	d007      	beq.n	23fb7c0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fb7b0:	6a20      	ldr	r0, [r4, #32]
 23fb7b2:	4632      	mov	r2, r6
 23fb7b4:	6803      	ldr	r3, [r0, #0]
 23fb7b6:	4629      	mov	r1, r5
}
 23fb7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fb7bc:	68db      	ldr	r3, [r3, #12]
 23fb7be:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fb7c0:	4803      	ldr	r0, [pc, #12]	; (23fb7d0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fb7c2:	f000 f8f8 	bl	23fb9b6 <_ZN5spark12NetworkClass9listeningEv>
 23fb7c6:	2800      	cmp	r0, #0
 23fb7c8:	d0f2      	beq.n	23fb7b0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fb7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fb7ce:	bf00      	nop
 23fb7d0:	1007aec0 	.word	0x1007aec0

023fb7d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fb7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb7d8:	b085      	sub	sp, #20
    return stream_;
 23fb7da:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fb7de:	4605      	mov	r5, r0
 23fb7e0:	460f      	mov	r7, r1
 23fb7e2:	4690      	mov	r8, r2
 23fb7e4:	461e      	mov	r6, r3
 23fb7e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fb7e8:	f000 fc36 	bl	23fc058 <_Z16_fetch_usbserialv>
 23fb7ec:	4581      	cmp	r9, r0
 23fb7ee:	d105      	bne.n	23fb7fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fb7f0:	4849      	ldr	r0, [pc, #292]	; (23fb918 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fb7f2:	f000 f8e0 	bl	23fb9b6 <_ZN5spark12NetworkClass9listeningEv>
 23fb7f6:	2800      	cmp	r0, #0
 23fb7f8:	f040 808a 	bne.w	23fb910 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fb7fc:	f04f 0900 	mov.w	r9, #0
 23fb800:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fb802:	4a46      	ldr	r2, [pc, #280]	; (23fb91c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fb804:	4668      	mov	r0, sp
 23fb806:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fb80a:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fb80c:	f88d 9004 	strb.w	r9, [sp, #4]
 23fb810:	f7ff f82b 	bl	23fa86a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fb814:	4649      	mov	r1, r9
 23fb816:	4640      	mov	r0, r8
 23fb818:	f7fe fb5c 	bl	23f9ed4 <log_level_name>
 23fb81c:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fb81e:	4940      	ldr	r1, [pc, #256]	; (23fb920 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fb820:	2201      	movs	r2, #1
 23fb822:	4668      	mov	r0, sp
 23fb824:	f7ff f8b0 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb828:	4641      	mov	r1, r8
 23fb82a:	f7ff f97c 	bl	23fab26 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fb82e:	b13f      	cbz	r7, 23fb840 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fb830:	493c      	ldr	r1, [pc, #240]	; (23fb924 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fb832:	2201      	movs	r2, #1
 23fb834:	4668      	mov	r0, sp
 23fb836:	f7ff f8a7 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb83a:	4639      	mov	r1, r7
 23fb83c:	f7ff f973 	bl	23fab26 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fb840:	b13e      	cbz	r6, 23fb852 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fb842:	4939      	ldr	r1, [pc, #228]	; (23fb928 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fb844:	2201      	movs	r2, #1
 23fb846:	4668      	mov	r0, sp
 23fb848:	f7ff f89e 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb84c:	4631      	mov	r1, r6
 23fb84e:	f7ff f96a 	bl	23fab26 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fb852:	7923      	ldrb	r3, [r4, #4]
 23fb854:	07df      	lsls	r7, r3, #31
 23fb856:	d50e      	bpl.n	23fb876 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fb858:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fb85a:	212f      	movs	r1, #47	; 0x2f
 23fb85c:	4630      	mov	r0, r6
 23fb85e:	f000 ff44 	bl	23fc6ea <strrchr>
    if (s1) {
 23fb862:	b100      	cbz	r0, 23fb866 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fb864:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fb866:	4931      	ldr	r1, [pc, #196]	; (23fb92c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fb868:	2201      	movs	r2, #1
 23fb86a:	4668      	mov	r0, sp
 23fb86c:	f7ff f88c 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb870:	4631      	mov	r1, r6
 23fb872:	f7ff f958 	bl	23fab26 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fb876:	7923      	ldrb	r3, [r4, #4]
 23fb878:	079e      	lsls	r6, r3, #30
 23fb87a:	d507      	bpl.n	23fb88c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fb87c:	492c      	ldr	r1, [pc, #176]	; (23fb930 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fb87e:	2202      	movs	r2, #2
 23fb880:	4668      	mov	r0, sp
 23fb882:	f7ff f881 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb886:	68e1      	ldr	r1, [r4, #12]
 23fb888:	f7fe fffc 	bl	23fa884 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fb88c:	7923      	ldrb	r3, [r4, #4]
 23fb88e:	0758      	lsls	r0, r3, #29
 23fb890:	d514      	bpl.n	23fb8bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fb892:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fb894:	4633      	mov	r3, r6
 23fb896:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fb898:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb89c:	b12a      	cbz	r2, 23fb8aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fb89e:	2a20      	cmp	r2, #32
 23fb8a0:	d101      	bne.n	23fb8a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fb8a2:	461e      	mov	r6, r3
 23fb8a4:	e7f7      	b.n	23fb896 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fb8a6:	2a28      	cmp	r2, #40	; 0x28
 23fb8a8:	d1f5      	bne.n	23fb896 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fb8aa:	2202      	movs	r2, #2
 23fb8ac:	4921      	ldr	r1, [pc, #132]	; (23fb934 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fb8ae:	4668      	mov	r0, sp
 23fb8b0:	f7ff f86a 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb8b4:	4631      	mov	r1, r6
 23fb8b6:	1bba      	subs	r2, r7, r6
 23fb8b8:	f7ff f876 	bl	23fa9a8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fb8bc:	7923      	ldrb	r3, [r4, #4]
 23fb8be:	0719      	lsls	r1, r3, #28
 23fb8c0:	d507      	bpl.n	23fb8d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23fb8c2:	491d      	ldr	r1, [pc, #116]	; (23fb938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fb8c4:	2201      	movs	r2, #1
 23fb8c6:	4668      	mov	r0, sp
 23fb8c8:	f7ff f85e 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb8cc:	6961      	ldr	r1, [r4, #20]
 23fb8ce:	f7fe ffeb 	bl	23fa8a8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fb8d2:	7923      	ldrb	r3, [r4, #4]
 23fb8d4:	06da      	lsls	r2, r3, #27
 23fb8d6:	d507      	bpl.n	23fb8e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fb8d8:	4918      	ldr	r1, [pc, #96]	; (23fb93c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fb8da:	2204      	movs	r2, #4
 23fb8dc:	4668      	mov	r0, sp
 23fb8de:	f7ff f853 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb8e2:	69a1      	ldr	r1, [r4, #24]
 23fb8e4:	f7fe ffce 	bl	23fa884 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fb8e8:	7923      	ldrb	r3, [r4, #4]
 23fb8ea:	069b      	lsls	r3, r3, #26
 23fb8ec:	d507      	bpl.n	23fb8fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fb8ee:	4914      	ldr	r1, [pc, #80]	; (23fb940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fb8f0:	2206      	movs	r2, #6
 23fb8f2:	4668      	mov	r0, sp
 23fb8f4:	f7ff f848 	bl	23fa988 <_ZN5spark10JSONWriter4nameEPKcj>
 23fb8f8:	69e1      	ldr	r1, [r4, #28]
 23fb8fa:	f7ff f914 	bl	23fab26 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fb8fe:	4668      	mov	r0, sp
 23fb900:	f7fe ff9d 	bl	23fa83e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fb904:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fb906:	2202      	movs	r2, #2
 23fb908:	6803      	ldr	r3, [r0, #0]
 23fb90a:	490e      	ldr	r1, [pc, #56]	; (23fb944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fb90c:	68db      	ldr	r3, [r3, #12]
 23fb90e:	4798      	blx	r3
}
 23fb910:	b005      	add	sp, #20
 23fb912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fb916:	bf00      	nop
 23fb918:	1007aec0 	.word	0x1007aec0
 23fb91c:	023ffa94 	.word	0x023ffa94
 23fb920:	023ffa2a 	.word	0x023ffa2a
 23fb924:	023ffa78 	.word	0x023ffa78
 23fb928:	023ffec6 	.word	0x023ffec6
 23fb92c:	023ff219 	.word	0x023ff219
 23fb930:	023ffa7a 	.word	0x023ffa7a
 23fb934:	023ffa7d 	.word	0x023ffa7d
 23fb938:	023fec64 	.word	0x023fec64
 23fb93c:	023ffa80 	.word	0x023ffa80
 23fb940:	023ffa85 	.word	0x023ffa85
 23fb944:	023fea28 	.word	0x023fea28

023fb948 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fb948:	2300      	movs	r3, #0
 23fb94a:	6840      	ldr	r0, [r0, #4]
 23fb94c:	461a      	mov	r2, r3
 23fb94e:	f7fe bb31 	b.w	23f9fb4 <network_connect>

023fb952 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fb952:	2200      	movs	r2, #0
 23fb954:	2102      	movs	r1, #2
 23fb956:	6840      	ldr	r0, [r0, #4]
 23fb958:	f7fe bb48 	b.w	23f9fec <network_disconnect>

023fb95c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fb95c:	2200      	movs	r2, #0
 23fb95e:	6840      	ldr	r0, [r0, #4]
 23fb960:	4611      	mov	r1, r2
 23fb962:	f7fe bb35 	b.w	23f9fd0 <network_connecting>

023fb966 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fb966:	2200      	movs	r2, #0
 23fb968:	6840      	ldr	r0, [r0, #4]
 23fb96a:	4611      	mov	r1, r2
 23fb96c:	f7fe bb4c 	b.w	23fa008 <network_ready>

023fb970 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fb970:	2300      	movs	r3, #0
 23fb972:	6840      	ldr	r0, [r0, #4]
 23fb974:	461a      	mov	r2, r3
 23fb976:	4619      	mov	r1, r3
 23fb978:	f7fe bb54 	b.w	23fa024 <network_on>

023fb97c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fb97c:	2300      	movs	r3, #0
 23fb97e:	6840      	ldr	r0, [r0, #4]
 23fb980:	461a      	mov	r2, r3
 23fb982:	4619      	mov	r1, r3
 23fb984:	f7fe bb5c 	b.w	23fa040 <network_off>

023fb988 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fb988:	2100      	movs	r1, #0
 23fb98a:	6840      	ldr	r0, [r0, #4]
 23fb98c:	f7fe bb9e 	b.w	23fa0cc <network_is_on>

023fb990 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fb990:	2100      	movs	r1, #0
 23fb992:	6840      	ldr	r0, [r0, #4]
 23fb994:	f7fe bba8 	b.w	23fa0e8 <network_is_off>

023fb998 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fb998:	2200      	movs	r2, #0
 23fb99a:	6840      	ldr	r0, [r0, #4]
 23fb99c:	f081 0101 	eor.w	r1, r1, #1
 23fb9a0:	f7fe bb5c 	b.w	23fa05c <network_listen>

023fb9a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fb9a4:	2200      	movs	r2, #0
 23fb9a6:	6840      	ldr	r0, [r0, #4]
 23fb9a8:	f7fe bb74 	b.w	23fa094 <network_set_listen_timeout>

023fb9ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fb9ac:	2200      	movs	r2, #0
 23fb9ae:	6840      	ldr	r0, [r0, #4]
 23fb9b0:	4611      	mov	r1, r2
 23fb9b2:	f7fe bb7d 	b.w	23fa0b0 <network_get_listen_timeout>

023fb9b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fb9b6:	2200      	movs	r2, #0
 23fb9b8:	6840      	ldr	r0, [r0, #4]
 23fb9ba:	4611      	mov	r1, r2
 23fb9bc:	f7fe bb5c 	b.w	23fa078 <network_listening>

023fb9c0 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fb9c0:	2100      	movs	r1, #0
 23fb9c2:	6840      	ldr	r0, [r0, #4]
 23fb9c4:	f7fe bbac 	b.w	23fa120 <network_is_preferred>

023fb9c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fb9c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb9cc:	b095      	sub	sp, #84	; 0x54
 23fb9ce:	4614      	mov	r4, r2
 23fb9d0:	460d      	mov	r5, r1
 23fb9d2:	4607      	mov	r7, r0
    IPAddress addr;
 23fb9d4:	f7fe fde2 	bl	23fa59c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fb9d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fb9da:	221c      	movs	r2, #28
 23fb9dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fb9de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fb9e0:	f000 fe0b 	bl	23fc5fa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fb9e4:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fb9e6:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fb9e8:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fb9ea:	2100      	movs	r1, #0
 23fb9ec:	466b      	mov	r3, sp
 23fb9ee:	aa0c      	add	r2, sp, #48	; 0x30
 23fb9f0:	f7fe f93c 	bl	23f9c6c <netdb_getaddrinfo>
    if (!r) {
 23fb9f4:	4604      	mov	r4, r0
 23fb9f6:	2800      	cmp	r0, #0
 23fb9f8:	d14b      	bne.n	23fba92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fb9fa:	4602      	mov	r2, r0
 23fb9fc:	2101      	movs	r1, #1
 23fb9fe:	6868      	ldr	r0, [r5, #4]
 23fba00:	f7fe fb02 	bl	23fa008 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fba04:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fba06:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fba08:	4622      	mov	r2, r4
 23fba0a:	6868      	ldr	r0, [r5, #4]
 23fba0c:	f7fe fafc 	bl	23fa008 <network_ready>
        bool ok = false;
 23fba10:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fba12:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fba14:	9e00      	ldr	r6, [sp, #0]
 23fba16:	2e00      	cmp	r6, #0
 23fba18:	d03b      	beq.n	23fba92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fba1a:	2900      	cmp	r1, #0
 23fba1c:	d139      	bne.n	23fba92 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fba1e:	6873      	ldr	r3, [r6, #4]
 23fba20:	2b02      	cmp	r3, #2
 23fba22:	d003      	beq.n	23fba2c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fba24:	2b0a      	cmp	r3, #10
 23fba26:	d011      	beq.n	23fba4c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fba28:	69f6      	ldr	r6, [r6, #28]
 23fba2a:	e7f4      	b.n	23fba16 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fba2c:	f1b8 0f00 	cmp.w	r8, #0
 23fba30:	d0fa      	beq.n	23fba28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fba32:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fba34:	a806      	add	r0, sp, #24
 23fba36:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fba38:	1d3c      	adds	r4, r7, #4
 23fba3a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fba3c:	f7fe fddc 	bl	23fa5f8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fba40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fba42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fba44:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fba46:	4641      	mov	r1, r8
 23fba48:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fba4a:	e7ed      	b.n	23fba28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fba4c:	f1b9 0f00 	cmp.w	r9, #0
 23fba50:	d0ea      	beq.n	23fba28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fba52:	2210      	movs	r2, #16
 23fba54:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fba56:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fba58:	f000 fdcf 	bl	23fc5fa <memset>
                    a.v = 6;
 23fba5c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fba5e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fba60:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fba64:	f104 0308 	add.w	r3, r4, #8
 23fba68:	3418      	adds	r4, #24
 23fba6a:	462a      	mov	r2, r5
 23fba6c:	6818      	ldr	r0, [r3, #0]
 23fba6e:	6859      	ldr	r1, [r3, #4]
 23fba70:	3308      	adds	r3, #8
 23fba72:	c203      	stmia	r2!, {r0, r1}
 23fba74:	42a3      	cmp	r3, r4
 23fba76:	4615      	mov	r5, r2
 23fba78:	d1f7      	bne.n	23fba6a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fba7a:	a901      	add	r1, sp, #4
 23fba7c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fba7e:	1d3c      	adds	r4, r7, #4
 23fba80:	ad07      	add	r5, sp, #28
 23fba82:	f7fe fd99 	bl	23fa5b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fba86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fba88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fba8a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fba8c:	4649      	mov	r1, r9
 23fba8e:	7023      	strb	r3, [r4, #0]
                    break;
 23fba90:	e7ca      	b.n	23fba28 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fba92:	9800      	ldr	r0, [sp, #0]
 23fba94:	f7fe f8dc 	bl	23f9c50 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fba98:	4638      	mov	r0, r7
 23fba9a:	b015      	add	sp, #84	; 0x54
 23fba9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fbaa0 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fbaa0:	3803      	subs	r0, #3
 23fbaa2:	2803      	cmp	r0, #3
 23fbaa4:	bf9a      	itte	ls
 23fbaa6:	4b02      	ldrls	r3, [pc, #8]	; (23fbab0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fbaa8:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fbaac:	4801      	ldrhi	r0, [pc, #4]	; (23fbab4 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fbaae:	4770      	bx	lr
 23fbab0:	023ffb04 	.word	0x023ffb04
 23fbab4:	1007aec0 	.word	0x1007aec0

023fbab8 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23fbab8:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23fbaba:	2200      	movs	r2, #0
 23fbabc:	6840      	ldr	r0, [r0, #4]
 23fbabe:	f7fe fb21 	bl	23fa104 <network_prefer>
}
 23fbac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fbac6:	f7ff bfeb 	b.w	23fbaa0 <_ZN5spark12NetworkClass4fromEm>
	...

023fbacc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fbacc:	4b02      	ldr	r3, [pc, #8]	; (23fbad8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fbace:	4a03      	ldr	r2, [pc, #12]	; (23fbadc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fbad0:	601a      	str	r2, [r3, #0]
 23fbad2:	2200      	movs	r2, #0
 23fbad4:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fbad6:	4770      	bx	lr
 23fbad8:	1007aec0 	.word	0x1007aec0
 23fbadc:	023ffb1c 	.word	0x023ffb1c

023fbae0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fbae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbae2:	4606      	mov	r6, r0
 23fbae4:	460d      	mov	r5, r1
  size_t n = 0;
 23fbae6:	2400      	movs	r4, #0
 23fbae8:	188f      	adds	r7, r1, r2
  while (size--) {
 23fbaea:	42bd      	cmp	r5, r7
 23fbaec:	d00c      	beq.n	23fbb08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fbaee:	6833      	ldr	r3, [r6, #0]
 23fbaf0:	4630      	mov	r0, r6
 23fbaf2:	689b      	ldr	r3, [r3, #8]
 23fbaf4:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fbaf8:	4798      	blx	r3
     if (chunk>=0)
 23fbafa:	1e03      	subs	r3, r0, #0
 23fbafc:	db01      	blt.n	23fbb02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fbafe:	441c      	add	r4, r3
  while (size--) {
 23fbb00:	e7f3      	b.n	23fbaea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fbb02:	2c00      	cmp	r4, #0
 23fbb04:	bf08      	it	eq
 23fbb06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fbb08:	4620      	mov	r0, r4
 23fbb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbb0c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fbb0c:	b513      	push	{r0, r1, r4, lr}
 23fbb0e:	4604      	mov	r4, r0
    }
 23fbb10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fbb12:	b159      	cbz	r1, 23fbb2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fbb14:	9101      	str	r1, [sp, #4]
 23fbb16:	f7fa fdaf 	bl	23f6678 <strlen>
 23fbb1a:	4602      	mov	r2, r0
 23fbb1c:	4620      	mov	r0, r4
 23fbb1e:	6823      	ldr	r3, [r4, #0]
 23fbb20:	9901      	ldr	r1, [sp, #4]
 23fbb22:	68db      	ldr	r3, [r3, #12]
    }
 23fbb24:	b002      	add	sp, #8
 23fbb26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fbb2a:	4718      	bx	r3
    }
 23fbb2c:	b002      	add	sp, #8
 23fbb2e:	bd10      	pop	{r4, pc}

023fbb30 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fbb30:	b508      	push	{r3, lr}
  return write(str);
 23fbb32:	f7ff ffeb 	bl	23fbb0c <_ZN5Print5writeEPKc>
}
 23fbb36:	bd08      	pop	{r3, pc}

023fbb38 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fbb38:	6803      	ldr	r3, [r0, #0]
 23fbb3a:	689b      	ldr	r3, [r3, #8]
 23fbb3c:	4718      	bx	r3

023fbb3e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fbb3e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fbb40:	210d      	movs	r1, #13
{
 23fbb42:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fbb44:	f7ff fff8 	bl	23fbb38 <_ZN5Print5printEc>
  n += print('\n');
 23fbb48:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fbb4a:	4604      	mov	r4, r0
  n += print('\n');
 23fbb4c:	4628      	mov	r0, r5
 23fbb4e:	f7ff fff3 	bl	23fbb38 <_ZN5Print5printEc>
  return n;
}
 23fbb52:	4420      	add	r0, r4
 23fbb54:	bd38      	pop	{r3, r4, r5, pc}

023fbb56 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fbb56:	b538      	push	{r3, r4, r5, lr}
 23fbb58:	4605      	mov	r5, r0
  return write(str);
 23fbb5a:	f7ff ffd7 	bl	23fbb0c <_ZN5Print5writeEPKc>
 23fbb5e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fbb60:	4628      	mov	r0, r5
 23fbb62:	f7ff ffec 	bl	23fbb3e <_ZN5Print7printlnEv>
  return n;
}
 23fbb66:	4420      	add	r0, r4
 23fbb68:	bd38      	pop	{r3, r4, r5, pc}

023fbb6a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fbb6a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fbb6c:	2a01      	cmp	r2, #1
 23fbb6e:	bf98      	it	ls
 23fbb70:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fbb72:	b530      	push	{r4, r5, lr}
 23fbb74:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fbb76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fbb7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fbb7c:	460d      	mov	r5, r1
 23fbb7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fbb82:	fb01 5312 	mls	r3, r1, r2, r5
 23fbb86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbb8a:	2b09      	cmp	r3, #9
 23fbb8c:	bf94      	ite	ls
 23fbb8e:	3330      	addls	r3, #48	; 0x30
 23fbb90:	3337      	addhi	r3, #55	; 0x37
 23fbb92:	b2db      	uxtb	r3, r3
  } while(n);
 23fbb94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbb96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fbb9a:	d9ef      	bls.n	23fbb7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fbb9c:	4621      	mov	r1, r4
 23fbb9e:	f7ff ffb5 	bl	23fbb0c <_ZN5Print5writeEPKc>
}
 23fbba2:	b00b      	add	sp, #44	; 0x2c
 23fbba4:	bd30      	pop	{r4, r5, pc}
	...

023fbba8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fbba8:	2200      	movs	r2, #0
 23fbbaa:	4b01      	ldr	r3, [pc, #4]	; (23fbbb0 <_GLOBAL__sub_I_RGB+0x8>)
 23fbbac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fbbae:	4770      	bx	lr
 23fbbb0:	1007aec8 	.word	0x1007aec8

023fbbb4 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fbbb4:	b510      	push	{r4, lr}
 23fbbb6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fbbb8:	f7fd ff78 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fbbbc:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fbbbe:	6823      	ldr	r3, [r4, #0]
 23fbbc0:	4620      	mov	r0, r4
 23fbbc2:	695b      	ldr	r3, [r3, #20]
 23fbbc4:	4798      	blx	r3
    if (c >= 0) return c;
 23fbbc6:	2800      	cmp	r0, #0
 23fbbc8:	da08      	bge.n	23fbbdc <_ZN6Stream9timedReadEv+0x28>
 23fbbca:	f7fd ff6f 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fbbce:	68e3      	ldr	r3, [r4, #12]
 23fbbd0:	1ac0      	subs	r0, r0, r3
 23fbbd2:	68a3      	ldr	r3, [r4, #8]
 23fbbd4:	4298      	cmp	r0, r3
 23fbbd6:	d3f2      	bcc.n	23fbbbe <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fbbd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23fbbdc:	bd10      	pop	{r4, pc}

023fbbde <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fbbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbbe2:	4607      	mov	r7, r0
 23fbbe4:	460c      	mov	r4, r1
 23fbbe6:	460d      	mov	r5, r1
 23fbbe8:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fbbea:	42b5      	cmp	r5, r6
 23fbbec:	eba5 0804 	sub.w	r8, r5, r4
 23fbbf0:	d007      	beq.n	23fbc02 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fbbf2:	4638      	mov	r0, r7
 23fbbf4:	f7ff ffde 	bl	23fbbb4 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fbbf8:	1e03      	subs	r3, r0, #0
 23fbbfa:	db02      	blt.n	23fbc02 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fbbfc:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fbc00:	e7f3      	b.n	23fbbea <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fbc02:	4640      	mov	r0, r8
 23fbc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbc08 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 23fbc08:	b570      	push	{r4, r5, r6, lr}
 23fbc0a:	460d      	mov	r5, r1
  String ret;
 23fbc0c:	4909      	ldr	r1, [pc, #36]	; (23fbc34 <_ZN6Stream15readStringUntilEc+0x2c>)
{
 23fbc0e:	4604      	mov	r4, r0
 23fbc10:	4616      	mov	r6, r2
  String ret;
 23fbc12:	f000 f85c 	bl	23fbcce <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 23fbc16:	4628      	mov	r0, r5
 23fbc18:	f7ff ffcc 	bl	23fbbb4 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 23fbc1c:	2800      	cmp	r0, #0
 23fbc1e:	db06      	blt.n	23fbc2e <_ZN6Stream15readStringUntilEc+0x26>
 23fbc20:	4286      	cmp	r6, r0
 23fbc22:	d004      	beq.n	23fbc2e <_ZN6Stream15readStringUntilEc+0x26>
    String & operator += (char c)           {concat(c); return (*this);}
 23fbc24:	b2c1      	uxtb	r1, r0
 23fbc26:	4620      	mov	r0, r4
 23fbc28:	f000 f8c4 	bl	23fbdb4 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 23fbc2c:	e7f3      	b.n	23fbc16 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 23fbc2e:	4620      	mov	r0, r4
 23fbc30:	bd70      	pop	{r4, r5, r6, pc}
 23fbc32:	bf00      	nop
 23fbc34:	023fe9d8 	.word	0x023fe9d8

023fbc38 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fbc38:	b510      	push	{r4, lr}
 23fbc3a:	4604      	mov	r4, r0
{
    free(buffer);
 23fbc3c:	6800      	ldr	r0, [r0, #0]
 23fbc3e:	f7fe fa8b 	bl	23fa158 <free>
}
 23fbc42:	4620      	mov	r0, r4
 23fbc44:	bd10      	pop	{r4, pc}

023fbc46 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fbc46:	b510      	push	{r4, lr}
 23fbc48:	4604      	mov	r4, r0
    if (buffer) {
 23fbc4a:	6800      	ldr	r0, [r0, #0]
 23fbc4c:	b108      	cbz	r0, 23fbc52 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fbc4e:	f7fe fa83 	bl	23fa158 <free>
    }
    buffer = nullptr;
 23fbc52:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fbc54:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fbc58:	6023      	str	r3, [r4, #0]
}
 23fbc5a:	bd10      	pop	{r4, pc}

023fbc5c <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fbc5c:	b538      	push	{r3, r4, r5, lr}
 23fbc5e:	4604      	mov	r4, r0
 23fbc60:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fbc62:	6800      	ldr	r0, [r0, #0]
 23fbc64:	3101      	adds	r1, #1
 23fbc66:	f7fe fa85 	bl	23fa174 <realloc>
    if (newbuffer) {
 23fbc6a:	b110      	cbz	r0, 23fbc72 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fbc6c:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fbc70:	2001      	movs	r0, #1
    }
    return 0;
}
 23fbc72:	bd38      	pop	{r3, r4, r5, pc}

023fbc74 <_ZN6String7reserveEj>:
{
 23fbc74:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fbc76:	6803      	ldr	r3, [r0, #0]
{
 23fbc78:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fbc7a:	b123      	cbz	r3, 23fbc86 <_ZN6String7reserveEj+0x12>
 23fbc7c:	6843      	ldr	r3, [r0, #4]
 23fbc7e:	428b      	cmp	r3, r1
 23fbc80:	d301      	bcc.n	23fbc86 <_ZN6String7reserveEj+0x12>
 23fbc82:	2001      	movs	r0, #1
}
 23fbc84:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fbc86:	4620      	mov	r0, r4
 23fbc88:	f7ff ffe8 	bl	23fbc5c <_ZN6String12changeBufferEj>
 23fbc8c:	2800      	cmp	r0, #0
 23fbc8e:	d0f9      	beq.n	23fbc84 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fbc90:	68a3      	ldr	r3, [r4, #8]
 23fbc92:	2b00      	cmp	r3, #0
 23fbc94:	d1f5      	bne.n	23fbc82 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fbc96:	6822      	ldr	r2, [r4, #0]
 23fbc98:	7013      	strb	r3, [r2, #0]
 23fbc9a:	e7f2      	b.n	23fbc82 <_ZN6String7reserveEj+0xe>

023fbc9c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fbc9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbc9e:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fbca0:	4611      	mov	r1, r2
 23fbca2:	9201      	str	r2, [sp, #4]
{
 23fbca4:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fbca6:	f7ff ffe5 	bl	23fbc74 <_ZN6String7reserveEj>
 23fbcaa:	9a01      	ldr	r2, [sp, #4]
 23fbcac:	b928      	cbnz	r0, 23fbcba <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fbcae:	4620      	mov	r0, r4
 23fbcb0:	f7ff ffc9 	bl	23fbc46 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fbcb4:	4620      	mov	r0, r4
 23fbcb6:	b003      	add	sp, #12
 23fbcb8:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fbcba:	4629      	mov	r1, r5
    len = length;
 23fbcbc:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fbcbe:	6820      	ldr	r0, [r4, #0]
 23fbcc0:	f000 fc74 	bl	23fc5ac <memcpy>
    buffer[len] = 0;
 23fbcc4:	2100      	movs	r1, #0
 23fbcc6:	6822      	ldr	r2, [r4, #0]
 23fbcc8:	68a3      	ldr	r3, [r4, #8]
 23fbcca:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fbccc:	e7f2      	b.n	23fbcb4 <_ZN6String4copyEPKcj+0x18>

023fbcce <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fbcce:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fbcd0:	b513      	push	{r0, r1, r4, lr}
 23fbcd2:	4604      	mov	r4, r0
    capacity_ = 0;
 23fbcd4:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fbcd8:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fbcda:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fbcdc:	b141      	cbz	r1, 23fbcf0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fbcde:	4608      	mov	r0, r1
 23fbce0:	9101      	str	r1, [sp, #4]
 23fbce2:	f7fa fcc9 	bl	23f6678 <strlen>
 23fbce6:	9901      	ldr	r1, [sp, #4]
 23fbce8:	4602      	mov	r2, r0
 23fbcea:	4620      	mov	r0, r4
 23fbcec:	f7ff ffd6 	bl	23fbc9c <_ZN6String4copyEPKcj>
}
 23fbcf0:	4620      	mov	r0, r4
 23fbcf2:	b002      	add	sp, #8
 23fbcf4:	bd10      	pop	{r4, pc}

023fbcf6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fbcf6:	b538      	push	{r3, r4, r5, lr}
 23fbcf8:	4605      	mov	r5, r0
    if (buffer) {
 23fbcfa:	6800      	ldr	r0, [r0, #0]
{
 23fbcfc:	460c      	mov	r4, r1
    if (buffer) {
 23fbcfe:	b170      	cbz	r0, 23fbd1e <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fbd00:	686a      	ldr	r2, [r5, #4]
 23fbd02:	688b      	ldr	r3, [r1, #8]
 23fbd04:	429a      	cmp	r2, r3
 23fbd06:	d308      	bcc.n	23fbd1a <_ZN6String4moveERS_+0x24>
 23fbd08:	6809      	ldr	r1, [r1, #0]
 23fbd0a:	b131      	cbz	r1, 23fbd1a <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fbd0c:	f000 fcd1 	bl	23fc6b2 <strcpy>
            len = rhs.len;
 23fbd10:	68a3      	ldr	r3, [r4, #8]
 23fbd12:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fbd14:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fbd16:	60a3      	str	r3, [r4, #8]
}
 23fbd18:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fbd1a:	f7fe fa1d 	bl	23fa158 <free>
    buffer = rhs.buffer;
 23fbd1e:	6823      	ldr	r3, [r4, #0]
 23fbd20:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fbd22:	6863      	ldr	r3, [r4, #4]
 23fbd24:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fbd26:	68a3      	ldr	r3, [r4, #8]
 23fbd28:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fbd2a:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fbd2c:	e9c4 3300 	strd	r3, r3, [r4]
 23fbd30:	e7f1      	b.n	23fbd16 <_ZN6String4moveERS_+0x20>

023fbd32 <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fbd32:	2300      	movs	r3, #0
String::String(String &&rval)
 23fbd34:	b510      	push	{r4, lr}
 23fbd36:	4604      	mov	r4, r0
    capacity_ = 0;
 23fbd38:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fbd3c:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fbd3e:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fbd40:	f7ff ffd9 	bl	23fbcf6 <_ZN6String4moveERS_>
}
 23fbd44:	4620      	mov	r0, r4
 23fbd46:	bd10      	pop	{r4, pc}

023fbd48 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fbd48:	4288      	cmp	r0, r1
{
 23fbd4a:	b510      	push	{r4, lr}
 23fbd4c:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fbd4e:	d005      	beq.n	23fbd5c <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fbd50:	680b      	ldr	r3, [r1, #0]
 23fbd52:	b12b      	cbz	r3, 23fbd60 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fbd54:	688a      	ldr	r2, [r1, #8]
 23fbd56:	4619      	mov	r1, r3
 23fbd58:	f7ff ffa0 	bl	23fbc9c <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fbd5c:	4620      	mov	r0, r4
 23fbd5e:	bd10      	pop	{r4, pc}
        invalidate();
 23fbd60:	f7ff ff71 	bl	23fbc46 <_ZN6String10invalidateEv>
 23fbd64:	e7fa      	b.n	23fbd5c <_ZN6StringaSERKS_+0x14>

023fbd66 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fbd66:	2300      	movs	r3, #0
String::String(const String &value)
 23fbd68:	b510      	push	{r4, lr}
 23fbd6a:	4604      	mov	r4, r0
    capacity_ = 0;
 23fbd6c:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fbd70:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fbd72:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fbd74:	f7ff ffe8 	bl	23fbd48 <_ZN6StringaSERKS_>
}
 23fbd78:	4620      	mov	r0, r4
 23fbd7a:	bd10      	pop	{r4, pc}

023fbd7c <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fbd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd7e:	4604      	mov	r4, r0
 23fbd80:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23fbd82:	460f      	mov	r7, r1
 23fbd84:	b909      	cbnz	r1, 23fbd8a <_ZN6String6concatEPKcj+0xe>
        return 0;
 23fbd86:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23fbd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23fbd8a:	b18a      	cbz	r2, 23fbdb0 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23fbd8c:	6885      	ldr	r5, [r0, #8]
 23fbd8e:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23fbd90:	4629      	mov	r1, r5
 23fbd92:	f7ff ff6f 	bl	23fbc74 <_ZN6String7reserveEj>
 23fbd96:	2800      	cmp	r0, #0
 23fbd98:	d0f5      	beq.n	23fbd86 <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23fbd9a:	68a3      	ldr	r3, [r4, #8]
 23fbd9c:	6820      	ldr	r0, [r4, #0]
 23fbd9e:	4632      	mov	r2, r6
 23fbda0:	4418      	add	r0, r3
 23fbda2:	4639      	mov	r1, r7
 23fbda4:	f000 fc02 	bl	23fc5ac <memcpy>
    buffer[newlen] = 0;
 23fbda8:	2200      	movs	r2, #0
 23fbdaa:	6823      	ldr	r3, [r4, #0]
 23fbdac:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23fbdae:	60a5      	str	r5, [r4, #8]
        return 1;
 23fbdb0:	2001      	movs	r0, #1
 23fbdb2:	e7e9      	b.n	23fbd88 <_ZN6String6concatEPKcj+0xc>

023fbdb4 <_ZN6String6concatEc>:
    return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
    char buf[2] = {};
 23fbdb4:	2300      	movs	r3, #0
{
 23fbdb6:	b507      	push	{r0, r1, r2, lr}
    buf[0] = c;
    buf[1] = 0;
    return concat(buf, 1);
 23fbdb8:	2201      	movs	r2, #1
    char buf[2] = {};
 23fbdba:	f8ad 3004 	strh.w	r3, [sp, #4]
    buf[0] = c;
 23fbdbe:	f88d 1004 	strb.w	r1, [sp, #4]
    return concat(buf, 1);
 23fbdc2:	a901      	add	r1, sp, #4
 23fbdc4:	f7ff ffda 	bl	23fbd7c <_ZN6String6concatEPKcj>
}
 23fbdc8:	b003      	add	sp, #12
 23fbdca:	f85d fb04 	ldr.w	pc, [sp], #4

023fbdce <_ZNK6String6equalsEPKc>:
{
    return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 23fbdce:	b508      	push	{r3, lr}
    if (len == 0) {
 23fbdd0:	6882      	ldr	r2, [r0, #8]
 23fbdd2:	b93a      	cbnz	r2, 23fbde4 <_ZNK6String6equalsEPKc+0x16>
        return (cstr == nullptr || *cstr == 0);
 23fbdd4:	b121      	cbz	r1, 23fbde0 <_ZNK6String6equalsEPKc+0x12>
 23fbdd6:	7808      	ldrb	r0, [r1, #0]
    }
    if (cstr == nullptr) {
        return buffer[0] == 0;
    }
    return strcmp(buffer, cstr) == 0;
 23fbdd8:	fab0 f080 	clz	r0, r0
 23fbddc:	0940      	lsrs	r0, r0, #5
 23fbdde:	e000      	b.n	23fbde2 <_ZNK6String6equalsEPKc+0x14>
        return (cstr == nullptr || *cstr == 0);
 23fbde0:	2001      	movs	r0, #1
}
 23fbde2:	bd08      	pop	{r3, pc}
        return buffer[0] == 0;
 23fbde4:	6800      	ldr	r0, [r0, #0]
    if (cstr == nullptr) {
 23fbde6:	b909      	cbnz	r1, 23fbdec <_ZNK6String6equalsEPKc+0x1e>
        return buffer[0] == 0;
 23fbde8:	7800      	ldrb	r0, [r0, #0]
 23fbdea:	e7f5      	b.n	23fbdd8 <_ZNK6String6equalsEPKc+0xa>
    return strcmp(buffer, cstr) == 0;
 23fbdec:	f7fa fc3a 	bl	23f6664 <strcmp>
 23fbdf0:	e7f2      	b.n	23fbdd8 <_ZNK6String6equalsEPKc+0xa>
	...

023fbdf4 <_ZNK6String9substringEjj>:
{
    return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 23fbdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbdf6:	461d      	mov	r5, r3
    if (left > right) {
 23fbdf8:	429a      	cmp	r2, r3
 23fbdfa:	bf88      	it	hi
 23fbdfc:	4613      	movhi	r3, r2
{
 23fbdfe:	460f      	mov	r7, r1
 23fbe00:	4614      	mov	r4, r2
    if (left > right) {
 23fbe02:	bf88      	it	hi
 23fbe04:	462c      	movhi	r4, r5
        unsigned int temp = right;
        right = left;
        left = temp;
    }
    String out;
 23fbe06:	490b      	ldr	r1, [pc, #44]	; (23fbe34 <_ZNK6String9substringEjj+0x40>)
    if (left > right) {
 23fbe08:	bf88      	it	hi
 23fbe0a:	461d      	movhi	r5, r3
{
 23fbe0c:	4606      	mov	r6, r0
    String out;
 23fbe0e:	f7ff ff5e 	bl	23fbcce <_ZN6StringC1EPK19__FlashStringHelper>
    if (left > len) {
 23fbe12:	68bb      	ldr	r3, [r7, #8]
 23fbe14:	42a3      	cmp	r3, r4
 23fbe16:	d30a      	bcc.n	23fbe2e <_ZNK6String9substringEjj+0x3a>
        return out;
    }
    if (right > len) {
        right = len;
    }
    out.copy(&buffer[left], right - left);
 23fbe18:	6839      	ldr	r1, [r7, #0]
 23fbe1a:	42ab      	cmp	r3, r5
 23fbe1c:	bf94      	ite	ls
 23fbe1e:	ebc4 0203 	rsbls	r2, r4, r3
 23fbe22:	ebc4 0205 	rsbhi	r2, r4, r5
 23fbe26:	4630      	mov	r0, r6
 23fbe28:	4421      	add	r1, r4
 23fbe2a:	f7ff ff37 	bl	23fbc9c <_ZN6String4copyEPKcj>
    return out;
}
 23fbe2e:	4630      	mov	r0, r6
 23fbe30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fbe32:	bf00      	nop
 23fbe34:	023fe9d8 	.word	0x023fe9d8

023fbe38 <_ZNK6String9substringEj>:
{
 23fbe38:	b510      	push	{r4, lr}
 23fbe3a:	4604      	mov	r4, r0
    return substring(left, len);
 23fbe3c:	688b      	ldr	r3, [r1, #8]
 23fbe3e:	f7ff ffd9 	bl	23fbdf4 <_ZNK6String9substringEjj>
}
 23fbe42:	4620      	mov	r0, r4
 23fbe44:	bd10      	pop	{r4, pc}

023fbe46 <_ZN6String4trimEv>:
    }
    return *this;
}

String& String::trim(void)
{
 23fbe46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!buffer || len == 0) {
 23fbe4a:	6806      	ldr	r6, [r0, #0]
{
 23fbe4c:	4605      	mov	r5, r0
    if (!buffer || len == 0) {
 23fbe4e:	b306      	cbz	r6, 23fbe92 <_ZN6String4trimEv+0x4c>
 23fbe50:	6884      	ldr	r4, [r0, #8]
 23fbe52:	b1f4      	cbz	r4, 23fbe92 <_ZN6String4trimEv+0x4c>
 23fbe54:	46b0      	mov	r8, r6
 23fbe56:	4647      	mov	r7, r8
        return *this;
    }
    char *begin = buffer;
    while (isspace(*begin)) {
 23fbe58:	f818 0b01 	ldrb.w	r0, [r8], #1
 23fbe5c:	f000 fb9e 	bl	23fc59c <isspace>
 23fbe60:	2800      	cmp	r0, #0
 23fbe62:	d1f8      	bne.n	23fbe56 <_ZN6String4trimEv+0x10>
        begin++;
    }
    char *end = buffer + len - 1;
 23fbe64:	3c01      	subs	r4, #1
 23fbe66:	4434      	add	r4, r6
    while (isspace(*end) && end >= begin) {
 23fbe68:	7820      	ldrb	r0, [r4, #0]
 23fbe6a:	f000 fb97 	bl	23fc59c <isspace>
 23fbe6e:	b118      	cbz	r0, 23fbe78 <_ZN6String4trimEv+0x32>
 23fbe70:	42a7      	cmp	r7, r4
 23fbe72:	d801      	bhi.n	23fbe78 <_ZN6String4trimEv+0x32>
        end--;
 23fbe74:	3c01      	subs	r4, #1
    while (isspace(*end) && end >= begin) {
 23fbe76:	e7f7      	b.n	23fbe68 <_ZN6String4trimEv+0x22>
    }
    len = end + 1 - begin;
 23fbe78:	1c62      	adds	r2, r4, #1
 23fbe7a:	1bd2      	subs	r2, r2, r7
    if (begin > buffer) {
 23fbe7c:	42be      	cmp	r6, r7
    len = end + 1 - begin;
 23fbe7e:	60aa      	str	r2, [r5, #8]
    if (begin > buffer) {
 23fbe80:	d203      	bcs.n	23fbe8a <_ZN6String4trimEv+0x44>
        memcpy(buffer, begin, len);
 23fbe82:	4639      	mov	r1, r7
 23fbe84:	4630      	mov	r0, r6
 23fbe86:	f000 fb91 	bl	23fc5ac <memcpy>
    }
    buffer[len] = 0;
 23fbe8a:	2100      	movs	r1, #0
 23fbe8c:	682a      	ldr	r2, [r5, #0]
 23fbe8e:	68ab      	ldr	r3, [r5, #8]
 23fbe90:	54d1      	strb	r1, [r2, r3]
  return *this;
}
 23fbe92:	4628      	mov	r0, r5
 23fbe94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbe98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fbe98:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fbe9a:	2000      	movs	r0, #0
 23fbe9c:	4b04      	ldr	r3, [pc, #16]	; (23fbeb0 <_GLOBAL__sub_I_System+0x18>)
 23fbe9e:	601a      	str	r2, [r3, #0]
 23fbea0:	4b04      	ldr	r3, [pc, #16]	; (23fbeb4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fbea2:	4a05      	ldr	r2, [pc, #20]	; (23fbeb8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fbea4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fbea8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fbeaa:	f7fe b82f 	b.w	23f9f0c <set_system_mode>
 23fbeae:	bf00      	nop
 23fbeb0:	1007aee4 	.word	0x1007aee4
 23fbeb4:	1007aed8 	.word	0x1007aed8
 23fbeb8:	ffff0000 	.word	0xffff0000

023fbebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fbebc:	4b02      	ldr	r3, [pc, #8]	; (23fbec8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fbebe:	681a      	ldr	r2, [r3, #0]
 23fbec0:	4b02      	ldr	r3, [pc, #8]	; (23fbecc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fbec2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fbec4:	4770      	bx	lr
 23fbec6:	bf00      	nop
 23fbec8:	1007a494 	.word	0x1007a494
 23fbecc:	1007aee8 	.word	0x1007aee8

023fbed0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fbed0:	4770      	bx	lr

023fbed2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fbed2:	7441      	strb	r1, [r0, #17]
}
 23fbed4:	4770      	bx	lr

023fbed6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fbed6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fbed8:	7c00      	ldrb	r0, [r0, #16]
 23fbeda:	f7fd ff37 	bl	23f9d4c <hal_usart_available_data_for_write>
}
 23fbede:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fbee2:	bd08      	pop	{r3, pc}

023fbee4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fbee4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fbee6:	7c00      	ldrb	r0, [r0, #16]
 23fbee8:	f7fd feea 	bl	23f9cc0 <hal_usart_available>
}
 23fbeec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fbef0:	bd08      	pop	{r3, pc}

023fbef2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fbef2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fbef4:	7c00      	ldrb	r0, [r0, #16]
 23fbef6:	f7fd feff 	bl	23f9cf8 <hal_usart_peek>
}
 23fbefa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fbefe:	bd08      	pop	{r3, pc}

023fbf00 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fbf00:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fbf02:	7c00      	ldrb	r0, [r0, #16]
 23fbf04:	f7fd feea 	bl	23f9cdc <hal_usart_read>
}
 23fbf08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fbf0c:	bd08      	pop	{r3, pc}

023fbf0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fbf0e:	7c00      	ldrb	r0, [r0, #16]
 23fbf10:	f7fd bf00 	b.w	23f9d14 <hal_usart_flush>

023fbf14 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fbf14:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fbf16:	7c45      	ldrb	r5, [r0, #17]
{
 23fbf18:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fbf1a:	b12d      	cbz	r5, 23fbf28 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fbf1c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fbf1e:	b003      	add	sp, #12
 23fbf20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fbf24:	f7fd bebe 	b.w	23f9ca4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fbf28:	7c00      	ldrb	r0, [r0, #16]
 23fbf2a:	9101      	str	r1, [sp, #4]
 23fbf2c:	f7fd ff0e 	bl	23f9d4c <hal_usart_available_data_for_write>
 23fbf30:	2800      	cmp	r0, #0
 23fbf32:	9901      	ldr	r1, [sp, #4]
 23fbf34:	dcf2      	bgt.n	23fbf1c <_ZN11USARTSerial5writeEh+0x8>
}
 23fbf36:	4628      	mov	r0, r5
 23fbf38:	b003      	add	sp, #12
 23fbf3a:	bd30      	pop	{r4, r5, pc}

023fbf3c <_ZN11USARTSerialD0Ev>:
 23fbf3c:	b510      	push	{r4, lr}
 23fbf3e:	4604      	mov	r4, r0
 23fbf40:	2114      	movs	r1, #20
 23fbf42:	f7fa fbc4 	bl	23f66ce <_ZdlPvj>
 23fbf46:	4620      	mov	r0, r4
 23fbf48:	bd10      	pop	{r4, pc}
	...

023fbf4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fbf4c:	b510      	push	{r4, lr}
 23fbf4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbf52:	4604      	mov	r4, r0
 23fbf54:	4608      	mov	r0, r1
 23fbf56:	4611      	mov	r1, r2
 23fbf58:	2200      	movs	r2, #0
 23fbf5a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fbf5e:	4b04      	ldr	r3, [pc, #16]	; (23fbf70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fbf60:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fbf62:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fbf64:	2301      	movs	r3, #1
 23fbf66:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fbf68:	f7fd ff0c 	bl	23f9d84 <hal_usart_init_ex>
}
 23fbf6c:	4620      	mov	r0, r4
 23fbf6e:	bd10      	pop	{r4, pc}
 23fbf70:	023ffb7c 	.word	0x023ffb7c

023fbf74 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fbf74:	2300      	movs	r3, #0
 23fbf76:	7c00      	ldrb	r0, [r0, #16]
 23fbf78:	f7fd bef6 	b.w	23f9d68 <hal_usart_begin_config>

023fbf7c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fbf7c:	2200      	movs	r2, #0
 23fbf7e:	f7ff bff9 	b.w	23fbf74 <_ZN11USARTSerial5beginEmm>

023fbf82 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fbf82:	7c00      	ldrb	r0, [r0, #16]
 23fbf84:	f7fd be80 	b.w	23f9c88 <hal_usart_end>

023fbf88 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fbf88:	7c00      	ldrb	r0, [r0, #16]
 23fbf8a:	f7fd bed1 	b.w	23f9d30 <hal_usart_is_enabled>

023fbf8e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fbf8e:	7441      	strb	r1, [r0, #17]
}
 23fbf90:	4770      	bx	lr

023fbf92 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fbf92:	4770      	bx	lr

023fbf94 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fbf94:	4770      	bx	lr

023fbf96 <_ZN9USBSerial4readEv>:
{
 23fbf96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fbf98:	2100      	movs	r1, #0
 23fbf9a:	7c00      	ldrb	r0, [r0, #16]
 23fbf9c:	f7fd ff46 	bl	23f9e2c <HAL_USB_USART_Receive_Data>
}
 23fbfa0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fbfa4:	bd08      	pop	{r3, pc}

023fbfa6 <_ZN9USBSerial4peekEv>:
{
 23fbfa6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fbfa8:	2101      	movs	r1, #1
 23fbfaa:	7c00      	ldrb	r0, [r0, #16]
 23fbfac:	f7fd ff3e 	bl	23f9e2c <HAL_USB_USART_Receive_Data>
}
 23fbfb0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fbfb4:	bd08      	pop	{r3, pc}

023fbfb6 <_ZN9USBSerial17availableForWriteEv>:
{
 23fbfb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fbfb8:	7c00      	ldrb	r0, [r0, #16]
 23fbfba:	f7fd ff29 	bl	23f9e10 <HAL_USB_USART_Available_Data_For_Write>
}
 23fbfbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fbfc2:	bd08      	pop	{r3, pc}

023fbfc4 <_ZN9USBSerial9availableEv>:
{
 23fbfc4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fbfc6:	7c00      	ldrb	r0, [r0, #16]
 23fbfc8:	f7fd ff14 	bl	23f9df4 <HAL_USB_USART_Available_Data>
}
 23fbfcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fbfd0:	bd08      	pop	{r3, pc}

023fbfd2 <_ZN9USBSerial5writeEh>:
{
 23fbfd2:	b513      	push	{r0, r1, r4, lr}
 23fbfd4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fbfd6:	7c00      	ldrb	r0, [r0, #16]
{
 23fbfd8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fbfda:	f7fd ff19 	bl	23f9e10 <HAL_USB_USART_Available_Data_For_Write>
 23fbfde:	2800      	cmp	r0, #0
 23fbfe0:	9901      	ldr	r1, [sp, #4]
 23fbfe2:	dc01      	bgt.n	23fbfe8 <_ZN9USBSerial5writeEh+0x16>
 23fbfe4:	7c60      	ldrb	r0, [r4, #17]
 23fbfe6:	b120      	cbz	r0, 23fbff2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fbfe8:	7c20      	ldrb	r0, [r4, #16]
 23fbfea:	f7fd ff2d 	bl	23f9e48 <HAL_USB_USART_Send_Data>
 23fbfee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fbff2:	b002      	add	sp, #8
 23fbff4:	bd10      	pop	{r4, pc}

023fbff6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fbff6:	7c00      	ldrb	r0, [r0, #16]
 23fbff8:	f7fd bf34 	b.w	23f9e64 <HAL_USB_USART_Flush_Data>

023fbffc <_ZN9USBSerialD0Ev>:
 23fbffc:	b510      	push	{r4, lr}
 23fbffe:	4604      	mov	r4, r0
 23fc000:	2114      	movs	r1, #20
 23fc002:	f7fa fb64 	bl	23f66ce <_ZdlPvj>
 23fc006:	4620      	mov	r0, r4
 23fc008:	bd10      	pop	{r4, pc}
	...

023fc00c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc00c:	b510      	push	{r4, lr}
 23fc00e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc012:	4604      	mov	r4, r0
 23fc014:	4608      	mov	r0, r1
 23fc016:	2100      	movs	r1, #0
 23fc018:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fc01c:	4b04      	ldr	r3, [pc, #16]	; (23fc030 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fc01e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc020:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc022:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fc024:	4611      	mov	r1, r2
  _blocking = true;
 23fc026:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fc028:	f7fd feba 	bl	23f9da0 <HAL_USB_USART_Init>
}
 23fc02c:	4620      	mov	r0, r4
 23fc02e:	bd10      	pop	{r4, pc}
 23fc030:	023ffbb0 	.word	0x023ffbb0

023fc034 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fc034:	2200      	movs	r2, #0
 23fc036:	7c00      	ldrb	r0, [r0, #16]
 23fc038:	f7fd bec0 	b.w	23f9dbc <HAL_USB_USART_Begin>

023fc03c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fc03c:	7c00      	ldrb	r0, [r0, #16]
 23fc03e:	f7fd becb 	b.w	23f9dd8 <HAL_USB_USART_End>

023fc042 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fc042:	7c00      	ldrb	r0, [r0, #16]
 23fc044:	f7fd bf1c 	b.w	23f9e80 <HAL_USB_USART_Is_Connected>

023fc048 <_Z19acquireSerialBufferv>:
{
 23fc048:	b510      	push	{r4, lr}
 23fc04a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fc04c:	2214      	movs	r2, #20
 23fc04e:	2100      	movs	r1, #0
 23fc050:	f000 fad3 	bl	23fc5fa <memset>
}
 23fc054:	4620      	mov	r0, r4
 23fc056:	bd10      	pop	{r4, pc}

023fc058 <_Z16_fetch_usbserialv>:
{
 23fc058:	b510      	push	{r4, lr}
 23fc05a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fc05c:	a803      	add	r0, sp, #12
 23fc05e:	f7ff fff3 	bl	23fc048 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc062:	4c0c      	ldr	r4, [pc, #48]	; (23fc094 <_Z16_fetch_usbserialv+0x3c>)
 23fc064:	e8d4 1f8f 	ldab	r1, [r4]
 23fc068:	f011 0101 	ands.w	r1, r1, #1
 23fc06c:	d10f      	bne.n	23fc08e <_Z16_fetch_usbserialv+0x36>
 23fc06e:	4620      	mov	r0, r4
 23fc070:	9101      	str	r1, [sp, #4]
 23fc072:	f7fa fb3d 	bl	23f66f0 <__cxa_guard_acquire>
 23fc076:	9901      	ldr	r1, [sp, #4]
 23fc078:	b148      	cbz	r0, 23fc08e <_Z16_fetch_usbserialv+0x36>
 23fc07a:	aa03      	add	r2, sp, #12
 23fc07c:	4806      	ldr	r0, [pc, #24]	; (23fc098 <_Z16_fetch_usbserialv+0x40>)
 23fc07e:	f7ff ffc5 	bl	23fc00c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fc082:	4620      	mov	r0, r4
 23fc084:	f7fa fb39 	bl	23f66fa <__cxa_guard_release>
 23fc088:	4804      	ldr	r0, [pc, #16]	; (23fc09c <_Z16_fetch_usbserialv+0x44>)
 23fc08a:	f000 fa6d 	bl	23fc568 <atexit>
	return _usbserial;
}
 23fc08e:	4802      	ldr	r0, [pc, #8]	; (23fc098 <_Z16_fetch_usbserialv+0x40>)
 23fc090:	b008      	add	sp, #32
 23fc092:	bd10      	pop	{r4, pc}
 23fc094:	1007aeec 	.word	0x1007aeec
 23fc098:	1007aef0 	.word	0x1007aef0
 23fc09c:	023fbf93 	.word	0x023fbf93

023fc0a0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fc0a0:	2200      	movs	r2, #0
 23fc0a2:	6840      	ldr	r0, [r0, #4]
 23fc0a4:	4611      	mov	r1, r2
 23fc0a6:	f7fd bfaf 	b.w	23fa008 <network_ready>

023fc0aa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc0aa:	2200      	movs	r2, #0
 23fc0ac:	6840      	ldr	r0, [r0, #4]
 23fc0ae:	4611      	mov	r1, r2
 23fc0b0:	f7fd bfe2 	b.w	23fa078 <network_listening>

023fc0b4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc0b4:	2200      	movs	r2, #0
 23fc0b6:	6840      	ldr	r0, [r0, #4]
 23fc0b8:	4611      	mov	r1, r2
 23fc0ba:	f7fd bff9 	b.w	23fa0b0 <network_get_listen_timeout>

023fc0be <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc0be:	2200      	movs	r2, #0
 23fc0c0:	6840      	ldr	r0, [r0, #4]
 23fc0c2:	f7fd bfe7 	b.w	23fa094 <network_set_listen_timeout>

023fc0c6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc0c6:	2200      	movs	r2, #0
 23fc0c8:	6840      	ldr	r0, [r0, #4]
 23fc0ca:	f081 0101 	eor.w	r1, r1, #1
 23fc0ce:	f7fd bfc5 	b.w	23fa05c <network_listen>

023fc0d2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc0d2:	2300      	movs	r3, #0
 23fc0d4:	6840      	ldr	r0, [r0, #4]
 23fc0d6:	461a      	mov	r2, r3
 23fc0d8:	4619      	mov	r1, r3
 23fc0da:	f7fd bfb1 	b.w	23fa040 <network_off>

023fc0de <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc0de:	2300      	movs	r3, #0
 23fc0e0:	6840      	ldr	r0, [r0, #4]
 23fc0e2:	461a      	mov	r2, r3
 23fc0e4:	4619      	mov	r1, r3
 23fc0e6:	f7fd bf9d 	b.w	23fa024 <network_on>

023fc0ea <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc0ea:	2200      	movs	r2, #0
 23fc0ec:	6840      	ldr	r0, [r0, #4]
 23fc0ee:	4611      	mov	r1, r2
 23fc0f0:	f7fd bf6e 	b.w	23f9fd0 <network_connecting>

023fc0f4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc0f4:	2200      	movs	r2, #0
 23fc0f6:	2102      	movs	r1, #2
 23fc0f8:	6840      	ldr	r0, [r0, #4]
 23fc0fa:	f7fd bf77 	b.w	23f9fec <network_disconnect>

023fc0fe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc0fe:	2300      	movs	r3, #0
 23fc100:	6840      	ldr	r0, [r0, #4]
 23fc102:	461a      	mov	r2, r3
 23fc104:	f7fd bf56 	b.w	23f9fb4 <network_connect>

023fc108 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fc108:	2205      	movs	r2, #5
 23fc10a:	4b02      	ldr	r3, [pc, #8]	; (23fc114 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fc10c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fc10e:	4a02      	ldr	r2, [pc, #8]	; (23fc118 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fc110:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fc112:	4770      	bx	lr
 23fc114:	1007af04 	.word	0x1007af04
 23fc118:	023ffbe4 	.word	0x023ffbe4

023fc11c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fc11c:	4b01      	ldr	r3, [pc, #4]	; (23fc124 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fc11e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fc120:	4770      	bx	lr
 23fc122:	bf00      	nop
 23fc124:	1007a498 	.word	0x1007a498

023fc128 <serialEventRun>:
{
 23fc128:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fc12a:	4b0d      	ldr	r3, [pc, #52]	; (23fc160 <serialEventRun+0x38>)
 23fc12c:	b143      	cbz	r3, 23fc140 <serialEventRun+0x18>
 23fc12e:	f7ff ff93 	bl	23fc058 <_Z16_fetch_usbserialv>
 23fc132:	6803      	ldr	r3, [r0, #0]
 23fc134:	691b      	ldr	r3, [r3, #16]
 23fc136:	4798      	blx	r3
 23fc138:	2800      	cmp	r0, #0
 23fc13a:	dd01      	ble.n	23fc140 <serialEventRun+0x18>
        serialEvent();
 23fc13c:	e000      	b.n	23fc140 <serialEventRun+0x18>
 23fc13e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fc140:	4b08      	ldr	r3, [pc, #32]	; (23fc164 <serialEventRun+0x3c>)
 23fc142:	b143      	cbz	r3, 23fc156 <serialEventRun+0x2e>
 23fc144:	f000 f91a 	bl	23fc37c <_Z22__fetch_global_Serial1v>
 23fc148:	6803      	ldr	r3, [r0, #0]
 23fc14a:	691b      	ldr	r3, [r3, #16]
 23fc14c:	4798      	blx	r3
 23fc14e:	2800      	cmp	r0, #0
 23fc150:	dd01      	ble.n	23fc156 <serialEventRun+0x2e>
        serialEvent1();
 23fc152:	e000      	b.n	23fc156 <serialEventRun+0x2e>
 23fc154:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fc156:	4b04      	ldr	r3, [pc, #16]	; (23fc168 <serialEventRun+0x40>)
 23fc158:	b10b      	cbz	r3, 23fc15e <serialEventRun+0x36>
 23fc15a:	f000 f955 	bl	23fc408 <_Z15serialEventRun2v>
}
 23fc15e:	bd08      	pop	{r3, pc}
	...

023fc16c <_post_loop>:
{
 23fc16c:	b508      	push	{r3, lr}
	serialEventRun();
 23fc16e:	f7ff ffdb 	bl	23fc128 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fc172:	f7fd fc9b 	bl	23f9aac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fc176:	4b01      	ldr	r3, [pc, #4]	; (23fc17c <_post_loop+0x10>)
 23fc178:	6018      	str	r0, [r3, #0]
}
 23fc17a:	bd08      	pop	{r3, pc}
 23fc17c:	1007af14 	.word	0x1007af14

023fc180 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc180:	4805      	ldr	r0, [pc, #20]	; (23fc198 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fc182:	4a06      	ldr	r2, [pc, #24]	; (23fc19c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fc184:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc186:	1a12      	subs	r2, r2, r0
 23fc188:	4905      	ldr	r1, [pc, #20]	; (23fc1a0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fc18a:	f000 fa0f 	bl	23fc5ac <memcpy>
    __backup_sram_signature = signature;
 23fc18e:	4b05      	ldr	r3, [pc, #20]	; (23fc1a4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fc190:	4a05      	ldr	r2, [pc, #20]	; (23fc1a8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fc192:	601a      	str	r2, [r3, #0]
}
 23fc194:	bd08      	pop	{r3, pc}
 23fc196:	bf00      	nop
 23fc198:	1007b400 	.word	0x1007b400
 23fc19c:	1007b404 	.word	0x1007b404
 23fc1a0:	085ffbd4 	.word	0x085ffbd4
 23fc1a4:	1007b400 	.word	0x1007b400
 23fc1a8:	9a271c1e 	.word	0x9a271c1e

023fc1ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc1ac:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fc1ae:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc1b0:	461a      	mov	r2, r3
 23fc1b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc1b6:	9300      	str	r3, [sp, #0]
 23fc1b8:	f7fd fed2 	bl	23f9f60 <system_ctrl_set_result>
}
 23fc1bc:	b003      	add	sp, #12
 23fc1be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc1c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fc1c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fc1c6:	8843      	ldrh	r3, [r0, #2]
 23fc1c8:	2b0a      	cmp	r3, #10
 23fc1ca:	d008      	beq.n	23fc1de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fc1cc:	2b50      	cmp	r3, #80	; 0x50
 23fc1ce:	d10b      	bne.n	23fc1e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fc1d0:	4b09      	ldr	r3, [pc, #36]	; (23fc1f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fc1d2:	681b      	ldr	r3, [r3, #0]
 23fc1d4:	b14b      	cbz	r3, 23fc1ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fc1d6:	b003      	add	sp, #12
 23fc1d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fc1dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fc1de:	f7ff ffe5 	bl	23fc1ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fc1e2:	b003      	add	sp, #12
 23fc1e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc1e8:	2300      	movs	r3, #0
 23fc1ea:	461a      	mov	r2, r3
 23fc1ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc1f0:	9300      	str	r3, [sp, #0]
 23fc1f2:	f7fd feb5 	bl	23f9f60 <system_ctrl_set_result>
}
 23fc1f6:	e7f4      	b.n	23fc1e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fc1f8:	1007af10 	.word	0x1007af10

023fc1fc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc1fc:	2100      	movs	r1, #0
{
 23fc1fe:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc200:	4811      	ldr	r0, [pc, #68]	; (23fc248 <module_user_init_hook+0x4c>)
 23fc202:	f7fe f819 	bl	23fa238 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fc206:	4b11      	ldr	r3, [pc, #68]	; (23fc24c <module_user_init_hook+0x50>)
 23fc208:	681a      	ldr	r2, [r3, #0]
 23fc20a:	4b11      	ldr	r3, [pc, #68]	; (23fc250 <module_user_init_hook+0x54>)
 23fc20c:	429a      	cmp	r2, r3
 23fc20e:	bf0c      	ite	eq
 23fc210:	2201      	moveq	r2, #1
 23fc212:	2200      	movne	r2, #0
 23fc214:	4b0f      	ldr	r3, [pc, #60]	; (23fc254 <module_user_init_hook+0x58>)
 23fc216:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fc218:	d001      	beq.n	23fc21e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fc21a:	f7ff ffb1 	bl	23fc180 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fc21e:	f7fd fc1b 	bl	23f9a58 <HAL_RNG_GetRandomNumber>
 23fc222:	4604      	mov	r4, r0
    srand(seed);
 23fc224:	f000 fa00 	bl	23fc628 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fc228:	4b0b      	ldr	r3, [pc, #44]	; (23fc258 <module_user_init_hook+0x5c>)
 23fc22a:	b113      	cbz	r3, 23fc232 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fc22c:	4620      	mov	r0, r4
 23fc22e:	e000      	b.n	23fc232 <module_user_init_hook+0x36>
 23fc230:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fc232:	2100      	movs	r1, #0
 23fc234:	4808      	ldr	r0, [pc, #32]	; (23fc258 <module_user_init_hook+0x5c>)
 23fc236:	f7fd feaf 	bl	23f9f98 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fc23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fc23e:	2100      	movs	r1, #0
 23fc240:	4806      	ldr	r0, [pc, #24]	; (23fc25c <module_user_init_hook+0x60>)
 23fc242:	f7fd be7f 	b.w	23f9f44 <system_ctrl_set_app_request_handler>
 23fc246:	bf00      	nop
 23fc248:	023fc11d 	.word	0x023fc11d
 23fc24c:	1007b400 	.word	0x1007b400
 23fc250:	9a271c1e 	.word	0x9a271c1e
 23fc254:	1007af0c 	.word	0x1007af0c
 23fc258:	00000000 	.word	0x00000000
 23fc25c:	023fc1c5 	.word	0x023fc1c5

023fc260 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23fc260:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23fc262:	4c08      	ldr	r4, [pc, #32]	; (23fc284 <_Z21__fetch_global_EEPROMv+0x24>)
 23fc264:	e8d4 3f8f 	ldab	r3, [r4]
 23fc268:	07db      	lsls	r3, r3, #31
 23fc26a:	d408      	bmi.n	23fc27e <_Z21__fetch_global_EEPROMv+0x1e>
 23fc26c:	4620      	mov	r0, r4
 23fc26e:	f7fa fa3f 	bl	23f66f0 <__cxa_guard_acquire>
 23fc272:	b120      	cbz	r0, 23fc27e <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23fc274:	f7fd fc28 	bl	23f9ac8 <HAL_EEPROM_Init>
 23fc278:	4620      	mov	r0, r4
 23fc27a:	f7fa fa3e 	bl	23f66fa <__cxa_guard_release>
	return eeprom;
}
 23fc27e:	4802      	ldr	r0, [pc, #8]	; (23fc288 <_Z21__fetch_global_EEPROMv+0x28>)
 23fc280:	bd10      	pop	{r4, pc}
 23fc282:	bf00      	nop
 23fc284:	1007af18 	.word	0x1007af18
 23fc288:	1007af1c 	.word	0x1007af1c

023fc28c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fc28c:	4770      	bx	lr
	...

023fc290 <_Z17acquireWireBufferv>:
{
 23fc290:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fc292:	4b0b      	ldr	r3, [pc, #44]	; (23fc2c0 <_Z17acquireWireBufferv+0x30>)
{
 23fc294:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fc296:	6003      	str	r3, [r0, #0]
 23fc298:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc29a:	490a      	ldr	r1, [pc, #40]	; (23fc2c4 <_Z17acquireWireBufferv+0x34>)
	hal_i2c_config_t config = {
 23fc29c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc29e:	f44f 7000 	mov.w	r0, #512	; 0x200
 23fc2a2:	f000 f8c7 	bl	23fc434 <_ZnajRKSt9nothrow_t>
	};
 23fc2a6:	f44f 7500 	mov.w	r5, #512	; 0x200
 23fc2aa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc2ac:	4905      	ldr	r1, [pc, #20]	; (23fc2c4 <_Z17acquireWireBufferv+0x34>)
 23fc2ae:	4628      	mov	r0, r5
	};
 23fc2b0:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc2b2:	f000 f8bf 	bl	23fc434 <_ZnajRKSt9nothrow_t>
	};
 23fc2b6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fc2ba:	4620      	mov	r0, r4
 23fc2bc:	bd38      	pop	{r3, r4, r5, pc}
 23fc2be:	bf00      	nop
 23fc2c0:	00010018 	.word	0x00010018
 23fc2c4:	023ffc20 	.word	0x023ffc20

023fc2c8 <_Z19__fetch_global_Wirev>:
{
 23fc2c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fc2ca:	4d0e      	ldr	r5, [pc, #56]	; (23fc304 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fc2cc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fc2ce:	e8d5 1f8f 	ldab	r1, [r5]
 23fc2d2:	f011 0401 	ands.w	r4, r1, #1
 23fc2d6:	d111      	bne.n	23fc2fc <_Z19__fetch_global_Wirev+0x34>
 23fc2d8:	4628      	mov	r0, r5
 23fc2da:	f7fa fa09 	bl	23f66f0 <__cxa_guard_acquire>
 23fc2de:	b168      	cbz	r0, 23fc2fc <_Z19__fetch_global_Wirev+0x34>
 23fc2e0:	4668      	mov	r0, sp
 23fc2e2:	f7ff ffd5 	bl	23fc290 <_Z17acquireWireBufferv>
 23fc2e6:	466a      	mov	r2, sp
 23fc2e8:	4621      	mov	r1, r4
 23fc2ea:	4807      	ldr	r0, [pc, #28]	; (23fc308 <_Z19__fetch_global_Wirev+0x40>)
 23fc2ec:	f7fe f8c0 	bl	23fa470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fc2f0:	4628      	mov	r0, r5
 23fc2f2:	f7fa fa02 	bl	23f66fa <__cxa_guard_release>
 23fc2f6:	4805      	ldr	r0, [pc, #20]	; (23fc30c <_Z19__fetch_global_Wirev+0x44>)
 23fc2f8:	f000 f936 	bl	23fc568 <atexit>
	return wire;
}
 23fc2fc:	4802      	ldr	r0, [pc, #8]	; (23fc308 <_Z19__fetch_global_Wirev+0x40>)
 23fc2fe:	b007      	add	sp, #28
 23fc300:	bd30      	pop	{r4, r5, pc}
 23fc302:	bf00      	nop
 23fc304:	1007af20 	.word	0x1007af20
 23fc308:	1007af24 	.word	0x1007af24
 23fc30c:	023fc28d 	.word	0x023fc28d

023fc310 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fc310:	4770      	bx	lr

023fc312 <__tcf_1>:
 23fc312:	4770      	bx	lr

023fc314 <_Z20acquireSerial1Bufferv>:
{
 23fc314:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fc316:	2514      	movs	r5, #20
{
 23fc318:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fc31a:	462a      	mov	r2, r5
 23fc31c:	2100      	movs	r1, #0
 23fc31e:	f000 f96c 	bl	23fc5fa <memset>
 23fc322:	8025      	strh	r5, [r4, #0]
 23fc324:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc326:	4907      	ldr	r1, [pc, #28]	; (23fc344 <_Z20acquireSerial1Bufferv+0x30>)
 23fc328:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fc32a:	8125      	strh	r5, [r4, #8]
 23fc32c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc32e:	f000 f881 	bl	23fc434 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc332:	4904      	ldr	r1, [pc, #16]	; (23fc344 <_Z20acquireSerial1Bufferv+0x30>)
    };
 23fc334:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc336:	4628      	mov	r0, r5
 23fc338:	f000 f87c 	bl	23fc434 <_ZnajRKSt9nothrow_t>
    };
 23fc33c:	60e0      	str	r0, [r4, #12]
}
 23fc33e:	4620      	mov	r0, r4
 23fc340:	bd38      	pop	{r3, r4, r5, pc}
 23fc342:	bf00      	nop
 23fc344:	023ffc20 	.word	0x023ffc20

023fc348 <_Z20acquireSerial2Bufferv>:
 23fc348:	b538      	push	{r3, r4, r5, lr}
 23fc34a:	2514      	movs	r5, #20
 23fc34c:	4604      	mov	r4, r0
 23fc34e:	462a      	mov	r2, r5
 23fc350:	2100      	movs	r1, #0
 23fc352:	f000 f952 	bl	23fc5fa <memset>
 23fc356:	8025      	strh	r5, [r4, #0]
 23fc358:	2540      	movs	r5, #64	; 0x40
 23fc35a:	4907      	ldr	r1, [pc, #28]	; (23fc378 <_Z20acquireSerial2Bufferv+0x30>)
 23fc35c:	4628      	mov	r0, r5
 23fc35e:	8125      	strh	r5, [r4, #8]
 23fc360:	8225      	strh	r5, [r4, #16]
 23fc362:	f000 f867 	bl	23fc434 <_ZnajRKSt9nothrow_t>
 23fc366:	4904      	ldr	r1, [pc, #16]	; (23fc378 <_Z20acquireSerial2Bufferv+0x30>)
 23fc368:	6060      	str	r0, [r4, #4]
 23fc36a:	4628      	mov	r0, r5
 23fc36c:	f000 f862 	bl	23fc434 <_ZnajRKSt9nothrow_t>
 23fc370:	60e0      	str	r0, [r4, #12]
 23fc372:	4620      	mov	r0, r4
 23fc374:	bd38      	pop	{r3, r4, r5, pc}
 23fc376:	bf00      	nop
 23fc378:	023ffc20 	.word	0x023ffc20

023fc37c <_Z22__fetch_global_Serial1v>:
{
 23fc37c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fc37e:	4d0e      	ldr	r5, [pc, #56]	; (23fc3b8 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fc380:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fc382:	e8d5 1f8f 	ldab	r1, [r5]
 23fc386:	f011 0401 	ands.w	r4, r1, #1
 23fc38a:	d111      	bne.n	23fc3b0 <_Z22__fetch_global_Serial1v+0x34>
 23fc38c:	4628      	mov	r0, r5
 23fc38e:	f7fa f9af 	bl	23f66f0 <__cxa_guard_acquire>
 23fc392:	b168      	cbz	r0, 23fc3b0 <_Z22__fetch_global_Serial1v+0x34>
 23fc394:	a801      	add	r0, sp, #4
 23fc396:	f7ff ffbd 	bl	23fc314 <_Z20acquireSerial1Bufferv>
 23fc39a:	4621      	mov	r1, r4
 23fc39c:	aa01      	add	r2, sp, #4
 23fc39e:	4807      	ldr	r0, [pc, #28]	; (23fc3bc <_Z22__fetch_global_Serial1v+0x40>)
 23fc3a0:	f7ff fdd4 	bl	23fbf4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fc3a4:	4628      	mov	r0, r5
 23fc3a6:	f7fa f9a8 	bl	23f66fa <__cxa_guard_release>
 23fc3aa:	4805      	ldr	r0, [pc, #20]	; (23fc3c0 <_Z22__fetch_global_Serial1v+0x44>)
 23fc3ac:	f000 f8dc 	bl	23fc568 <atexit>
    return serial1;
}
 23fc3b0:	4802      	ldr	r0, [pc, #8]	; (23fc3bc <_Z22__fetch_global_Serial1v+0x40>)
 23fc3b2:	b007      	add	sp, #28
 23fc3b4:	bd30      	pop	{r4, r5, pc}
 23fc3b6:	bf00      	nop
 23fc3b8:	1007af38 	.word	0x1007af38
 23fc3bc:	1007af40 	.word	0x1007af40
 23fc3c0:	023fc311 	.word	0x023fc311

023fc3c4 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fc3c4:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fc3c6:	4c0d      	ldr	r4, [pc, #52]	; (23fc3fc <_Z22__fetch_global_Serial2v+0x38>)
{
 23fc3c8:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fc3ca:	e8d4 3f8f 	ldab	r3, [r4]
 23fc3ce:	07db      	lsls	r3, r3, #31
 23fc3d0:	d411      	bmi.n	23fc3f6 <_Z22__fetch_global_Serial2v+0x32>
 23fc3d2:	4620      	mov	r0, r4
 23fc3d4:	f7fa f98c 	bl	23f66f0 <__cxa_guard_acquire>
 23fc3d8:	b168      	cbz	r0, 23fc3f6 <_Z22__fetch_global_Serial2v+0x32>
 23fc3da:	a801      	add	r0, sp, #4
 23fc3dc:	f7ff ffb4 	bl	23fc348 <_Z20acquireSerial2Bufferv>
 23fc3e0:	2101      	movs	r1, #1
 23fc3e2:	aa01      	add	r2, sp, #4
 23fc3e4:	4806      	ldr	r0, [pc, #24]	; (23fc400 <_Z22__fetch_global_Serial2v+0x3c>)
 23fc3e6:	f7ff fdb1 	bl	23fbf4c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fc3ea:	4620      	mov	r0, r4
 23fc3ec:	f7fa f985 	bl	23f66fa <__cxa_guard_release>
 23fc3f0:	4804      	ldr	r0, [pc, #16]	; (23fc404 <_Z22__fetch_global_Serial2v+0x40>)
 23fc3f2:	f000 f8b9 	bl	23fc568 <atexit>
	return serial2;
}
 23fc3f6:	4802      	ldr	r0, [pc, #8]	; (23fc400 <_Z22__fetch_global_Serial2v+0x3c>)
 23fc3f8:	b006      	add	sp, #24
 23fc3fa:	bd10      	pop	{r4, pc}
 23fc3fc:	1007af3c 	.word	0x1007af3c
 23fc400:	1007af54 	.word	0x1007af54
 23fc404:	023fc313 	.word	0x023fc313

023fc408 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fc408:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fc40a:	f7ff ffdb 	bl	23fc3c4 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fc40e:	4b07      	ldr	r3, [pc, #28]	; (23fc42c <_Z15serialEventRun2v+0x24>)
 23fc410:	4604      	mov	r4, r0
 23fc412:	b153      	cbz	r3, 23fc42a <_Z15serialEventRun2v+0x22>
 23fc414:	f7ff fdb8 	bl	23fbf88 <_ZN11USARTSerial9isEnabledEv>
 23fc418:	b138      	cbz	r0, 23fc42a <_Z15serialEventRun2v+0x22>
 23fc41a:	6823      	ldr	r3, [r4, #0]
 23fc41c:	4620      	mov	r0, r4
 23fc41e:	691b      	ldr	r3, [r3, #16]
 23fc420:	4798      	blx	r3
 23fc422:	2800      	cmp	r0, #0
 23fc424:	dd01      	ble.n	23fc42a <_Z15serialEventRun2v+0x22>
        handler();
 23fc426:	e000      	b.n	23fc42a <_Z15serialEventRun2v+0x22>
 23fc428:	bf00      	nop
}
 23fc42a:	bd10      	pop	{r4, pc}
 23fc42c:	00000000 	.word	0x00000000

023fc430 <_ZnwjRKSt9nothrow_t>:
 23fc430:	f7fa b947 	b.w	23f66c2 <_Znwj>

023fc434 <_ZnajRKSt9nothrow_t>:
 23fc434:	f7fa b947 	b.w	23f66c6 <_Znaj>

023fc438 <_ZSt25__throw_bad_function_callv>:
 23fc438:	b508      	push	{r3, lr}
 23fc43a:	f7fd fec5 	bl	23fa1c8 <abort>
	...

023fc440 <frexp>:
 23fc440:	b538      	push	{r3, r4, r5, lr}
 23fc442:	ec53 2b10 	vmov	r2, r3, d0
 23fc446:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23fc44a:	4d15      	ldr	r5, [pc, #84]	; (23fc4a0 <frexp+0x60>)
 23fc44c:	4604      	mov	r4, r0
 23fc44e:	2000      	movs	r0, #0
 23fc450:	42a9      	cmp	r1, r5
 23fc452:	6020      	str	r0, [r4, #0]
 23fc454:	dc20      	bgt.n	23fc498 <frexp+0x58>
 23fc456:	ee10 5a10 	vmov	r5, s0
 23fc45a:	430d      	orrs	r5, r1
 23fc45c:	d01c      	beq.n	23fc498 <frexp+0x58>
 23fc45e:	4d11      	ldr	r5, [pc, #68]	; (23fc4a4 <frexp+0x64>)
 23fc460:	469c      	mov	ip, r3
 23fc462:	401d      	ands	r5, r3
 23fc464:	b965      	cbnz	r5, 23fc480 <frexp+0x40>
 23fc466:	4619      	mov	r1, r3
 23fc468:	2200      	movs	r2, #0
 23fc46a:	ee10 0a10 	vmov	r0, s0
 23fc46e:	4b0e      	ldr	r3, [pc, #56]	; (23fc4a8 <frexp+0x68>)
 23fc470:	f7f9 fbb2 	bl	23f5bd8 <__aeabi_dmul>
 23fc474:	4602      	mov	r2, r0
 23fc476:	468c      	mov	ip, r1
 23fc478:	f06f 0035 	mvn.w	r0, #53	; 0x35
 23fc47c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc480:	1509      	asrs	r1, r1, #20
 23fc482:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 23fc486:	4401      	add	r1, r0
 23fc488:	6021      	str	r1, [r4, #0]
 23fc48a:	4908      	ldr	r1, [pc, #32]	; (23fc4ac <frexp+0x6c>)
 23fc48c:	ea0c 0101 	and.w	r1, ip, r1
 23fc490:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 23fc494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23fc498:	ec43 2b10 	vmov	d0, r2, r3
 23fc49c:	bd38      	pop	{r3, r4, r5, pc}
 23fc49e:	bf00      	nop
 23fc4a0:	7fefffff 	.word	0x7fefffff
 23fc4a4:	7ff00000 	.word	0x7ff00000
 23fc4a8:	43500000 	.word	0x43500000
 23fc4ac:	800fffff 	.word	0x800fffff

023fc4b0 <round>:
 23fc4b0:	b538      	push	{r3, r4, r5, lr}
 23fc4b2:	ec53 2b10 	vmov	r2, r3, d0
 23fc4b6:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23fc4ba:	461c      	mov	r4, r3
 23fc4bc:	ee10 0a10 	vmov	r0, s0
 23fc4c0:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23fc4c4:	2913      	cmp	r1, #19
 23fc4c6:	dc1c      	bgt.n	23fc502 <round+0x52>
 23fc4c8:	2900      	cmp	r1, #0
 23fc4ca:	db13      	blt.n	23fc4f4 <round+0x44>
 23fc4cc:	4d20      	ldr	r5, [pc, #128]	; (23fc550 <round+0xa0>)
 23fc4ce:	fa45 fc01 	asr.w	ip, r5, r1
 23fc4d2:	ea03 050c 	and.w	r5, r3, ip
 23fc4d6:	4328      	orrs	r0, r5
 23fc4d8:	d018      	beq.n	23fc50c <round+0x5c>
 23fc4da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 23fc4de:	2000      	movs	r0, #0
 23fc4e0:	fa43 f101 	asr.w	r1, r3, r1
 23fc4e4:	440c      	add	r4, r1
 23fc4e6:	ea24 040c 	bic.w	r4, r4, ip
 23fc4ea:	4623      	mov	r3, r4
 23fc4ec:	4602      	mov	r2, r0
 23fc4ee:	ec43 2b10 	vmov	d0, r2, r3
 23fc4f2:	bd38      	pop	{r3, r4, r5, pc}
 23fc4f4:	3101      	adds	r1, #1
 23fc4f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 23fc4fa:	d024      	beq.n	23fc546 <round+0x96>
 23fc4fc:	461c      	mov	r4, r3
 23fc4fe:	2000      	movs	r0, #0
 23fc500:	e7f3      	b.n	23fc4ea <round+0x3a>
 23fc502:	2933      	cmp	r1, #51	; 0x33
 23fc504:	dd05      	ble.n	23fc512 <round+0x62>
 23fc506:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23fc50a:	d016      	beq.n	23fc53a <round+0x8a>
 23fc50c:	ec43 2b10 	vmov	d0, r2, r3
 23fc510:	bd38      	pop	{r3, r4, r5, pc}
 23fc512:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23fc516:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fc51a:	fa25 fc0c 	lsr.w	ip, r5, ip
 23fc51e:	ea12 0f0c 	tst.w	r2, ip
 23fc522:	d0f3      	beq.n	23fc50c <round+0x5c>
 23fc524:	2301      	movs	r3, #1
 23fc526:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 23fc52a:	fa03 f101 	lsl.w	r1, r3, r1
 23fc52e:	1840      	adds	r0, r0, r1
 23fc530:	bf28      	it	cs
 23fc532:	18e4      	addcs	r4, r4, r3
 23fc534:	ea20 000c 	bic.w	r0, r0, ip
 23fc538:	e7d7      	b.n	23fc4ea <round+0x3a>
 23fc53a:	4619      	mov	r1, r3
 23fc53c:	f7f9 f996 	bl	23f586c <__adddf3>
 23fc540:	ec41 0b10 	vmov	d0, r0, r1
 23fc544:	bd38      	pop	{r3, r4, r5, pc}
 23fc546:	4c03      	ldr	r4, [pc, #12]	; (23fc554 <round+0xa4>)
 23fc548:	2000      	movs	r0, #0
 23fc54a:	431c      	orrs	r4, r3
 23fc54c:	e7cd      	b.n	23fc4ea <round+0x3a>
 23fc54e:	bf00      	nop
 23fc550:	000fffff 	.word	0x000fffff
 23fc554:	3ff00000 	.word	0x3ff00000

023fc558 <nan>:
 23fc558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23fc560 <nan+0x8>
 23fc55c:	4770      	bx	lr
 23fc55e:	bf00      	nop
 23fc560:	00000000 	.word	0x00000000
 23fc564:	7ff80000 	.word	0x7ff80000

023fc568 <atexit>:
 23fc568:	2300      	movs	r3, #0
 23fc56a:	4601      	mov	r1, r0
 23fc56c:	461a      	mov	r2, r3
 23fc56e:	4618      	mov	r0, r3
 23fc570:	f000 bf88 	b.w	23fd484 <__register_exitproc>

023fc574 <atof>:
 23fc574:	2100      	movs	r1, #0
 23fc576:	f000 beed 	b.w	23fd354 <strtod>
	...

023fc57c <calloc>:
 23fc57c:	4b02      	ldr	r3, [pc, #8]	; (23fc588 <calloc+0xc>)
 23fc57e:	460a      	mov	r2, r1
 23fc580:	4601      	mov	r1, r0
 23fc582:	6818      	ldr	r0, [r3, #0]
 23fc584:	f000 b841 	b.w	23fc60a <_calloc_r>
 23fc588:	1007a498 	.word	0x1007a498

023fc58c <isprint>:
 23fc58c:	4b02      	ldr	r3, [pc, #8]	; (23fc598 <isprint+0xc>)
 23fc58e:	4418      	add	r0, r3
 23fc590:	7840      	ldrb	r0, [r0, #1]
 23fc592:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fc596:	4770      	bx	lr
 23fc598:	023ffce8 	.word	0x023ffce8

023fc59c <isspace>:
 23fc59c:	4b02      	ldr	r3, [pc, #8]	; (23fc5a8 <isspace+0xc>)
 23fc59e:	4418      	add	r0, r3
 23fc5a0:	7840      	ldrb	r0, [r0, #1]
 23fc5a2:	f000 0008 	and.w	r0, r0, #8
 23fc5a6:	4770      	bx	lr
 23fc5a8:	023ffce8 	.word	0x023ffce8

023fc5ac <memcpy>:
 23fc5ac:	440a      	add	r2, r1
 23fc5ae:	1e43      	subs	r3, r0, #1
 23fc5b0:	4291      	cmp	r1, r2
 23fc5b2:	d100      	bne.n	23fc5b6 <memcpy+0xa>
 23fc5b4:	4770      	bx	lr
 23fc5b6:	b510      	push	{r4, lr}
 23fc5b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fc5bc:	4291      	cmp	r1, r2
 23fc5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fc5c2:	d1f9      	bne.n	23fc5b8 <memcpy+0xc>
 23fc5c4:	bd10      	pop	{r4, pc}

023fc5c6 <memmove>:
 23fc5c6:	4288      	cmp	r0, r1
 23fc5c8:	b510      	push	{r4, lr}
 23fc5ca:	eb01 0402 	add.w	r4, r1, r2
 23fc5ce:	d902      	bls.n	23fc5d6 <memmove+0x10>
 23fc5d0:	4284      	cmp	r4, r0
 23fc5d2:	4623      	mov	r3, r4
 23fc5d4:	d807      	bhi.n	23fc5e6 <memmove+0x20>
 23fc5d6:	1e43      	subs	r3, r0, #1
 23fc5d8:	42a1      	cmp	r1, r4
 23fc5da:	d008      	beq.n	23fc5ee <memmove+0x28>
 23fc5dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fc5e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fc5e4:	e7f8      	b.n	23fc5d8 <memmove+0x12>
 23fc5e6:	4402      	add	r2, r0
 23fc5e8:	4601      	mov	r1, r0
 23fc5ea:	428a      	cmp	r2, r1
 23fc5ec:	d100      	bne.n	23fc5f0 <memmove+0x2a>
 23fc5ee:	bd10      	pop	{r4, pc}
 23fc5f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fc5f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fc5f8:	e7f7      	b.n	23fc5ea <memmove+0x24>

023fc5fa <memset>:
 23fc5fa:	4402      	add	r2, r0
 23fc5fc:	4603      	mov	r3, r0
 23fc5fe:	4293      	cmp	r3, r2
 23fc600:	d100      	bne.n	23fc604 <memset+0xa>
 23fc602:	4770      	bx	lr
 23fc604:	f803 1b01 	strb.w	r1, [r3], #1
 23fc608:	e7f9      	b.n	23fc5fe <memset+0x4>

023fc60a <_calloc_r>:
 23fc60a:	434a      	muls	r2, r1
 23fc60c:	b513      	push	{r0, r1, r4, lr}
 23fc60e:	4611      	mov	r1, r2
 23fc610:	9201      	str	r2, [sp, #4]
 23fc612:	f7fd fde7 	bl	23fa1e4 <_malloc_r>
 23fc616:	4604      	mov	r4, r0
 23fc618:	b118      	cbz	r0, 23fc622 <_calloc_r+0x18>
 23fc61a:	9a01      	ldr	r2, [sp, #4]
 23fc61c:	2100      	movs	r1, #0
 23fc61e:	f7ff ffec 	bl	23fc5fa <memset>
 23fc622:	4620      	mov	r0, r4
 23fc624:	b002      	add	sp, #8
 23fc626:	bd10      	pop	{r4, pc}

023fc628 <srand>:
 23fc628:	b538      	push	{r3, r4, r5, lr}
 23fc62a:	4b10      	ldr	r3, [pc, #64]	; (23fc66c <srand+0x44>)
 23fc62c:	4604      	mov	r4, r0
 23fc62e:	681d      	ldr	r5, [r3, #0]
 23fc630:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc632:	b9b3      	cbnz	r3, 23fc662 <srand+0x3a>
 23fc634:	2018      	movs	r0, #24
 23fc636:	f7fd fd81 	bl	23fa13c <malloc>
 23fc63a:	4602      	mov	r2, r0
 23fc63c:	63a8      	str	r0, [r5, #56]	; 0x38
 23fc63e:	b920      	cbnz	r0, 23fc64a <srand+0x22>
 23fc640:	4b0b      	ldr	r3, [pc, #44]	; (23fc670 <srand+0x48>)
 23fc642:	2142      	movs	r1, #66	; 0x42
 23fc644:	480b      	ldr	r0, [pc, #44]	; (23fc674 <srand+0x4c>)
 23fc646:	f7fd fde9 	bl	23fa21c <__assert_func>
 23fc64a:	490b      	ldr	r1, [pc, #44]	; (23fc678 <srand+0x50>)
 23fc64c:	4b0b      	ldr	r3, [pc, #44]	; (23fc67c <srand+0x54>)
 23fc64e:	e9c0 1300 	strd	r1, r3, [r0]
 23fc652:	4b0b      	ldr	r3, [pc, #44]	; (23fc680 <srand+0x58>)
 23fc654:	2100      	movs	r1, #0
 23fc656:	6083      	str	r3, [r0, #8]
 23fc658:	230b      	movs	r3, #11
 23fc65a:	8183      	strh	r3, [r0, #12]
 23fc65c:	2001      	movs	r0, #1
 23fc65e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fc662:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc664:	2200      	movs	r2, #0
 23fc666:	611c      	str	r4, [r3, #16]
 23fc668:	615a      	str	r2, [r3, #20]
 23fc66a:	bd38      	pop	{r3, r4, r5, pc}
 23fc66c:	1007a498 	.word	0x1007a498
 23fc670:	023ffc21 	.word	0x023ffc21
 23fc674:	023ffc38 	.word	0x023ffc38
 23fc678:	abcd330e 	.word	0xabcd330e
 23fc67c:	e66d1234 	.word	0xe66d1234
 23fc680:	0005deec 	.word	0x0005deec

023fc684 <strchr>:
 23fc684:	b2c9      	uxtb	r1, r1
 23fc686:	4603      	mov	r3, r0
 23fc688:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fc68c:	b11a      	cbz	r2, 23fc696 <strchr+0x12>
 23fc68e:	428a      	cmp	r2, r1
 23fc690:	d1f9      	bne.n	23fc686 <strchr+0x2>
 23fc692:	4618      	mov	r0, r3
 23fc694:	4770      	bx	lr
 23fc696:	2900      	cmp	r1, #0
 23fc698:	bf18      	it	ne
 23fc69a:	2300      	movne	r3, #0
 23fc69c:	e7f9      	b.n	23fc692 <strchr+0xe>

023fc69e <strchrnul>:
 23fc69e:	b510      	push	{r4, lr}
 23fc6a0:	4604      	mov	r4, r0
 23fc6a2:	f7ff ffef 	bl	23fc684 <strchr>
 23fc6a6:	b918      	cbnz	r0, 23fc6b0 <strchrnul+0x12>
 23fc6a8:	4620      	mov	r0, r4
 23fc6aa:	f7f9 ffe5 	bl	23f6678 <strlen>
 23fc6ae:	4420      	add	r0, r4
 23fc6b0:	bd10      	pop	{r4, pc}

023fc6b2 <strcpy>:
 23fc6b2:	4603      	mov	r3, r0
 23fc6b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fc6b8:	f803 2b01 	strb.w	r2, [r3], #1
 23fc6bc:	2a00      	cmp	r2, #0
 23fc6be:	d1f9      	bne.n	23fc6b4 <strcpy+0x2>
 23fc6c0:	4770      	bx	lr

023fc6c2 <strncmp>:
 23fc6c2:	b510      	push	{r4, lr}
 23fc6c4:	b17a      	cbz	r2, 23fc6e6 <strncmp+0x24>
 23fc6c6:	4603      	mov	r3, r0
 23fc6c8:	3901      	subs	r1, #1
 23fc6ca:	1884      	adds	r4, r0, r2
 23fc6cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fc6d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fc6d4:	4290      	cmp	r0, r2
 23fc6d6:	d101      	bne.n	23fc6dc <strncmp+0x1a>
 23fc6d8:	42a3      	cmp	r3, r4
 23fc6da:	d101      	bne.n	23fc6e0 <strncmp+0x1e>
 23fc6dc:	1a80      	subs	r0, r0, r2
 23fc6de:	bd10      	pop	{r4, pc}
 23fc6e0:	2800      	cmp	r0, #0
 23fc6e2:	d1f3      	bne.n	23fc6cc <strncmp+0xa>
 23fc6e4:	e7fa      	b.n	23fc6dc <strncmp+0x1a>
 23fc6e6:	4610      	mov	r0, r2
 23fc6e8:	e7f9      	b.n	23fc6de <strncmp+0x1c>

023fc6ea <strrchr>:
 23fc6ea:	b538      	push	{r3, r4, r5, lr}
 23fc6ec:	4603      	mov	r3, r0
 23fc6ee:	460c      	mov	r4, r1
 23fc6f0:	b969      	cbnz	r1, 23fc70e <strrchr+0x24>
 23fc6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fc6f6:	f7ff bfc5 	b.w	23fc684 <strchr>
 23fc6fa:	1c43      	adds	r3, r0, #1
 23fc6fc:	4605      	mov	r5, r0
 23fc6fe:	4621      	mov	r1, r4
 23fc700:	4618      	mov	r0, r3
 23fc702:	f7ff ffbf 	bl	23fc684 <strchr>
 23fc706:	2800      	cmp	r0, #0
 23fc708:	d1f7      	bne.n	23fc6fa <strrchr+0x10>
 23fc70a:	4628      	mov	r0, r5
 23fc70c:	bd38      	pop	{r3, r4, r5, pc}
 23fc70e:	2500      	movs	r5, #0
 23fc710:	e7f5      	b.n	23fc6fe <strrchr+0x14>

023fc712 <sulp>:
 23fc712:	b570      	push	{r4, r5, r6, lr}
 23fc714:	4604      	mov	r4, r0
 23fc716:	460d      	mov	r5, r1
 23fc718:	4616      	mov	r6, r2
 23fc71a:	ec45 4b10 	vmov	d0, r4, r5
 23fc71e:	f001 fe11 	bl	23fe344 <__ulp>
 23fc722:	ec51 0b10 	vmov	r0, r1, d0
 23fc726:	b17e      	cbz	r6, 23fc748 <sulp+0x36>
 23fc728:	f3c5 530a 	ubfx	r3, r5, #20, #11
 23fc72c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fc730:	2b00      	cmp	r3, #0
 23fc732:	dd09      	ble.n	23fc748 <sulp+0x36>
 23fc734:	051b      	lsls	r3, r3, #20
 23fc736:	2400      	movs	r4, #0
 23fc738:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 23fc73c:	4622      	mov	r2, r4
 23fc73e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 23fc742:	462b      	mov	r3, r5
 23fc744:	f7f9 fa48 	bl	23f5bd8 <__aeabi_dmul>
 23fc748:	bd70      	pop	{r4, r5, r6, pc}
 23fc74a:	0000      	movs	r0, r0
 23fc74c:	0000      	movs	r0, r0
	...

023fc750 <_strtod_l>:
 23fc750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc754:	461f      	mov	r7, r3
 23fc756:	2300      	movs	r3, #0
 23fc758:	4604      	mov	r4, r0
 23fc75a:	4688      	mov	r8, r1
 23fc75c:	f04f 0a00 	mov.w	sl, #0
 23fc760:	f04f 0b00 	mov.w	fp, #0
 23fc764:	ed2d 8b02 	vpush	{d8}
 23fc768:	b09d      	sub	sp, #116	; 0x74
 23fc76a:	9318      	str	r3, [sp, #96]	; 0x60
 23fc76c:	4b9f      	ldr	r3, [pc, #636]	; (23fc9ec <_strtod_l+0x29c>)
 23fc76e:	9213      	str	r2, [sp, #76]	; 0x4c
 23fc770:	681b      	ldr	r3, [r3, #0]
 23fc772:	4618      	mov	r0, r3
 23fc774:	9305      	str	r3, [sp, #20]
 23fc776:	f7f9 ff7f 	bl	23f6678 <strlen>
 23fc77a:	4605      	mov	r5, r0
 23fc77c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fc780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fc782:	781a      	ldrb	r2, [r3, #0]
 23fc784:	2a2b      	cmp	r2, #43	; 0x2b
 23fc786:	d04e      	beq.n	23fc826 <_strtod_l+0xd6>
 23fc788:	d83b      	bhi.n	23fc802 <_strtod_l+0xb2>
 23fc78a:	2a0d      	cmp	r2, #13
 23fc78c:	d834      	bhi.n	23fc7f8 <_strtod_l+0xa8>
 23fc78e:	2a08      	cmp	r2, #8
 23fc790:	d834      	bhi.n	23fc7fc <_strtod_l+0xac>
 23fc792:	2a00      	cmp	r2, #0
 23fc794:	d03e      	beq.n	23fc814 <_strtod_l+0xc4>
 23fc796:	2300      	movs	r3, #0
 23fc798:	930a      	str	r3, [sp, #40]	; 0x28
 23fc79a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 23fc79c:	7833      	ldrb	r3, [r6, #0]
 23fc79e:	2b30      	cmp	r3, #48	; 0x30
 23fc7a0:	f040 80b0 	bne.w	23fc904 <_strtod_l+0x1b4>
 23fc7a4:	7873      	ldrb	r3, [r6, #1]
 23fc7a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fc7aa:	2b58      	cmp	r3, #88	; 0x58
 23fc7ac:	d168      	bne.n	23fc880 <_strtod_l+0x130>
 23fc7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fc7b0:	a917      	add	r1, sp, #92	; 0x5c
 23fc7b2:	9702      	str	r7, [sp, #8]
 23fc7b4:	4620      	mov	r0, r4
 23fc7b6:	9301      	str	r3, [sp, #4]
 23fc7b8:	ab18      	add	r3, sp, #96	; 0x60
 23fc7ba:	4a8d      	ldr	r2, [pc, #564]	; (23fc9f0 <_strtod_l+0x2a0>)
 23fc7bc:	9300      	str	r3, [sp, #0]
 23fc7be:	ab19      	add	r3, sp, #100	; 0x64
 23fc7c0:	f000 ff2a 	bl	23fd618 <__gethex>
 23fc7c4:	f010 0707 	ands.w	r7, r0, #7
 23fc7c8:	4605      	mov	r5, r0
 23fc7ca:	d005      	beq.n	23fc7d8 <_strtod_l+0x88>
 23fc7cc:	2f06      	cmp	r7, #6
 23fc7ce:	d12c      	bne.n	23fc82a <_strtod_l+0xda>
 23fc7d0:	3601      	adds	r6, #1
 23fc7d2:	2300      	movs	r3, #0
 23fc7d4:	9617      	str	r6, [sp, #92]	; 0x5c
 23fc7d6:	930a      	str	r3, [sp, #40]	; 0x28
 23fc7d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fc7da:	2b00      	cmp	r3, #0
 23fc7dc:	f040 858e 	bne.w	23fd2fc <_strtod_l+0xbac>
 23fc7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fc7e2:	b1eb      	cbz	r3, 23fc820 <_strtod_l+0xd0>
 23fc7e4:	4652      	mov	r2, sl
 23fc7e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 23fc7ea:	ec43 2b10 	vmov	d0, r2, r3
 23fc7ee:	b01d      	add	sp, #116	; 0x74
 23fc7f0:	ecbd 8b02 	vpop	{d8}
 23fc7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc7f8:	2a20      	cmp	r2, #32
 23fc7fa:	d1cc      	bne.n	23fc796 <_strtod_l+0x46>
 23fc7fc:	3301      	adds	r3, #1
 23fc7fe:	9317      	str	r3, [sp, #92]	; 0x5c
 23fc800:	e7be      	b.n	23fc780 <_strtod_l+0x30>
 23fc802:	2a2d      	cmp	r2, #45	; 0x2d
 23fc804:	d1c7      	bne.n	23fc796 <_strtod_l+0x46>
 23fc806:	2201      	movs	r2, #1
 23fc808:	920a      	str	r2, [sp, #40]	; 0x28
 23fc80a:	1c5a      	adds	r2, r3, #1
 23fc80c:	9217      	str	r2, [sp, #92]	; 0x5c
 23fc80e:	785b      	ldrb	r3, [r3, #1]
 23fc810:	2b00      	cmp	r3, #0
 23fc812:	d1c2      	bne.n	23fc79a <_strtod_l+0x4a>
 23fc814:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23fc816:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fc81a:	2b00      	cmp	r3, #0
 23fc81c:	f040 856c 	bne.w	23fd2f8 <_strtod_l+0xba8>
 23fc820:	4652      	mov	r2, sl
 23fc822:	465b      	mov	r3, fp
 23fc824:	e7e1      	b.n	23fc7ea <_strtod_l+0x9a>
 23fc826:	2200      	movs	r2, #0
 23fc828:	e7ee      	b.n	23fc808 <_strtod_l+0xb8>
 23fc82a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fc82c:	b13a      	cbz	r2, 23fc83e <_strtod_l+0xee>
 23fc82e:	2135      	movs	r1, #53	; 0x35
 23fc830:	a81a      	add	r0, sp, #104	; 0x68
 23fc832:	f001 fe90 	bl	23fe556 <__copybits>
 23fc836:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fc838:	4620      	mov	r0, r4
 23fc83a:	f001 fa4b 	bl	23fdcd4 <_Bfree>
 23fc83e:	3f01      	subs	r7, #1
 23fc840:	2f04      	cmp	r7, #4
 23fc842:	d806      	bhi.n	23fc852 <_strtod_l+0x102>
 23fc844:	e8df f007 	tbb	[pc, r7]
 23fc848:	1714030a 	.word	0x1714030a
 23fc84c:	0a          	.byte	0x0a
 23fc84d:	00          	.byte	0x00
 23fc84e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 23fc852:	0728      	lsls	r0, r5, #28
 23fc854:	d5c0      	bpl.n	23fc7d8 <_strtod_l+0x88>
 23fc856:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 23fc85a:	e7bd      	b.n	23fc7d8 <_strtod_l+0x88>
 23fc85c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 23fc860:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23fc862:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 23fc866:	f202 4233 	addw	r2, r2, #1075	; 0x433
 23fc86a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 23fc86e:	e7f0      	b.n	23fc852 <_strtod_l+0x102>
 23fc870:	f8df b180 	ldr.w	fp, [pc, #384]	; 23fc9f4 <_strtod_l+0x2a4>
 23fc874:	e7ed      	b.n	23fc852 <_strtod_l+0x102>
 23fc876:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 23fc87a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fc87e:	e7e8      	b.n	23fc852 <_strtod_l+0x102>
 23fc880:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fc882:	1c5a      	adds	r2, r3, #1
 23fc884:	9217      	str	r2, [sp, #92]	; 0x5c
 23fc886:	785b      	ldrb	r3, [r3, #1]
 23fc888:	2b30      	cmp	r3, #48	; 0x30
 23fc88a:	d0f9      	beq.n	23fc880 <_strtod_l+0x130>
 23fc88c:	2b00      	cmp	r3, #0
 23fc88e:	d0a3      	beq.n	23fc7d8 <_strtod_l+0x88>
 23fc890:	2301      	movs	r3, #1
 23fc892:	f04f 0900 	mov.w	r9, #0
 23fc896:	9304      	str	r3, [sp, #16]
 23fc898:	220a      	movs	r2, #10
 23fc89a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fc89c:	464f      	mov	r7, r9
 23fc89e:	f8cd 901c 	str.w	r9, [sp, #28]
 23fc8a2:	9308      	str	r3, [sp, #32]
 23fc8a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 23fc8a6:	7806      	ldrb	r6, [r0, #0]
 23fc8a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 23fc8ac:	b2d9      	uxtb	r1, r3
 23fc8ae:	2909      	cmp	r1, #9
 23fc8b0:	d92a      	bls.n	23fc908 <_strtod_l+0x1b8>
 23fc8b2:	462a      	mov	r2, r5
 23fc8b4:	9905      	ldr	r1, [sp, #20]
 23fc8b6:	f7ff ff04 	bl	23fc6c2 <strncmp>
 23fc8ba:	b3a0      	cbz	r0, 23fc926 <_strtod_l+0x1d6>
 23fc8bc:	2000      	movs	r0, #0
 23fc8be:	4632      	mov	r2, r6
 23fc8c0:	463d      	mov	r5, r7
 23fc8c2:	4603      	mov	r3, r0
 23fc8c4:	9005      	str	r0, [sp, #20]
 23fc8c6:	2a65      	cmp	r2, #101	; 0x65
 23fc8c8:	d001      	beq.n	23fc8ce <_strtod_l+0x17e>
 23fc8ca:	2a45      	cmp	r2, #69	; 0x45
 23fc8cc:	d118      	bne.n	23fc900 <_strtod_l+0x1b0>
 23fc8ce:	b91d      	cbnz	r5, 23fc8d8 <_strtod_l+0x188>
 23fc8d0:	9a04      	ldr	r2, [sp, #16]
 23fc8d2:	4302      	orrs	r2, r0
 23fc8d4:	d09e      	beq.n	23fc814 <_strtod_l+0xc4>
 23fc8d6:	2500      	movs	r5, #0
 23fc8d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 23fc8dc:	f108 0201 	add.w	r2, r8, #1
 23fc8e0:	9217      	str	r2, [sp, #92]	; 0x5c
 23fc8e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 23fc8e6:	2a2b      	cmp	r2, #43	; 0x2b
 23fc8e8:	d075      	beq.n	23fc9d6 <_strtod_l+0x286>
 23fc8ea:	2a2d      	cmp	r2, #45	; 0x2d
 23fc8ec:	d07b      	beq.n	23fc9e6 <_strtod_l+0x296>
 23fc8ee:	f04f 0c00 	mov.w	ip, #0
 23fc8f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 23fc8f6:	2909      	cmp	r1, #9
 23fc8f8:	f240 8082 	bls.w	23fca00 <_strtod_l+0x2b0>
 23fc8fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23fc900:	2600      	movs	r6, #0
 23fc902:	e09d      	b.n	23fca40 <_strtod_l+0x2f0>
 23fc904:	2300      	movs	r3, #0
 23fc906:	e7c4      	b.n	23fc892 <_strtod_l+0x142>
 23fc908:	2f08      	cmp	r7, #8
 23fc90a:	f100 0001 	add.w	r0, r0, #1
 23fc90e:	f107 0701 	add.w	r7, r7, #1
 23fc912:	bfd4      	ite	le
 23fc914:	9907      	ldrle	r1, [sp, #28]
 23fc916:	fb02 3909 	mlagt	r9, r2, r9, r3
 23fc91a:	9017      	str	r0, [sp, #92]	; 0x5c
 23fc91c:	bfdc      	itt	le
 23fc91e:	fb02 3301 	mlale	r3, r2, r1, r3
 23fc922:	9307      	strle	r3, [sp, #28]
 23fc924:	e7be      	b.n	23fc8a4 <_strtod_l+0x154>
 23fc926:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fc928:	195a      	adds	r2, r3, r5
 23fc92a:	9217      	str	r2, [sp, #92]	; 0x5c
 23fc92c:	5d5a      	ldrb	r2, [r3, r5]
 23fc92e:	2f00      	cmp	r7, #0
 23fc930:	d036      	beq.n	23fc9a0 <_strtod_l+0x250>
 23fc932:	463d      	mov	r5, r7
 23fc934:	9005      	str	r0, [sp, #20]
 23fc936:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 23fc93a:	2b09      	cmp	r3, #9
 23fc93c:	d912      	bls.n	23fc964 <_strtod_l+0x214>
 23fc93e:	2301      	movs	r3, #1
 23fc940:	e7c1      	b.n	23fc8c6 <_strtod_l+0x176>
 23fc942:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fc944:	3001      	adds	r0, #1
 23fc946:	1c5a      	adds	r2, r3, #1
 23fc948:	9217      	str	r2, [sp, #92]	; 0x5c
 23fc94a:	785a      	ldrb	r2, [r3, #1]
 23fc94c:	2a30      	cmp	r2, #48	; 0x30
 23fc94e:	d0f8      	beq.n	23fc942 <_strtod_l+0x1f2>
 23fc950:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 23fc954:	2b08      	cmp	r3, #8
 23fc956:	f200 84d6 	bhi.w	23fd306 <_strtod_l+0xbb6>
 23fc95a:	9005      	str	r0, [sp, #20]
 23fc95c:	2000      	movs	r0, #0
 23fc95e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fc960:	4605      	mov	r5, r0
 23fc962:	9308      	str	r3, [sp, #32]
 23fc964:	3a30      	subs	r2, #48	; 0x30
 23fc966:	f100 0301 	add.w	r3, r0, #1
 23fc96a:	d013      	beq.n	23fc994 <_strtod_l+0x244>
 23fc96c:	9905      	ldr	r1, [sp, #20]
 23fc96e:	eb00 0e05 	add.w	lr, r0, r5
 23fc972:	4419      	add	r1, r3
 23fc974:	462b      	mov	r3, r5
 23fc976:	9105      	str	r1, [sp, #20]
 23fc978:	210a      	movs	r1, #10
 23fc97a:	4573      	cmp	r3, lr
 23fc97c:	d112      	bne.n	23fc9a4 <_strtod_l+0x254>
 23fc97e:	182b      	adds	r3, r5, r0
 23fc980:	3501      	adds	r5, #1
 23fc982:	2b08      	cmp	r3, #8
 23fc984:	4405      	add	r5, r0
 23fc986:	dc1c      	bgt.n	23fc9c2 <_strtod_l+0x272>
 23fc988:	9907      	ldr	r1, [sp, #28]
 23fc98a:	230a      	movs	r3, #10
 23fc98c:	fb03 2301 	mla	r3, r3, r1, r2
 23fc990:	9307      	str	r3, [sp, #28]
 23fc992:	2300      	movs	r3, #0
 23fc994:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fc996:	4618      	mov	r0, r3
 23fc998:	1c51      	adds	r1, r2, #1
 23fc99a:	9117      	str	r1, [sp, #92]	; 0x5c
 23fc99c:	7852      	ldrb	r2, [r2, #1]
 23fc99e:	e7ca      	b.n	23fc936 <_strtod_l+0x1e6>
 23fc9a0:	4638      	mov	r0, r7
 23fc9a2:	e7d3      	b.n	23fc94c <_strtod_l+0x1fc>
 23fc9a4:	2b08      	cmp	r3, #8
 23fc9a6:	dc04      	bgt.n	23fc9b2 <_strtod_l+0x262>
 23fc9a8:	9e07      	ldr	r6, [sp, #28]
 23fc9aa:	434e      	muls	r6, r1
 23fc9ac:	9607      	str	r6, [sp, #28]
 23fc9ae:	3301      	adds	r3, #1
 23fc9b0:	e7e3      	b.n	23fc97a <_strtod_l+0x22a>
 23fc9b2:	f103 0c01 	add.w	ip, r3, #1
 23fc9b6:	f1bc 0f10 	cmp.w	ip, #16
 23fc9ba:	bfd8      	it	le
 23fc9bc:	fb01 f909 	mulle.w	r9, r1, r9
 23fc9c0:	e7f5      	b.n	23fc9ae <_strtod_l+0x25e>
 23fc9c2:	2d10      	cmp	r5, #16
 23fc9c4:	bfdc      	itt	le
 23fc9c6:	230a      	movle	r3, #10
 23fc9c8:	fb03 2909 	mlale	r9, r3, r9, r2
 23fc9cc:	e7e1      	b.n	23fc992 <_strtod_l+0x242>
 23fc9ce:	2300      	movs	r3, #0
 23fc9d0:	9305      	str	r3, [sp, #20]
 23fc9d2:	2301      	movs	r3, #1
 23fc9d4:	e77c      	b.n	23fc8d0 <_strtod_l+0x180>
 23fc9d6:	f04f 0c00 	mov.w	ip, #0
 23fc9da:	f108 0202 	add.w	r2, r8, #2
 23fc9de:	9217      	str	r2, [sp, #92]	; 0x5c
 23fc9e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 23fc9e4:	e785      	b.n	23fc8f2 <_strtod_l+0x1a2>
 23fc9e6:	f04f 0c01 	mov.w	ip, #1
 23fc9ea:	e7f6      	b.n	23fc9da <_strtod_l+0x28a>
 23fc9ec:	023ffe5c 	.word	0x023ffe5c
 23fc9f0:	023ffc98 	.word	0x023ffc98
 23fc9f4:	7ff00000 	.word	0x7ff00000
 23fc9f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fc9fa:	1c51      	adds	r1, r2, #1
 23fc9fc:	9117      	str	r1, [sp, #92]	; 0x5c
 23fc9fe:	7852      	ldrb	r2, [r2, #1]
 23fca00:	2a30      	cmp	r2, #48	; 0x30
 23fca02:	d0f9      	beq.n	23fc9f8 <_strtod_l+0x2a8>
 23fca04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 23fca08:	2908      	cmp	r1, #8
 23fca0a:	f63f af79 	bhi.w	23fc900 <_strtod_l+0x1b0>
 23fca0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 23fca12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fca14:	9206      	str	r2, [sp, #24]
 23fca16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23fca18:	1c51      	adds	r1, r2, #1
 23fca1a:	9117      	str	r1, [sp, #92]	; 0x5c
 23fca1c:	7852      	ldrb	r2, [r2, #1]
 23fca1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 23fca22:	2e09      	cmp	r6, #9
 23fca24:	d937      	bls.n	23fca96 <_strtod_l+0x346>
 23fca26:	9e06      	ldr	r6, [sp, #24]
 23fca28:	1b89      	subs	r1, r1, r6
 23fca2a:	f644 661f 	movw	r6, #19999	; 0x4e1f
 23fca2e:	2908      	cmp	r1, #8
 23fca30:	dc02      	bgt.n	23fca38 <_strtod_l+0x2e8>
 23fca32:	4576      	cmp	r6, lr
 23fca34:	bfa8      	it	ge
 23fca36:	4676      	movge	r6, lr
 23fca38:	f1bc 0f00 	cmp.w	ip, #0
 23fca3c:	d000      	beq.n	23fca40 <_strtod_l+0x2f0>
 23fca3e:	4276      	negs	r6, r6
 23fca40:	2d00      	cmp	r5, #0
 23fca42:	d14d      	bne.n	23fcae0 <_strtod_l+0x390>
 23fca44:	9904      	ldr	r1, [sp, #16]
 23fca46:	4301      	orrs	r1, r0
 23fca48:	f47f aec6 	bne.w	23fc7d8 <_strtod_l+0x88>
 23fca4c:	2b00      	cmp	r3, #0
 23fca4e:	f47f aee1 	bne.w	23fc814 <_strtod_l+0xc4>
 23fca52:	2a69      	cmp	r2, #105	; 0x69
 23fca54:	d027      	beq.n	23fcaa6 <_strtod_l+0x356>
 23fca56:	dc24      	bgt.n	23fcaa2 <_strtod_l+0x352>
 23fca58:	2a49      	cmp	r2, #73	; 0x49
 23fca5a:	d024      	beq.n	23fcaa6 <_strtod_l+0x356>
 23fca5c:	2a4e      	cmp	r2, #78	; 0x4e
 23fca5e:	f47f aed9 	bne.w	23fc814 <_strtod_l+0xc4>
 23fca62:	499f      	ldr	r1, [pc, #636]	; (23fcce0 <_strtod_l+0x590>)
 23fca64:	a817      	add	r0, sp, #92	; 0x5c
 23fca66:	f001 f82f 	bl	23fdac8 <__match>
 23fca6a:	2800      	cmp	r0, #0
 23fca6c:	f43f aed2 	beq.w	23fc814 <_strtod_l+0xc4>
 23fca70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fca72:	781b      	ldrb	r3, [r3, #0]
 23fca74:	2b28      	cmp	r3, #40	; 0x28
 23fca76:	d12d      	bne.n	23fcad4 <_strtod_l+0x384>
 23fca78:	aa1a      	add	r2, sp, #104	; 0x68
 23fca7a:	499a      	ldr	r1, [pc, #616]	; (23fcce4 <_strtod_l+0x594>)
 23fca7c:	a817      	add	r0, sp, #92	; 0x5c
 23fca7e:	f001 f837 	bl	23fdaf0 <__hexnan>
 23fca82:	2805      	cmp	r0, #5
 23fca84:	d126      	bne.n	23fcad4 <_strtod_l+0x384>
 23fca86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23fca88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 23fca8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 23fca90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 23fca94:	e6a0      	b.n	23fc7d8 <_strtod_l+0x88>
 23fca96:	210a      	movs	r1, #10
 23fca98:	fb01 2e0e 	mla	lr, r1, lr, r2
 23fca9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 23fcaa0:	e7b9      	b.n	23fca16 <_strtod_l+0x2c6>
 23fcaa2:	2a6e      	cmp	r2, #110	; 0x6e
 23fcaa4:	e7db      	b.n	23fca5e <_strtod_l+0x30e>
 23fcaa6:	4990      	ldr	r1, [pc, #576]	; (23fcce8 <_strtod_l+0x598>)
 23fcaa8:	a817      	add	r0, sp, #92	; 0x5c
 23fcaaa:	f001 f80d 	bl	23fdac8 <__match>
 23fcaae:	2800      	cmp	r0, #0
 23fcab0:	f43f aeb0 	beq.w	23fc814 <_strtod_l+0xc4>
 23fcab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcab6:	a817      	add	r0, sp, #92	; 0x5c
 23fcab8:	498c      	ldr	r1, [pc, #560]	; (23fccec <_strtod_l+0x59c>)
 23fcaba:	3b01      	subs	r3, #1
 23fcabc:	9317      	str	r3, [sp, #92]	; 0x5c
 23fcabe:	f001 f803 	bl	23fdac8 <__match>
 23fcac2:	b910      	cbnz	r0, 23fcaca <_strtod_l+0x37a>
 23fcac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fcac6:	3301      	adds	r3, #1
 23fcac8:	9317      	str	r3, [sp, #92]	; 0x5c
 23fcaca:	f8df b230 	ldr.w	fp, [pc, #560]	; 23fccfc <_strtod_l+0x5ac>
 23fcace:	f04f 0a00 	mov.w	sl, #0
 23fcad2:	e681      	b.n	23fc7d8 <_strtod_l+0x88>
 23fcad4:	4886      	ldr	r0, [pc, #536]	; (23fccf0 <_strtod_l+0x5a0>)
 23fcad6:	f7ff fd3f 	bl	23fc558 <nan>
 23fcada:	ec5b ab10 	vmov	sl, fp, d0
 23fcade:	e67b      	b.n	23fc7d8 <_strtod_l+0x88>
 23fcae0:	9b05      	ldr	r3, [sp, #20]
 23fcae2:	2f00      	cmp	r7, #0
 23fcae4:	bf08      	it	eq
 23fcae6:	462f      	moveq	r7, r5
 23fcae8:	2d10      	cmp	r5, #16
 23fcaea:	9807      	ldr	r0, [sp, #28]
 23fcaec:	eba6 0303 	sub.w	r3, r6, r3
 23fcaf0:	46a8      	mov	r8, r5
 23fcaf2:	bfa8      	it	ge
 23fcaf4:	f04f 0810 	movge.w	r8, #16
 23fcaf8:	9306      	str	r3, [sp, #24]
 23fcafa:	f7f8 fff3 	bl	23f5ae4 <__aeabi_ui2d>
 23fcafe:	2d09      	cmp	r5, #9
 23fcb00:	4682      	mov	sl, r0
 23fcb02:	468b      	mov	fp, r1
 23fcb04:	dd13      	ble.n	23fcb2e <_strtod_l+0x3de>
 23fcb06:	4b7b      	ldr	r3, [pc, #492]	; (23fccf4 <_strtod_l+0x5a4>)
 23fcb08:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 23fcb0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 23fcb10:	f7f9 f862 	bl	23f5bd8 <__aeabi_dmul>
 23fcb14:	4682      	mov	sl, r0
 23fcb16:	468b      	mov	fp, r1
 23fcb18:	4648      	mov	r0, r9
 23fcb1a:	f7f8 ffe3 	bl	23f5ae4 <__aeabi_ui2d>
 23fcb1e:	4602      	mov	r2, r0
 23fcb20:	460b      	mov	r3, r1
 23fcb22:	4650      	mov	r0, sl
 23fcb24:	4659      	mov	r1, fp
 23fcb26:	f7f8 fea1 	bl	23f586c <__adddf3>
 23fcb2a:	4682      	mov	sl, r0
 23fcb2c:	468b      	mov	fp, r1
 23fcb2e:	2d0f      	cmp	r5, #15
 23fcb30:	dc38      	bgt.n	23fcba4 <_strtod_l+0x454>
 23fcb32:	9b06      	ldr	r3, [sp, #24]
 23fcb34:	2b00      	cmp	r3, #0
 23fcb36:	f43f ae4f 	beq.w	23fc7d8 <_strtod_l+0x88>
 23fcb3a:	dd24      	ble.n	23fcb86 <_strtod_l+0x436>
 23fcb3c:	2b16      	cmp	r3, #22
 23fcb3e:	dc0b      	bgt.n	23fcb58 <_strtod_l+0x408>
 23fcb40:	496c      	ldr	r1, [pc, #432]	; (23fccf4 <_strtod_l+0x5a4>)
 23fcb42:	4652      	mov	r2, sl
 23fcb44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fcb48:	465b      	mov	r3, fp
 23fcb4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcb4e:	f7f9 f843 	bl	23f5bd8 <__aeabi_dmul>
 23fcb52:	4682      	mov	sl, r0
 23fcb54:	468b      	mov	fp, r1
 23fcb56:	e63f      	b.n	23fc7d8 <_strtod_l+0x88>
 23fcb58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 23fcb5c:	9a06      	ldr	r2, [sp, #24]
 23fcb5e:	4293      	cmp	r3, r2
 23fcb60:	db20      	blt.n	23fcba4 <_strtod_l+0x454>
 23fcb62:	f1c5 050f 	rsb	r5, r5, #15
 23fcb66:	4c63      	ldr	r4, [pc, #396]	; (23fccf4 <_strtod_l+0x5a4>)
 23fcb68:	4652      	mov	r2, sl
 23fcb6a:	465b      	mov	r3, fp
 23fcb6c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 23fcb70:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcb74:	f7f9 f830 	bl	23f5bd8 <__aeabi_dmul>
 23fcb78:	9b06      	ldr	r3, [sp, #24]
 23fcb7a:	1b5d      	subs	r5, r3, r5
 23fcb7c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 23fcb80:	e9d4 2300 	ldrd	r2, r3, [r4]
 23fcb84:	e7e3      	b.n	23fcb4e <_strtod_l+0x3fe>
 23fcb86:	9b06      	ldr	r3, [sp, #24]
 23fcb88:	3316      	adds	r3, #22
 23fcb8a:	db0b      	blt.n	23fcba4 <_strtod_l+0x454>
 23fcb8c:	9b05      	ldr	r3, [sp, #20]
 23fcb8e:	4650      	mov	r0, sl
 23fcb90:	4659      	mov	r1, fp
 23fcb92:	1b9e      	subs	r6, r3, r6
 23fcb94:	4b57      	ldr	r3, [pc, #348]	; (23fccf4 <_strtod_l+0x5a4>)
 23fcb96:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 23fcb9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fcb9e:	f7f9 f945 	bl	23f5e2c <__aeabi_ddiv>
 23fcba2:	e7d6      	b.n	23fcb52 <_strtod_l+0x402>
 23fcba4:	eba5 0808 	sub.w	r8, r5, r8
 23fcba8:	9b06      	ldr	r3, [sp, #24]
 23fcbaa:	4498      	add	r8, r3
 23fcbac:	f1b8 0f00 	cmp.w	r8, #0
 23fcbb0:	dd74      	ble.n	23fcc9c <_strtod_l+0x54c>
 23fcbb2:	f018 030f 	ands.w	r3, r8, #15
 23fcbb6:	d00a      	beq.n	23fcbce <_strtod_l+0x47e>
 23fcbb8:	494e      	ldr	r1, [pc, #312]	; (23fccf4 <_strtod_l+0x5a4>)
 23fcbba:	4652      	mov	r2, sl
 23fcbbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23fcbc0:	465b      	mov	r3, fp
 23fcbc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcbc6:	f7f9 f807 	bl	23f5bd8 <__aeabi_dmul>
 23fcbca:	4682      	mov	sl, r0
 23fcbcc:	468b      	mov	fp, r1
 23fcbce:	f038 080f 	bics.w	r8, r8, #15
 23fcbd2:	d04f      	beq.n	23fcc74 <_strtod_l+0x524>
 23fcbd4:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 23fcbd8:	dd22      	ble.n	23fcc20 <_strtod_l+0x4d0>
 23fcbda:	2500      	movs	r5, #0
 23fcbdc:	462e      	mov	r6, r5
 23fcbde:	9507      	str	r5, [sp, #28]
 23fcbe0:	9505      	str	r5, [sp, #20]
 23fcbe2:	2322      	movs	r3, #34	; 0x22
 23fcbe4:	f8df b114 	ldr.w	fp, [pc, #276]	; 23fccfc <_strtod_l+0x5ac>
 23fcbe8:	f04f 0a00 	mov.w	sl, #0
 23fcbec:	6023      	str	r3, [r4, #0]
 23fcbee:	9b07      	ldr	r3, [sp, #28]
 23fcbf0:	2b00      	cmp	r3, #0
 23fcbf2:	f43f adf1 	beq.w	23fc7d8 <_strtod_l+0x88>
 23fcbf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fcbf8:	4620      	mov	r0, r4
 23fcbfa:	f001 f86b 	bl	23fdcd4 <_Bfree>
 23fcbfe:	9905      	ldr	r1, [sp, #20]
 23fcc00:	4620      	mov	r0, r4
 23fcc02:	f001 f867 	bl	23fdcd4 <_Bfree>
 23fcc06:	4631      	mov	r1, r6
 23fcc08:	4620      	mov	r0, r4
 23fcc0a:	f001 f863 	bl	23fdcd4 <_Bfree>
 23fcc0e:	9907      	ldr	r1, [sp, #28]
 23fcc10:	4620      	mov	r0, r4
 23fcc12:	f001 f85f 	bl	23fdcd4 <_Bfree>
 23fcc16:	4629      	mov	r1, r5
 23fcc18:	4620      	mov	r0, r4
 23fcc1a:	f001 f85b 	bl	23fdcd4 <_Bfree>
 23fcc1e:	e5db      	b.n	23fc7d8 <_strtod_l+0x88>
 23fcc20:	4b35      	ldr	r3, [pc, #212]	; (23fccf8 <_strtod_l+0x5a8>)
 23fcc22:	ea4f 1828 	mov.w	r8, r8, asr #4
 23fcc26:	4650      	mov	r0, sl
 23fcc28:	4659      	mov	r1, fp
 23fcc2a:	9304      	str	r3, [sp, #16]
 23fcc2c:	2300      	movs	r3, #0
 23fcc2e:	4699      	mov	r9, r3
 23fcc30:	f1b8 0f01 	cmp.w	r8, #1
 23fcc34:	dc21      	bgt.n	23fcc7a <_strtod_l+0x52a>
 23fcc36:	b10b      	cbz	r3, 23fcc3c <_strtod_l+0x4ec>
 23fcc38:	4682      	mov	sl, r0
 23fcc3a:	468b      	mov	fp, r1
 23fcc3c:	4b2e      	ldr	r3, [pc, #184]	; (23fccf8 <_strtod_l+0x5a8>)
 23fcc3e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 23fcc42:	4652      	mov	r2, sl
 23fcc44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 23fcc48:	465b      	mov	r3, fp
 23fcc4a:	e9d9 0100 	ldrd	r0, r1, [r9]
 23fcc4e:	f7f8 ffc3 	bl	23f5bd8 <__aeabi_dmul>
 23fcc52:	4b2a      	ldr	r3, [pc, #168]	; (23fccfc <_strtod_l+0x5ac>)
 23fcc54:	460a      	mov	r2, r1
 23fcc56:	4682      	mov	sl, r0
 23fcc58:	400b      	ands	r3, r1
 23fcc5a:	4929      	ldr	r1, [pc, #164]	; (23fcd00 <_strtod_l+0x5b0>)
 23fcc5c:	428b      	cmp	r3, r1
 23fcc5e:	d8bc      	bhi.n	23fcbda <_strtod_l+0x48a>
 23fcc60:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 23fcc64:	428b      	cmp	r3, r1
 23fcc66:	bf86      	itte	hi
 23fcc68:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 23fcd04 <_strtod_l+0x5b4>
 23fcc6c:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 23fcc70:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 23fcc74:	2300      	movs	r3, #0
 23fcc76:	9304      	str	r3, [sp, #16]
 23fcc78:	e083      	b.n	23fcd82 <_strtod_l+0x632>
 23fcc7a:	f018 0f01 	tst.w	r8, #1
 23fcc7e:	d005      	beq.n	23fcc8c <_strtod_l+0x53c>
 23fcc80:	9b04      	ldr	r3, [sp, #16]
 23fcc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fcc86:	f7f8 ffa7 	bl	23f5bd8 <__aeabi_dmul>
 23fcc8a:	2301      	movs	r3, #1
 23fcc8c:	9a04      	ldr	r2, [sp, #16]
 23fcc8e:	f109 0901 	add.w	r9, r9, #1
 23fcc92:	ea4f 0868 	mov.w	r8, r8, asr #1
 23fcc96:	3208      	adds	r2, #8
 23fcc98:	9204      	str	r2, [sp, #16]
 23fcc9a:	e7c9      	b.n	23fcc30 <_strtod_l+0x4e0>
 23fcc9c:	d0ea      	beq.n	23fcc74 <_strtod_l+0x524>
 23fcc9e:	f1c8 0800 	rsb	r8, r8, #0
 23fcca2:	f018 020f 	ands.w	r2, r8, #15
 23fcca6:	d00a      	beq.n	23fccbe <_strtod_l+0x56e>
 23fcca8:	4b12      	ldr	r3, [pc, #72]	; (23fccf4 <_strtod_l+0x5a4>)
 23fccaa:	4650      	mov	r0, sl
 23fccac:	4659      	mov	r1, fp
 23fccae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fccb6:	f7f9 f8b9 	bl	23f5e2c <__aeabi_ddiv>
 23fccba:	4682      	mov	sl, r0
 23fccbc:	468b      	mov	fp, r1
 23fccbe:	ea5f 1828 	movs.w	r8, r8, asr #4
 23fccc2:	d0d7      	beq.n	23fcc74 <_strtod_l+0x524>
 23fccc4:	f1b8 0f1f 	cmp.w	r8, #31
 23fccc8:	dd1e      	ble.n	23fcd08 <_strtod_l+0x5b8>
 23fccca:	2500      	movs	r5, #0
 23fcccc:	462e      	mov	r6, r5
 23fccce:	9507      	str	r5, [sp, #28]
 23fccd0:	9505      	str	r5, [sp, #20]
 23fccd2:	2322      	movs	r3, #34	; 0x22
 23fccd4:	f04f 0a00 	mov.w	sl, #0
 23fccd8:	f04f 0b00 	mov.w	fp, #0
 23fccdc:	6023      	str	r3, [r4, #0]
 23fccde:	e786      	b.n	23fcbee <_strtod_l+0x49e>
 23fcce0:	023fed45 	.word	0x023fed45
 23fcce4:	023ffcac 	.word	0x023ffcac
 23fcce8:	023fed49 	.word	0x023fed49
 23fccec:	023ffc91 	.word	0x023ffc91
 23fccf0:	023fe9d8 	.word	0x023fe9d8
 23fccf4:	023ffef0 	.word	0x023ffef0
 23fccf8:	023ffec8 	.word	0x023ffec8
 23fccfc:	7ff00000 	.word	0x7ff00000
 23fcd00:	7ca00000 	.word	0x7ca00000
 23fcd04:	7fefffff 	.word	0x7fefffff
 23fcd08:	f018 0310 	ands.w	r3, r8, #16
 23fcd0c:	4650      	mov	r0, sl
 23fcd0e:	4659      	mov	r1, fp
 23fcd10:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 23fd0bc <_strtod_l+0x96c>
 23fcd14:	bf18      	it	ne
 23fcd16:	236a      	movne	r3, #106	; 0x6a
 23fcd18:	9304      	str	r3, [sp, #16]
 23fcd1a:	2300      	movs	r3, #0
 23fcd1c:	f018 0f01 	tst.w	r8, #1
 23fcd20:	d004      	beq.n	23fcd2c <_strtod_l+0x5dc>
 23fcd22:	e9d9 2300 	ldrd	r2, r3, [r9]
 23fcd26:	f7f8 ff57 	bl	23f5bd8 <__aeabi_dmul>
 23fcd2a:	2301      	movs	r3, #1
 23fcd2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 23fcd30:	f109 0908 	add.w	r9, r9, #8
 23fcd34:	d1f2      	bne.n	23fcd1c <_strtod_l+0x5cc>
 23fcd36:	b10b      	cbz	r3, 23fcd3c <_strtod_l+0x5ec>
 23fcd38:	4682      	mov	sl, r0
 23fcd3a:	468b      	mov	fp, r1
 23fcd3c:	9b04      	ldr	r3, [sp, #16]
 23fcd3e:	b1c3      	cbz	r3, 23fcd72 <_strtod_l+0x622>
 23fcd40:	f3cb 520a 	ubfx	r2, fp, #20, #11
 23fcd44:	4659      	mov	r1, fp
 23fcd46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 23fcd4a:	2b00      	cmp	r3, #0
 23fcd4c:	dd11      	ble.n	23fcd72 <_strtod_l+0x622>
 23fcd4e:	2b1f      	cmp	r3, #31
 23fcd50:	f340 8121 	ble.w	23fcf96 <_strtod_l+0x846>
 23fcd54:	2b34      	cmp	r3, #52	; 0x34
 23fcd56:	f04f 0a00 	mov.w	sl, #0
 23fcd5a:	bfdb      	ittet	le
 23fcd5c:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 23fcd60:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 23fcd64:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 23fcd68:	fa03 f202 	lslle.w	r2, r3, r2
 23fcd6c:	bfd8      	it	le
 23fcd6e:	ea02 0b01 	andle.w	fp, r2, r1
 23fcd72:	2200      	movs	r2, #0
 23fcd74:	2300      	movs	r3, #0
 23fcd76:	4650      	mov	r0, sl
 23fcd78:	4659      	mov	r1, fp
 23fcd7a:	f7f9 f995 	bl	23f60a8 <__aeabi_dcmpeq>
 23fcd7e:	2800      	cmp	r0, #0
 23fcd80:	d1a3      	bne.n	23fccca <_strtod_l+0x57a>
 23fcd82:	9b07      	ldr	r3, [sp, #28]
 23fcd84:	463a      	mov	r2, r7
 23fcd86:	9908      	ldr	r1, [sp, #32]
 23fcd88:	4620      	mov	r0, r4
 23fcd8a:	9300      	str	r3, [sp, #0]
 23fcd8c:	462b      	mov	r3, r5
 23fcd8e:	f001 f80b 	bl	23fdda8 <__s2b>
 23fcd92:	9007      	str	r0, [sp, #28]
 23fcd94:	2800      	cmp	r0, #0
 23fcd96:	f43f af20 	beq.w	23fcbda <_strtod_l+0x48a>
 23fcd9a:	9b05      	ldr	r3, [sp, #20]
 23fcd9c:	2500      	movs	r5, #0
 23fcd9e:	1b9e      	subs	r6, r3, r6
 23fcda0:	9b06      	ldr	r3, [sp, #24]
 23fcda2:	2b00      	cmp	r3, #0
 23fcda4:	bfb4      	ite	lt
 23fcda6:	4633      	movlt	r3, r6
 23fcda8:	2300      	movge	r3, #0
 23fcdaa:	462e      	mov	r6, r5
 23fcdac:	930c      	str	r3, [sp, #48]	; 0x30
 23fcdae:	9b06      	ldr	r3, [sp, #24]
 23fcdb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23fcdb4:	9312      	str	r3, [sp, #72]	; 0x48
 23fcdb6:	9b07      	ldr	r3, [sp, #28]
 23fcdb8:	4620      	mov	r0, r4
 23fcdba:	6859      	ldr	r1, [r3, #4]
 23fcdbc:	f000 ff4a 	bl	23fdc54 <_Balloc>
 23fcdc0:	9005      	str	r0, [sp, #20]
 23fcdc2:	2800      	cmp	r0, #0
 23fcdc4:	f43f af0d 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fcdc8:	9b07      	ldr	r3, [sp, #28]
 23fcdca:	300c      	adds	r0, #12
 23fcdcc:	691a      	ldr	r2, [r3, #16]
 23fcdce:	f103 010c 	add.w	r1, r3, #12
 23fcdd2:	3202      	adds	r2, #2
 23fcdd4:	0092      	lsls	r2, r2, #2
 23fcdd6:	f7ff fbe9 	bl	23fc5ac <memcpy>
 23fcdda:	aa1a      	add	r2, sp, #104	; 0x68
 23fcddc:	a919      	add	r1, sp, #100	; 0x64
 23fcdde:	4620      	mov	r0, r4
 23fcde0:	ec4b ab10 	vmov	d0, sl, fp
 23fcde4:	f001 fb28 	bl	23fe438 <__d2b>
 23fcde8:	9018      	str	r0, [sp, #96]	; 0x60
 23fcdea:	ec4b ab18 	vmov	d8, sl, fp
 23fcdee:	2800      	cmp	r0, #0
 23fcdf0:	f43f aef7 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fcdf4:	2101      	movs	r1, #1
 23fcdf6:	4620      	mov	r0, r4
 23fcdf8:	f001 f870 	bl	23fdedc <__i2b>
 23fcdfc:	4606      	mov	r6, r0
 23fcdfe:	2800      	cmp	r0, #0
 23fce00:	f43f aeef 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fce04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23fce06:	9904      	ldr	r1, [sp, #16]
 23fce08:	2b00      	cmp	r3, #0
 23fce0a:	eba3 0801 	sub.w	r8, r3, r1
 23fce0e:	bfa9      	itett	ge
 23fce10:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 23fce12:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 23fce14:	eb03 0902 	addge.w	r9, r3, r2
 23fce18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 23fce1a:	bfb8      	it	lt
 23fce1c:	1ad7      	sublt	r7, r2, r3
 23fce1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23fce20:	4ba1      	ldr	r3, [pc, #644]	; (23fd0a8 <_strtod_l+0x958>)
 23fce22:	4490      	add	r8, r2
 23fce24:	bfb8      	it	lt
 23fce26:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 23fce2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 23fce2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fce32:	4598      	cmp	r8, r3
 23fce34:	f280 80c3 	bge.w	23fcfbe <_strtod_l+0x86e>
 23fce38:	eba3 0308 	sub.w	r3, r3, r8
 23fce3c:	2101      	movs	r1, #1
 23fce3e:	2b1f      	cmp	r3, #31
 23fce40:	eba2 0203 	sub.w	r2, r2, r3
 23fce44:	f300 80ae 	bgt.w	23fcfa4 <_strtod_l+0x854>
 23fce48:	fa01 f303 	lsl.w	r3, r1, r3
 23fce4c:	930d      	str	r3, [sp, #52]	; 0x34
 23fce4e:	2300      	movs	r3, #0
 23fce50:	9308      	str	r3, [sp, #32]
 23fce52:	eb09 0802 	add.w	r8, r9, r2
 23fce56:	9b04      	ldr	r3, [sp, #16]
 23fce58:	4417      	add	r7, r2
 23fce5a:	45c1      	cmp	r9, r8
 23fce5c:	441f      	add	r7, r3
 23fce5e:	464b      	mov	r3, r9
 23fce60:	bfa8      	it	ge
 23fce62:	4643      	movge	r3, r8
 23fce64:	42bb      	cmp	r3, r7
 23fce66:	bfa8      	it	ge
 23fce68:	463b      	movge	r3, r7
 23fce6a:	2b00      	cmp	r3, #0
 23fce6c:	bfc2      	ittt	gt
 23fce6e:	eba8 0803 	subgt.w	r8, r8, r3
 23fce72:	1aff      	subgt	r7, r7, r3
 23fce74:	eba9 0903 	subgt.w	r9, r9, r3
 23fce78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fce7a:	2b00      	cmp	r3, #0
 23fce7c:	dd17      	ble.n	23fceae <_strtod_l+0x75e>
 23fce7e:	4631      	mov	r1, r6
 23fce80:	461a      	mov	r2, r3
 23fce82:	4620      	mov	r0, r4
 23fce84:	f001 f8e8 	bl	23fe058 <__pow5mult>
 23fce88:	4606      	mov	r6, r0
 23fce8a:	2800      	cmp	r0, #0
 23fce8c:	f43f aea9 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fce90:	4601      	mov	r1, r0
 23fce92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23fce94:	4620      	mov	r0, r4
 23fce96:	f001 f837 	bl	23fdf08 <__multiply>
 23fce9a:	900b      	str	r0, [sp, #44]	; 0x2c
 23fce9c:	2800      	cmp	r0, #0
 23fce9e:	f43f aea0 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fcea2:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fcea4:	4620      	mov	r0, r4
 23fcea6:	f000 ff15 	bl	23fdcd4 <_Bfree>
 23fceaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fceac:	9318      	str	r3, [sp, #96]	; 0x60
 23fceae:	f1b8 0f00 	cmp.w	r8, #0
 23fceb2:	f300 8089 	bgt.w	23fcfc8 <_strtod_l+0x878>
 23fceb6:	9b06      	ldr	r3, [sp, #24]
 23fceb8:	2b00      	cmp	r3, #0
 23fceba:	dd08      	ble.n	23fcece <_strtod_l+0x77e>
 23fcebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23fcebe:	4620      	mov	r0, r4
 23fcec0:	9905      	ldr	r1, [sp, #20]
 23fcec2:	f001 f8c9 	bl	23fe058 <__pow5mult>
 23fcec6:	9005      	str	r0, [sp, #20]
 23fcec8:	2800      	cmp	r0, #0
 23fceca:	f43f ae8a 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fcece:	2f00      	cmp	r7, #0
 23fced0:	dd08      	ble.n	23fcee4 <_strtod_l+0x794>
 23fced2:	463a      	mov	r2, r7
 23fced4:	9905      	ldr	r1, [sp, #20]
 23fced6:	4620      	mov	r0, r4
 23fced8:	f001 f918 	bl	23fe10c <__lshift>
 23fcedc:	9005      	str	r0, [sp, #20]
 23fcede:	2800      	cmp	r0, #0
 23fcee0:	f43f ae7f 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fcee4:	f1b9 0f00 	cmp.w	r9, #0
 23fcee8:	dd08      	ble.n	23fcefc <_strtod_l+0x7ac>
 23fceea:	4631      	mov	r1, r6
 23fceec:	464a      	mov	r2, r9
 23fceee:	4620      	mov	r0, r4
 23fcef0:	f001 f90c 	bl	23fe10c <__lshift>
 23fcef4:	4606      	mov	r6, r0
 23fcef6:	2800      	cmp	r0, #0
 23fcef8:	f43f ae73 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fcefc:	9a05      	ldr	r2, [sp, #20]
 23fcefe:	4620      	mov	r0, r4
 23fcf00:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fcf02:	f001 f98f 	bl	23fe224 <__mdiff>
 23fcf06:	4605      	mov	r5, r0
 23fcf08:	2800      	cmp	r0, #0
 23fcf0a:	f43f ae6a 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fcf0e:	68c3      	ldr	r3, [r0, #12]
 23fcf10:	4631      	mov	r1, r6
 23fcf12:	930b      	str	r3, [sp, #44]	; 0x2c
 23fcf14:	2300      	movs	r3, #0
 23fcf16:	60c3      	str	r3, [r0, #12]
 23fcf18:	f001 f968 	bl	23fe1ec <__mcmp>
 23fcf1c:	2800      	cmp	r0, #0
 23fcf1e:	da5d      	bge.n	23fcfdc <_strtod_l+0x88c>
 23fcf20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fcf22:	ea53 030a 	orrs.w	r3, r3, sl
 23fcf26:	d17f      	bne.n	23fd028 <_strtod_l+0x8d8>
 23fcf28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fcf2c:	2b00      	cmp	r3, #0
 23fcf2e:	d17b      	bne.n	23fd028 <_strtod_l+0x8d8>
 23fcf30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fcf34:	0d1b      	lsrs	r3, r3, #20
 23fcf36:	051b      	lsls	r3, r3, #20
 23fcf38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 23fcf3c:	d974      	bls.n	23fd028 <_strtod_l+0x8d8>
 23fcf3e:	696b      	ldr	r3, [r5, #20]
 23fcf40:	b913      	cbnz	r3, 23fcf48 <_strtod_l+0x7f8>
 23fcf42:	692b      	ldr	r3, [r5, #16]
 23fcf44:	2b01      	cmp	r3, #1
 23fcf46:	dd6f      	ble.n	23fd028 <_strtod_l+0x8d8>
 23fcf48:	4629      	mov	r1, r5
 23fcf4a:	2201      	movs	r2, #1
 23fcf4c:	4620      	mov	r0, r4
 23fcf4e:	f001 f8dd 	bl	23fe10c <__lshift>
 23fcf52:	4631      	mov	r1, r6
 23fcf54:	4605      	mov	r5, r0
 23fcf56:	f001 f949 	bl	23fe1ec <__mcmp>
 23fcf5a:	2800      	cmp	r0, #0
 23fcf5c:	dd64      	ble.n	23fd028 <_strtod_l+0x8d8>
 23fcf5e:	9904      	ldr	r1, [sp, #16]
 23fcf60:	465b      	mov	r3, fp
 23fcf62:	4a52      	ldr	r2, [pc, #328]	; (23fd0ac <_strtod_l+0x95c>)
 23fcf64:	2900      	cmp	r1, #0
 23fcf66:	d07f      	beq.n	23fd068 <_strtod_l+0x918>
 23fcf68:	ea02 010b 	and.w	r1, r2, fp
 23fcf6c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 23fcf70:	dc7a      	bgt.n	23fd068 <_strtod_l+0x918>
 23fcf72:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 23fcf76:	f77f aeac 	ble.w	23fccd2 <_strtod_l+0x582>
 23fcf7a:	4b4d      	ldr	r3, [pc, #308]	; (23fd0b0 <_strtod_l+0x960>)
 23fcf7c:	4650      	mov	r0, sl
 23fcf7e:	4659      	mov	r1, fp
 23fcf80:	2200      	movs	r2, #0
 23fcf82:	f7f8 fe29 	bl	23f5bd8 <__aeabi_dmul>
 23fcf86:	460b      	mov	r3, r1
 23fcf88:	4682      	mov	sl, r0
 23fcf8a:	468b      	mov	fp, r1
 23fcf8c:	4303      	orrs	r3, r0
 23fcf8e:	bf04      	itt	eq
 23fcf90:	2322      	moveq	r3, #34	; 0x22
 23fcf92:	6023      	streq	r3, [r4, #0]
 23fcf94:	e62f      	b.n	23fcbf6 <_strtod_l+0x4a6>
 23fcf96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fcf9a:	fa02 f303 	lsl.w	r3, r2, r3
 23fcf9e:	ea03 0a0a 	and.w	sl, r3, sl
 23fcfa2:	e6e6      	b.n	23fcd72 <_strtod_l+0x622>
 23fcfa4:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 23fcfa8:	910d      	str	r1, [sp, #52]	; 0x34
 23fcfaa:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 23fcfae:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 23fcfb2:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 23fcfb6:	fa01 f308 	lsl.w	r3, r1, r8
 23fcfba:	9308      	str	r3, [sp, #32]
 23fcfbc:	e749      	b.n	23fce52 <_strtod_l+0x702>
 23fcfbe:	2300      	movs	r3, #0
 23fcfc0:	9308      	str	r3, [sp, #32]
 23fcfc2:	2301      	movs	r3, #1
 23fcfc4:	930d      	str	r3, [sp, #52]	; 0x34
 23fcfc6:	e744      	b.n	23fce52 <_strtod_l+0x702>
 23fcfc8:	4642      	mov	r2, r8
 23fcfca:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fcfcc:	4620      	mov	r0, r4
 23fcfce:	f001 f89d 	bl	23fe10c <__lshift>
 23fcfd2:	9018      	str	r0, [sp, #96]	; 0x60
 23fcfd4:	2800      	cmp	r0, #0
 23fcfd6:	f47f af6e 	bne.w	23fceb6 <_strtod_l+0x766>
 23fcfda:	e602      	b.n	23fcbe2 <_strtod_l+0x492>
 23fcfdc:	465f      	mov	r7, fp
 23fcfde:	d16f      	bne.n	23fd0c0 <_strtod_l+0x970>
 23fcfe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fcfe2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fcfe6:	b342      	cbz	r2, 23fd03a <_strtod_l+0x8ea>
 23fcfe8:	4a32      	ldr	r2, [pc, #200]	; (23fd0b4 <_strtod_l+0x964>)
 23fcfea:	4293      	cmp	r3, r2
 23fcfec:	d128      	bne.n	23fd040 <_strtod_l+0x8f0>
 23fcfee:	9b04      	ldr	r3, [sp, #16]
 23fcff0:	4651      	mov	r1, sl
 23fcff2:	b1eb      	cbz	r3, 23fd030 <_strtod_l+0x8e0>
 23fcff4:	4b2d      	ldr	r3, [pc, #180]	; (23fd0ac <_strtod_l+0x95c>)
 23fcff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fcffa:	403b      	ands	r3, r7
 23fcffc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fd000:	d819      	bhi.n	23fd036 <_strtod_l+0x8e6>
 23fd002:	0d1b      	lsrs	r3, r3, #20
 23fd004:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23fd008:	fa02 f303 	lsl.w	r3, r2, r3
 23fd00c:	4299      	cmp	r1, r3
 23fd00e:	d117      	bne.n	23fd040 <_strtod_l+0x8f0>
 23fd010:	4b29      	ldr	r3, [pc, #164]	; (23fd0b8 <_strtod_l+0x968>)
 23fd012:	429f      	cmp	r7, r3
 23fd014:	d102      	bne.n	23fd01c <_strtod_l+0x8cc>
 23fd016:	3101      	adds	r1, #1
 23fd018:	f43f ade3 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fd01c:	4b23      	ldr	r3, [pc, #140]	; (23fd0ac <_strtod_l+0x95c>)
 23fd01e:	f04f 0a00 	mov.w	sl, #0
 23fd022:	403b      	ands	r3, r7
 23fd024:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 23fd028:	9b04      	ldr	r3, [sp, #16]
 23fd02a:	2b00      	cmp	r3, #0
 23fd02c:	d1a5      	bne.n	23fcf7a <_strtod_l+0x82a>
 23fd02e:	e5e2      	b.n	23fcbf6 <_strtod_l+0x4a6>
 23fd030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fd034:	e7ea      	b.n	23fd00c <_strtod_l+0x8bc>
 23fd036:	4613      	mov	r3, r2
 23fd038:	e7e8      	b.n	23fd00c <_strtod_l+0x8bc>
 23fd03a:	ea53 030a 	orrs.w	r3, r3, sl
 23fd03e:	d08e      	beq.n	23fcf5e <_strtod_l+0x80e>
 23fd040:	9b08      	ldr	r3, [sp, #32]
 23fd042:	b1db      	cbz	r3, 23fd07c <_strtod_l+0x92c>
 23fd044:	423b      	tst	r3, r7
 23fd046:	d0ef      	beq.n	23fd028 <_strtod_l+0x8d8>
 23fd048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd04a:	4650      	mov	r0, sl
 23fd04c:	9a04      	ldr	r2, [sp, #16]
 23fd04e:	4659      	mov	r1, fp
 23fd050:	b1c3      	cbz	r3, 23fd084 <_strtod_l+0x934>
 23fd052:	f7ff fb5e 	bl	23fc712 <sulp>
 23fd056:	4602      	mov	r2, r0
 23fd058:	460b      	mov	r3, r1
 23fd05a:	ec51 0b18 	vmov	r0, r1, d8
 23fd05e:	f7f8 fc05 	bl	23f586c <__adddf3>
 23fd062:	4682      	mov	sl, r0
 23fd064:	468b      	mov	fp, r1
 23fd066:	e7df      	b.n	23fd028 <_strtod_l+0x8d8>
 23fd068:	4013      	ands	r3, r2
 23fd06a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fd06e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 23fd072:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 23fd076:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 23fd07a:	e7d5      	b.n	23fd028 <_strtod_l+0x8d8>
 23fd07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fd07e:	ea13 0f0a 	tst.w	r3, sl
 23fd082:	e7e0      	b.n	23fd046 <_strtod_l+0x8f6>
 23fd084:	f7ff fb45 	bl	23fc712 <sulp>
 23fd088:	4602      	mov	r2, r0
 23fd08a:	460b      	mov	r3, r1
 23fd08c:	ec51 0b18 	vmov	r0, r1, d8
 23fd090:	f7f8 fbea 	bl	23f5868 <__aeabi_dsub>
 23fd094:	2200      	movs	r2, #0
 23fd096:	2300      	movs	r3, #0
 23fd098:	4682      	mov	sl, r0
 23fd09a:	468b      	mov	fp, r1
 23fd09c:	f7f9 f804 	bl	23f60a8 <__aeabi_dcmpeq>
 23fd0a0:	2800      	cmp	r0, #0
 23fd0a2:	d0c1      	beq.n	23fd028 <_strtod_l+0x8d8>
 23fd0a4:	e615      	b.n	23fccd2 <_strtod_l+0x582>
 23fd0a6:	bf00      	nop
 23fd0a8:	fffffc02 	.word	0xfffffc02
 23fd0ac:	7ff00000 	.word	0x7ff00000
 23fd0b0:	39500000 	.word	0x39500000
 23fd0b4:	000fffff 	.word	0x000fffff
 23fd0b8:	7fefffff 	.word	0x7fefffff
 23fd0bc:	023ffcc0 	.word	0x023ffcc0
 23fd0c0:	4631      	mov	r1, r6
 23fd0c2:	4628      	mov	r0, r5
 23fd0c4:	f001 fa14 	bl	23fe4f0 <__ratio>
 23fd0c8:	2200      	movs	r2, #0
 23fd0ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23fd0ce:	ee10 0a10 	vmov	r0, s0
 23fd0d2:	ec59 8b10 	vmov	r8, r9, d0
 23fd0d6:	4649      	mov	r1, r9
 23fd0d8:	f7f8 fffa 	bl	23f60d0 <__aeabi_dcmple>
 23fd0dc:	2800      	cmp	r0, #0
 23fd0de:	d07a      	beq.n	23fd1d6 <_strtod_l+0xa86>
 23fd0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd0e2:	2b00      	cmp	r3, #0
 23fd0e4:	d04a      	beq.n	23fd17c <_strtod_l+0xa2c>
 23fd0e6:	2200      	movs	r2, #0
 23fd0e8:	4b93      	ldr	r3, [pc, #588]	; (23fd338 <_strtod_l+0xbe8>)
 23fd0ea:	f04f 0800 	mov.w	r8, #0
 23fd0ee:	f8df 9248 	ldr.w	r9, [pc, #584]	; 23fd338 <_strtod_l+0xbe8>
 23fd0f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fd0f6:	4b91      	ldr	r3, [pc, #580]	; (23fd33c <_strtod_l+0xbec>)
 23fd0f8:	403b      	ands	r3, r7
 23fd0fa:	930d      	str	r3, [sp, #52]	; 0x34
 23fd0fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fd0fe:	4b90      	ldr	r3, [pc, #576]	; (23fd340 <_strtod_l+0xbf0>)
 23fd100:	429a      	cmp	r2, r3
 23fd102:	f040 80b0 	bne.w	23fd266 <_strtod_l+0xb16>
 23fd106:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 23fd10a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd10e:	ec4b ab10 	vmov	d0, sl, fp
 23fd112:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fd116:	f001 f915 	bl	23fe344 <__ulp>
 23fd11a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd11e:	ec53 2b10 	vmov	r2, r3, d0
 23fd122:	f7f8 fd59 	bl	23f5bd8 <__aeabi_dmul>
 23fd126:	4652      	mov	r2, sl
 23fd128:	465b      	mov	r3, fp
 23fd12a:	f7f8 fb9f 	bl	23f586c <__adddf3>
 23fd12e:	460b      	mov	r3, r1
 23fd130:	4982      	ldr	r1, [pc, #520]	; (23fd33c <_strtod_l+0xbec>)
 23fd132:	4682      	mov	sl, r0
 23fd134:	4a83      	ldr	r2, [pc, #524]	; (23fd344 <_strtod_l+0xbf4>)
 23fd136:	4019      	ands	r1, r3
 23fd138:	4291      	cmp	r1, r2
 23fd13a:	d960      	bls.n	23fd1fe <_strtod_l+0xaae>
 23fd13c:	ee18 3a90 	vmov	r3, s17
 23fd140:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 23fd144:	4293      	cmp	r3, r2
 23fd146:	d104      	bne.n	23fd152 <_strtod_l+0xa02>
 23fd148:	ee18 3a10 	vmov	r3, s16
 23fd14c:	3301      	adds	r3, #1
 23fd14e:	f43f ad48 	beq.w	23fcbe2 <_strtod_l+0x492>
 23fd152:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 23fd350 <_strtod_l+0xc00>
 23fd156:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23fd15a:	9918      	ldr	r1, [sp, #96]	; 0x60
 23fd15c:	4620      	mov	r0, r4
 23fd15e:	f000 fdb9 	bl	23fdcd4 <_Bfree>
 23fd162:	9905      	ldr	r1, [sp, #20]
 23fd164:	4620      	mov	r0, r4
 23fd166:	f000 fdb5 	bl	23fdcd4 <_Bfree>
 23fd16a:	4631      	mov	r1, r6
 23fd16c:	4620      	mov	r0, r4
 23fd16e:	f000 fdb1 	bl	23fdcd4 <_Bfree>
 23fd172:	4629      	mov	r1, r5
 23fd174:	4620      	mov	r0, r4
 23fd176:	f000 fdad 	bl	23fdcd4 <_Bfree>
 23fd17a:	e61c      	b.n	23fcdb6 <_strtod_l+0x666>
 23fd17c:	f1ba 0f00 	cmp.w	sl, #0
 23fd180:	d11b      	bne.n	23fd1ba <_strtod_l+0xa6a>
 23fd182:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fd186:	b9f3      	cbnz	r3, 23fd1c6 <_strtod_l+0xa76>
 23fd188:	2200      	movs	r2, #0
 23fd18a:	4b6b      	ldr	r3, [pc, #428]	; (23fd338 <_strtod_l+0xbe8>)
 23fd18c:	4640      	mov	r0, r8
 23fd18e:	4649      	mov	r1, r9
 23fd190:	f7f8 ff94 	bl	23f60bc <__aeabi_dcmplt>
 23fd194:	b9d0      	cbnz	r0, 23fd1cc <_strtod_l+0xa7c>
 23fd196:	4640      	mov	r0, r8
 23fd198:	4649      	mov	r1, r9
 23fd19a:	2200      	movs	r2, #0
 23fd19c:	4b6a      	ldr	r3, [pc, #424]	; (23fd348 <_strtod_l+0xbf8>)
 23fd19e:	f7f8 fd1b 	bl	23f5bd8 <__aeabi_dmul>
 23fd1a2:	4680      	mov	r8, r0
 23fd1a4:	4689      	mov	r9, r1
 23fd1a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23fd1aa:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 23fd1ae:	9315      	str	r3, [sp, #84]	; 0x54
 23fd1b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 23fd1b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fd1b8:	e79d      	b.n	23fd0f6 <_strtod_l+0x9a6>
 23fd1ba:	f1ba 0f01 	cmp.w	sl, #1
 23fd1be:	d102      	bne.n	23fd1c6 <_strtod_l+0xa76>
 23fd1c0:	2f00      	cmp	r7, #0
 23fd1c2:	f43f ad86 	beq.w	23fccd2 <_strtod_l+0x582>
 23fd1c6:	2200      	movs	r2, #0
 23fd1c8:	4b60      	ldr	r3, [pc, #384]	; (23fd34c <_strtod_l+0xbfc>)
 23fd1ca:	e78e      	b.n	23fd0ea <_strtod_l+0x99a>
 23fd1cc:	f04f 0800 	mov.w	r8, #0
 23fd1d0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 23fd348 <_strtod_l+0xbf8>
 23fd1d4:	e7e7      	b.n	23fd1a6 <_strtod_l+0xa56>
 23fd1d6:	4b5c      	ldr	r3, [pc, #368]	; (23fd348 <_strtod_l+0xbf8>)
 23fd1d8:	4640      	mov	r0, r8
 23fd1da:	4649      	mov	r1, r9
 23fd1dc:	2200      	movs	r2, #0
 23fd1de:	f7f8 fcfb 	bl	23f5bd8 <__aeabi_dmul>
 23fd1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd1e4:	4680      	mov	r8, r0
 23fd1e6:	4689      	mov	r9, r1
 23fd1e8:	b933      	cbnz	r3, 23fd1f8 <_strtod_l+0xaa8>
 23fd1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fd1ee:	900e      	str	r0, [sp, #56]	; 0x38
 23fd1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 23fd1f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 23fd1f6:	e7dd      	b.n	23fd1b4 <_strtod_l+0xa64>
 23fd1f8:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 23fd1fc:	e7f9      	b.n	23fd1f2 <_strtod_l+0xaa2>
 23fd1fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 23fd202:	9b04      	ldr	r3, [sp, #16]
 23fd204:	2b00      	cmp	r3, #0
 23fd206:	d1a8      	bne.n	23fd15a <_strtod_l+0xa0a>
 23fd208:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23fd20c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fd20e:	0d1b      	lsrs	r3, r3, #20
 23fd210:	051b      	lsls	r3, r3, #20
 23fd212:	429a      	cmp	r2, r3
 23fd214:	d1a1      	bne.n	23fd15a <_strtod_l+0xa0a>
 23fd216:	4640      	mov	r0, r8
 23fd218:	4649      	mov	r1, r9
 23fd21a:	f7f9 f875 	bl	23f6308 <__aeabi_d2lz>
 23fd21e:	f7f8 fcad 	bl	23f5b7c <__aeabi_l2d>
 23fd222:	4602      	mov	r2, r0
 23fd224:	460b      	mov	r3, r1
 23fd226:	4640      	mov	r0, r8
 23fd228:	4649      	mov	r1, r9
 23fd22a:	f7f8 fb1d 	bl	23f5868 <__aeabi_dsub>
 23fd22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23fd232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fd234:	4680      	mov	r8, r0
 23fd236:	ea43 030a 	orr.w	r3, r3, sl
 23fd23a:	4689      	mov	r9, r1
 23fd23c:	4313      	orrs	r3, r2
 23fd23e:	d055      	beq.n	23fd2ec <_strtod_l+0xb9c>
 23fd240:	a335      	add	r3, pc, #212	; (adr r3, 23fd318 <_strtod_l+0xbc8>)
 23fd242:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd246:	f7f8 ff39 	bl	23f60bc <__aeabi_dcmplt>
 23fd24a:	2800      	cmp	r0, #0
 23fd24c:	f47f acd3 	bne.w	23fcbf6 <_strtod_l+0x4a6>
 23fd250:	4640      	mov	r0, r8
 23fd252:	4649      	mov	r1, r9
 23fd254:	a332      	add	r3, pc, #200	; (adr r3, 23fd320 <_strtod_l+0xbd0>)
 23fd256:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd25a:	f7f8 ff4d 	bl	23f60f8 <__aeabi_dcmpgt>
 23fd25e:	2800      	cmp	r0, #0
 23fd260:	f43f af7b 	beq.w	23fd15a <_strtod_l+0xa0a>
 23fd264:	e4c7      	b.n	23fcbf6 <_strtod_l+0x4a6>
 23fd266:	9b04      	ldr	r3, [sp, #16]
 23fd268:	b333      	cbz	r3, 23fd2b8 <_strtod_l+0xb68>
 23fd26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fd26c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23fd270:	d822      	bhi.n	23fd2b8 <_strtod_l+0xb68>
 23fd272:	4640      	mov	r0, r8
 23fd274:	4649      	mov	r1, r9
 23fd276:	a32c      	add	r3, pc, #176	; (adr r3, 23fd328 <_strtod_l+0xbd8>)
 23fd278:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd27c:	f7f8 ff28 	bl	23f60d0 <__aeabi_dcmple>
 23fd280:	b1a0      	cbz	r0, 23fd2ac <_strtod_l+0xb5c>
 23fd282:	4649      	mov	r1, r9
 23fd284:	4640      	mov	r0, r8
 23fd286:	f7f8 ff7f 	bl	23f6188 <__aeabi_d2uiz>
 23fd28a:	2801      	cmp	r0, #1
 23fd28c:	bf38      	it	cc
 23fd28e:	2001      	movcc	r0, #1
 23fd290:	f7f8 fc28 	bl	23f5ae4 <__aeabi_ui2d>
 23fd294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fd296:	4680      	mov	r8, r0
 23fd298:	4689      	mov	r9, r1
 23fd29a:	bb23      	cbnz	r3, 23fd2e6 <_strtod_l+0xb96>
 23fd29c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23fd2a0:	9010      	str	r0, [sp, #64]	; 0x40
 23fd2a2:	9311      	str	r3, [sp, #68]	; 0x44
 23fd2a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23fd2a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23fd2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23fd2b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 23fd2b4:	1a9b      	subs	r3, r3, r2
 23fd2b6:	9309      	str	r3, [sp, #36]	; 0x24
 23fd2b8:	eeb0 0a48 	vmov.f32	s0, s16
 23fd2bc:	eef0 0a68 	vmov.f32	s1, s17
 23fd2c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd2c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23fd2c8:	f001 f83c 	bl	23fe344 <__ulp>
 23fd2cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23fd2d0:	ec53 2b10 	vmov	r2, r3, d0
 23fd2d4:	f7f8 fc80 	bl	23f5bd8 <__aeabi_dmul>
 23fd2d8:	ec53 2b18 	vmov	r2, r3, d8
 23fd2dc:	f7f8 fac6 	bl	23f586c <__adddf3>
 23fd2e0:	4682      	mov	sl, r0
 23fd2e2:	468b      	mov	fp, r1
 23fd2e4:	e78d      	b.n	23fd202 <_strtod_l+0xab2>
 23fd2e6:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 23fd2ea:	e7db      	b.n	23fd2a4 <_strtod_l+0xb54>
 23fd2ec:	a310      	add	r3, pc, #64	; (adr r3, 23fd330 <_strtod_l+0xbe0>)
 23fd2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd2f2:	f7f8 fee3 	bl	23f60bc <__aeabi_dcmplt>
 23fd2f6:	e7b2      	b.n	23fd25e <_strtod_l+0xb0e>
 23fd2f8:	2300      	movs	r3, #0
 23fd2fa:	930a      	str	r3, [sp, #40]	; 0x28
 23fd2fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23fd2fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23fd300:	6013      	str	r3, [r2, #0]
 23fd302:	f7ff ba6d 	b.w	23fc7e0 <_strtod_l+0x90>
 23fd306:	2a65      	cmp	r2, #101	; 0x65
 23fd308:	f43f ab61 	beq.w	23fc9ce <_strtod_l+0x27e>
 23fd30c:	2a45      	cmp	r2, #69	; 0x45
 23fd30e:	f43f ab5e 	beq.w	23fc9ce <_strtod_l+0x27e>
 23fd312:	2301      	movs	r3, #1
 23fd314:	f7ff bb96 	b.w	23fca44 <_strtod_l+0x2f4>
 23fd318:	94a03595 	.word	0x94a03595
 23fd31c:	3fdfffff 	.word	0x3fdfffff
 23fd320:	35afe535 	.word	0x35afe535
 23fd324:	3fe00000 	.word	0x3fe00000
 23fd328:	ffc00000 	.word	0xffc00000
 23fd32c:	41dfffff 	.word	0x41dfffff
 23fd330:	94a03595 	.word	0x94a03595
 23fd334:	3fcfffff 	.word	0x3fcfffff
 23fd338:	3ff00000 	.word	0x3ff00000
 23fd33c:	7ff00000 	.word	0x7ff00000
 23fd340:	7fe00000 	.word	0x7fe00000
 23fd344:	7c9fffff 	.word	0x7c9fffff
 23fd348:	3fe00000 	.word	0x3fe00000
 23fd34c:	bff00000 	.word	0xbff00000
 23fd350:	7fefffff 	.word	0x7fefffff

023fd354 <strtod>:
 23fd354:	460a      	mov	r2, r1
 23fd356:	4601      	mov	r1, r0
 23fd358:	4802      	ldr	r0, [pc, #8]	; (23fd364 <strtod+0x10>)
 23fd35a:	4b03      	ldr	r3, [pc, #12]	; (23fd368 <strtod+0x14>)
 23fd35c:	6800      	ldr	r0, [r0, #0]
 23fd35e:	f7ff b9f7 	b.w	23fc750 <_strtod_l>
 23fd362:	bf00      	nop
 23fd364:	1007a498 	.word	0x1007a498
 23fd368:	1007a504 	.word	0x1007a504

023fd36c <_strtol_l.constprop.0>:
 23fd36c:	2b01      	cmp	r3, #1
 23fd36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd372:	d001      	beq.n	23fd378 <_strtol_l.constprop.0+0xc>
 23fd374:	2b24      	cmp	r3, #36	; 0x24
 23fd376:	d906      	bls.n	23fd386 <_strtol_l.constprop.0+0x1a>
 23fd378:	f7fc ff42 	bl	23fa200 <__errno>
 23fd37c:	2316      	movs	r3, #22
 23fd37e:	6003      	str	r3, [r0, #0]
 23fd380:	2000      	movs	r0, #0
 23fd382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fd386:	460d      	mov	r5, r1
 23fd388:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fd46c <_strtol_l.constprop.0+0x100>
 23fd38c:	462e      	mov	r6, r5
 23fd38e:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fd392:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fd396:	f017 0708 	ands.w	r7, r7, #8
 23fd39a:	d1f7      	bne.n	23fd38c <_strtol_l.constprop.0+0x20>
 23fd39c:	2c2d      	cmp	r4, #45	; 0x2d
 23fd39e:	d132      	bne.n	23fd406 <_strtol_l.constprop.0+0x9a>
 23fd3a0:	782c      	ldrb	r4, [r5, #0]
 23fd3a2:	2701      	movs	r7, #1
 23fd3a4:	1cb5      	adds	r5, r6, #2
 23fd3a6:	2b00      	cmp	r3, #0
 23fd3a8:	d05b      	beq.n	23fd462 <_strtol_l.constprop.0+0xf6>
 23fd3aa:	2b10      	cmp	r3, #16
 23fd3ac:	d109      	bne.n	23fd3c2 <_strtol_l.constprop.0+0x56>
 23fd3ae:	2c30      	cmp	r4, #48	; 0x30
 23fd3b0:	d107      	bne.n	23fd3c2 <_strtol_l.constprop.0+0x56>
 23fd3b2:	782c      	ldrb	r4, [r5, #0]
 23fd3b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fd3b8:	2c58      	cmp	r4, #88	; 0x58
 23fd3ba:	d14d      	bne.n	23fd458 <_strtol_l.constprop.0+0xec>
 23fd3bc:	786c      	ldrb	r4, [r5, #1]
 23fd3be:	2310      	movs	r3, #16
 23fd3c0:	3502      	adds	r5, #2
 23fd3c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fd3c6:	f04f 0c00 	mov.w	ip, #0
 23fd3ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23fd3ce:	4666      	mov	r6, ip
 23fd3d0:	fbb8 f9f3 	udiv	r9, r8, r3
 23fd3d4:	fb03 8a19 	mls	sl, r3, r9, r8
 23fd3d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fd3dc:	f1be 0f09 	cmp.w	lr, #9
 23fd3e0:	d816      	bhi.n	23fd410 <_strtol_l.constprop.0+0xa4>
 23fd3e2:	4674      	mov	r4, lr
 23fd3e4:	42a3      	cmp	r3, r4
 23fd3e6:	dd24      	ble.n	23fd432 <_strtol_l.constprop.0+0xc6>
 23fd3e8:	f1bc 0f00 	cmp.w	ip, #0
 23fd3ec:	db1e      	blt.n	23fd42c <_strtol_l.constprop.0+0xc0>
 23fd3ee:	45b1      	cmp	r9, r6
 23fd3f0:	d31c      	bcc.n	23fd42c <_strtol_l.constprop.0+0xc0>
 23fd3f2:	d101      	bne.n	23fd3f8 <_strtol_l.constprop.0+0x8c>
 23fd3f4:	45a2      	cmp	sl, r4
 23fd3f6:	db19      	blt.n	23fd42c <_strtol_l.constprop.0+0xc0>
 23fd3f8:	fb06 4603 	mla	r6, r6, r3, r4
 23fd3fc:	f04f 0c01 	mov.w	ip, #1
 23fd400:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fd404:	e7e8      	b.n	23fd3d8 <_strtol_l.constprop.0+0x6c>
 23fd406:	2c2b      	cmp	r4, #43	; 0x2b
 23fd408:	bf04      	itt	eq
 23fd40a:	782c      	ldrbeq	r4, [r5, #0]
 23fd40c:	1cb5      	addeq	r5, r6, #2
 23fd40e:	e7ca      	b.n	23fd3a6 <_strtol_l.constprop.0+0x3a>
 23fd410:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fd414:	f1be 0f19 	cmp.w	lr, #25
 23fd418:	d801      	bhi.n	23fd41e <_strtol_l.constprop.0+0xb2>
 23fd41a:	3c37      	subs	r4, #55	; 0x37
 23fd41c:	e7e2      	b.n	23fd3e4 <_strtol_l.constprop.0+0x78>
 23fd41e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fd422:	f1be 0f19 	cmp.w	lr, #25
 23fd426:	d804      	bhi.n	23fd432 <_strtol_l.constprop.0+0xc6>
 23fd428:	3c57      	subs	r4, #87	; 0x57
 23fd42a:	e7db      	b.n	23fd3e4 <_strtol_l.constprop.0+0x78>
 23fd42c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fd430:	e7e6      	b.n	23fd400 <_strtol_l.constprop.0+0x94>
 23fd432:	f1bc 0f00 	cmp.w	ip, #0
 23fd436:	da05      	bge.n	23fd444 <_strtol_l.constprop.0+0xd8>
 23fd438:	2322      	movs	r3, #34	; 0x22
 23fd43a:	4646      	mov	r6, r8
 23fd43c:	6003      	str	r3, [r0, #0]
 23fd43e:	b942      	cbnz	r2, 23fd452 <_strtol_l.constprop.0+0xe6>
 23fd440:	4630      	mov	r0, r6
 23fd442:	e79e      	b.n	23fd382 <_strtol_l.constprop.0+0x16>
 23fd444:	b107      	cbz	r7, 23fd448 <_strtol_l.constprop.0+0xdc>
 23fd446:	4276      	negs	r6, r6
 23fd448:	2a00      	cmp	r2, #0
 23fd44a:	d0f9      	beq.n	23fd440 <_strtol_l.constprop.0+0xd4>
 23fd44c:	f1bc 0f00 	cmp.w	ip, #0
 23fd450:	d000      	beq.n	23fd454 <_strtol_l.constprop.0+0xe8>
 23fd452:	1e69      	subs	r1, r5, #1
 23fd454:	6011      	str	r1, [r2, #0]
 23fd456:	e7f3      	b.n	23fd440 <_strtol_l.constprop.0+0xd4>
 23fd458:	2430      	movs	r4, #48	; 0x30
 23fd45a:	2b00      	cmp	r3, #0
 23fd45c:	d1b1      	bne.n	23fd3c2 <_strtol_l.constprop.0+0x56>
 23fd45e:	2308      	movs	r3, #8
 23fd460:	e7af      	b.n	23fd3c2 <_strtol_l.constprop.0+0x56>
 23fd462:	2c30      	cmp	r4, #48	; 0x30
 23fd464:	d0a5      	beq.n	23fd3b2 <_strtol_l.constprop.0+0x46>
 23fd466:	230a      	movs	r3, #10
 23fd468:	e7ab      	b.n	23fd3c2 <_strtol_l.constprop.0+0x56>
 23fd46a:	bf00      	nop
 23fd46c:	023ffce9 	.word	0x023ffce9

023fd470 <strtol>:
 23fd470:	4613      	mov	r3, r2
 23fd472:	460a      	mov	r2, r1
 23fd474:	4601      	mov	r1, r0
 23fd476:	4802      	ldr	r0, [pc, #8]	; (23fd480 <strtol+0x10>)
 23fd478:	6800      	ldr	r0, [r0, #0]
 23fd47a:	f7ff bf77 	b.w	23fd36c <_strtol_l.constprop.0>
 23fd47e:	bf00      	nop
 23fd480:	1007a498 	.word	0x1007a498

023fd484 <__register_exitproc>:
 23fd484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fd488:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fd548 <__register_exitproc+0xc4>
 23fd48c:	4606      	mov	r6, r0
 23fd48e:	461f      	mov	r7, r3
 23fd490:	460d      	mov	r5, r1
 23fd492:	f8d8 0000 	ldr.w	r0, [r8]
 23fd496:	4691      	mov	r9, r2
 23fd498:	f000 fbc6 	bl	23fdc28 <__retarget_lock_acquire_recursive>
 23fd49c:	4b26      	ldr	r3, [pc, #152]	; (23fd538 <__register_exitproc+0xb4>)
 23fd49e:	681c      	ldr	r4, [r3, #0]
 23fd4a0:	b934      	cbnz	r4, 23fd4b0 <__register_exitproc+0x2c>
 23fd4a2:	4c26      	ldr	r4, [pc, #152]	; (23fd53c <__register_exitproc+0xb8>)
 23fd4a4:	601c      	str	r4, [r3, #0]
 23fd4a6:	4b26      	ldr	r3, [pc, #152]	; (23fd540 <__register_exitproc+0xbc>)
 23fd4a8:	b113      	cbz	r3, 23fd4b0 <__register_exitproc+0x2c>
 23fd4aa:	681b      	ldr	r3, [r3, #0]
 23fd4ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fd4b0:	6863      	ldr	r3, [r4, #4]
 23fd4b2:	2b1f      	cmp	r3, #31
 23fd4b4:	dd07      	ble.n	23fd4c6 <__register_exitproc+0x42>
 23fd4b6:	f8d8 0000 	ldr.w	r0, [r8]
 23fd4ba:	f000 fbb7 	bl	23fdc2c <__retarget_lock_release_recursive>
 23fd4be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fd4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fd4c6:	b35e      	cbz	r6, 23fd520 <__register_exitproc+0x9c>
 23fd4c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fd4cc:	b988      	cbnz	r0, 23fd4f2 <__register_exitproc+0x6e>
 23fd4ce:	4b1d      	ldr	r3, [pc, #116]	; (23fd544 <__register_exitproc+0xc0>)
 23fd4d0:	b923      	cbnz	r3, 23fd4dc <__register_exitproc+0x58>
 23fd4d2:	f8d8 0000 	ldr.w	r0, [r8]
 23fd4d6:	f000 fba8 	bl	23fdc2a <__retarget_lock_release>
 23fd4da:	e7f0      	b.n	23fd4be <__register_exitproc+0x3a>
 23fd4dc:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fd4e0:	f7fc fe2c 	bl	23fa13c <malloc>
 23fd4e4:	2800      	cmp	r0, #0
 23fd4e6:	d0f4      	beq.n	23fd4d2 <__register_exitproc+0x4e>
 23fd4e8:	2300      	movs	r3, #0
 23fd4ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fd4ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fd4f2:	6863      	ldr	r3, [r4, #4]
 23fd4f4:	2201      	movs	r2, #1
 23fd4f6:	2e02      	cmp	r6, #2
 23fd4f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fd4fc:	fa02 f203 	lsl.w	r2, r2, r3
 23fd500:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fd504:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fd508:	ea43 0302 	orr.w	r3, r3, r2
 23fd50c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fd510:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fd514:	bf02      	ittt	eq
 23fd516:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fd51a:	4313      	orreq	r3, r2
 23fd51c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fd520:	6863      	ldr	r3, [r4, #4]
 23fd522:	f8d8 0000 	ldr.w	r0, [r8]
 23fd526:	1c5a      	adds	r2, r3, #1
 23fd528:	3302      	adds	r3, #2
 23fd52a:	6062      	str	r2, [r4, #4]
 23fd52c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fd530:	f000 fb7c 	bl	23fdc2c <__retarget_lock_release_recursive>
 23fd534:	2000      	movs	r0, #0
 23fd536:	e7c4      	b.n	23fd4c2 <__register_exitproc+0x3e>
 23fd538:	1007aff4 	.word	0x1007aff4
 23fd53c:	1007af68 	.word	0x1007af68
 23fd540:	00000000 	.word	0x00000000
 23fd544:	023fa13d 	.word	0x023fa13d
 23fd548:	1007a4fc 	.word	0x1007a4fc

023fd54c <rshift>:
 23fd54c:	6903      	ldr	r3, [r0, #16]
 23fd54e:	114a      	asrs	r2, r1, #5
 23fd550:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 23fd554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd558:	f100 0414 	add.w	r4, r0, #20
 23fd55c:	dd45      	ble.n	23fd5ea <rshift+0x9e>
 23fd55e:	f011 011f 	ands.w	r1, r1, #31
 23fd562:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 23fd566:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 23fd56a:	d10c      	bne.n	23fd586 <rshift+0x3a>
 23fd56c:	f100 0710 	add.w	r7, r0, #16
 23fd570:	4629      	mov	r1, r5
 23fd572:	42b1      	cmp	r1, r6
 23fd574:	d334      	bcc.n	23fd5e0 <rshift+0x94>
 23fd576:	1a9b      	subs	r3, r3, r2
 23fd578:	1eea      	subs	r2, r5, #3
 23fd57a:	009b      	lsls	r3, r3, #2
 23fd57c:	4296      	cmp	r6, r2
 23fd57e:	bf38      	it	cc
 23fd580:	2300      	movcc	r3, #0
 23fd582:	4423      	add	r3, r4
 23fd584:	e015      	b.n	23fd5b2 <rshift+0x66>
 23fd586:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 23fd58a:	f1c1 0820 	rsb	r8, r1, #32
 23fd58e:	f105 0e04 	add.w	lr, r5, #4
 23fd592:	46a1      	mov	r9, r4
 23fd594:	40cf      	lsrs	r7, r1
 23fd596:	4576      	cmp	r6, lr
 23fd598:	46f4      	mov	ip, lr
 23fd59a:	d815      	bhi.n	23fd5c8 <rshift+0x7c>
 23fd59c:	1a9a      	subs	r2, r3, r2
 23fd59e:	3501      	adds	r5, #1
 23fd5a0:	0092      	lsls	r2, r2, #2
 23fd5a2:	3a04      	subs	r2, #4
 23fd5a4:	42ae      	cmp	r6, r5
 23fd5a6:	bf38      	it	cc
 23fd5a8:	2200      	movcc	r2, #0
 23fd5aa:	18a3      	adds	r3, r4, r2
 23fd5ac:	50a7      	str	r7, [r4, r2]
 23fd5ae:	b107      	cbz	r7, 23fd5b2 <rshift+0x66>
 23fd5b0:	3304      	adds	r3, #4
 23fd5b2:	1b1a      	subs	r2, r3, r4
 23fd5b4:	42a3      	cmp	r3, r4
 23fd5b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 23fd5ba:	bf08      	it	eq
 23fd5bc:	2300      	moveq	r3, #0
 23fd5be:	6102      	str	r2, [r0, #16]
 23fd5c0:	bf08      	it	eq
 23fd5c2:	6143      	streq	r3, [r0, #20]
 23fd5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd5c8:	f8dc c000 	ldr.w	ip, [ip]
 23fd5cc:	fa0c fc08 	lsl.w	ip, ip, r8
 23fd5d0:	ea4c 0707 	orr.w	r7, ip, r7
 23fd5d4:	f849 7b04 	str.w	r7, [r9], #4
 23fd5d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 23fd5dc:	40cf      	lsrs	r7, r1
 23fd5de:	e7da      	b.n	23fd596 <rshift+0x4a>
 23fd5e0:	f851 cb04 	ldr.w	ip, [r1], #4
 23fd5e4:	f847 cf04 	str.w	ip, [r7, #4]!
 23fd5e8:	e7c3      	b.n	23fd572 <rshift+0x26>
 23fd5ea:	4623      	mov	r3, r4
 23fd5ec:	e7e1      	b.n	23fd5b2 <rshift+0x66>

023fd5ee <__hexdig_fun>:
 23fd5ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fd5f2:	2b09      	cmp	r3, #9
 23fd5f4:	d802      	bhi.n	23fd5fc <__hexdig_fun+0xe>
 23fd5f6:	3820      	subs	r0, #32
 23fd5f8:	b2c0      	uxtb	r0, r0
 23fd5fa:	4770      	bx	lr
 23fd5fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fd600:	2b05      	cmp	r3, #5
 23fd602:	d801      	bhi.n	23fd608 <__hexdig_fun+0x1a>
 23fd604:	3847      	subs	r0, #71	; 0x47
 23fd606:	e7f7      	b.n	23fd5f8 <__hexdig_fun+0xa>
 23fd608:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fd60c:	2b05      	cmp	r3, #5
 23fd60e:	d801      	bhi.n	23fd614 <__hexdig_fun+0x26>
 23fd610:	3827      	subs	r0, #39	; 0x27
 23fd612:	e7f1      	b.n	23fd5f8 <__hexdig_fun+0xa>
 23fd614:	2000      	movs	r0, #0
 23fd616:	4770      	bx	lr

023fd618 <__gethex>:
 23fd618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd61c:	ed2d 8b02 	vpush	{d8}
 23fd620:	b089      	sub	sp, #36	; 0x24
 23fd622:	ee08 0a10 	vmov	s16, r0
 23fd626:	468b      	mov	fp, r1
 23fd628:	4690      	mov	r8, r2
 23fd62a:	9304      	str	r3, [sp, #16]
 23fd62c:	4bb2      	ldr	r3, [pc, #712]	; (23fd8f8 <__gethex+0x2e0>)
 23fd62e:	681b      	ldr	r3, [r3, #0]
 23fd630:	4618      	mov	r0, r3
 23fd632:	9301      	str	r3, [sp, #4]
 23fd634:	f7f9 f820 	bl	23f6678 <strlen>
 23fd638:	9b01      	ldr	r3, [sp, #4]
 23fd63a:	f8db 2000 	ldr.w	r2, [fp]
 23fd63e:	4682      	mov	sl, r0
 23fd640:	4403      	add	r3, r0
 23fd642:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23fd646:	9305      	str	r3, [sp, #20]
 23fd648:	1c93      	adds	r3, r2, #2
 23fd64a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 23fd64e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 23fd652:	32fe      	adds	r2, #254	; 0xfe
 23fd654:	18d1      	adds	r1, r2, r3
 23fd656:	461f      	mov	r7, r3
 23fd658:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd65c:	9100      	str	r1, [sp, #0]
 23fd65e:	2830      	cmp	r0, #48	; 0x30
 23fd660:	d0f8      	beq.n	23fd654 <__gethex+0x3c>
 23fd662:	f7ff ffc4 	bl	23fd5ee <__hexdig_fun>
 23fd666:	4604      	mov	r4, r0
 23fd668:	2800      	cmp	r0, #0
 23fd66a:	d139      	bne.n	23fd6e0 <__gethex+0xc8>
 23fd66c:	4652      	mov	r2, sl
 23fd66e:	9901      	ldr	r1, [sp, #4]
 23fd670:	4638      	mov	r0, r7
 23fd672:	f7ff f826 	bl	23fc6c2 <strncmp>
 23fd676:	4605      	mov	r5, r0
 23fd678:	2800      	cmp	r0, #0
 23fd67a:	d167      	bne.n	23fd74c <__gethex+0x134>
 23fd67c:	f817 000a 	ldrb.w	r0, [r7, sl]
 23fd680:	eb07 060a 	add.w	r6, r7, sl
 23fd684:	f7ff ffb3 	bl	23fd5ee <__hexdig_fun>
 23fd688:	2800      	cmp	r0, #0
 23fd68a:	d061      	beq.n	23fd750 <__gethex+0x138>
 23fd68c:	4633      	mov	r3, r6
 23fd68e:	7818      	ldrb	r0, [r3, #0]
 23fd690:	461f      	mov	r7, r3
 23fd692:	3301      	adds	r3, #1
 23fd694:	2830      	cmp	r0, #48	; 0x30
 23fd696:	d0fa      	beq.n	23fd68e <__gethex+0x76>
 23fd698:	f7ff ffa9 	bl	23fd5ee <__hexdig_fun>
 23fd69c:	fab0 f480 	clz	r4, r0
 23fd6a0:	2301      	movs	r3, #1
 23fd6a2:	4635      	mov	r5, r6
 23fd6a4:	0964      	lsrs	r4, r4, #5
 23fd6a6:	9300      	str	r3, [sp, #0]
 23fd6a8:	463a      	mov	r2, r7
 23fd6aa:	4616      	mov	r6, r2
 23fd6ac:	3201      	adds	r2, #1
 23fd6ae:	7830      	ldrb	r0, [r6, #0]
 23fd6b0:	f7ff ff9d 	bl	23fd5ee <__hexdig_fun>
 23fd6b4:	2800      	cmp	r0, #0
 23fd6b6:	d1f8      	bne.n	23fd6aa <__gethex+0x92>
 23fd6b8:	4652      	mov	r2, sl
 23fd6ba:	9901      	ldr	r1, [sp, #4]
 23fd6bc:	4630      	mov	r0, r6
 23fd6be:	f7ff f800 	bl	23fc6c2 <strncmp>
 23fd6c2:	b980      	cbnz	r0, 23fd6e6 <__gethex+0xce>
 23fd6c4:	b94d      	cbnz	r5, 23fd6da <__gethex+0xc2>
 23fd6c6:	eb06 050a 	add.w	r5, r6, sl
 23fd6ca:	462a      	mov	r2, r5
 23fd6cc:	4616      	mov	r6, r2
 23fd6ce:	3201      	adds	r2, #1
 23fd6d0:	7830      	ldrb	r0, [r6, #0]
 23fd6d2:	f7ff ff8c 	bl	23fd5ee <__hexdig_fun>
 23fd6d6:	2800      	cmp	r0, #0
 23fd6d8:	d1f8      	bne.n	23fd6cc <__gethex+0xb4>
 23fd6da:	1bad      	subs	r5, r5, r6
 23fd6dc:	00ad      	lsls	r5, r5, #2
 23fd6de:	e004      	b.n	23fd6ea <__gethex+0xd2>
 23fd6e0:	2400      	movs	r4, #0
 23fd6e2:	4625      	mov	r5, r4
 23fd6e4:	e7e0      	b.n	23fd6a8 <__gethex+0x90>
 23fd6e6:	2d00      	cmp	r5, #0
 23fd6e8:	d1f7      	bne.n	23fd6da <__gethex+0xc2>
 23fd6ea:	7833      	ldrb	r3, [r6, #0]
 23fd6ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23fd6f0:	2b50      	cmp	r3, #80	; 0x50
 23fd6f2:	d13b      	bne.n	23fd76c <__gethex+0x154>
 23fd6f4:	7873      	ldrb	r3, [r6, #1]
 23fd6f6:	2b2b      	cmp	r3, #43	; 0x2b
 23fd6f8:	d02c      	beq.n	23fd754 <__gethex+0x13c>
 23fd6fa:	2b2d      	cmp	r3, #45	; 0x2d
 23fd6fc:	d02e      	beq.n	23fd75c <__gethex+0x144>
 23fd6fe:	1c71      	adds	r1, r6, #1
 23fd700:	f04f 0900 	mov.w	r9, #0
 23fd704:	7808      	ldrb	r0, [r1, #0]
 23fd706:	f7ff ff72 	bl	23fd5ee <__hexdig_fun>
 23fd70a:	1e43      	subs	r3, r0, #1
 23fd70c:	b2db      	uxtb	r3, r3
 23fd70e:	2b18      	cmp	r3, #24
 23fd710:	d82c      	bhi.n	23fd76c <__gethex+0x154>
 23fd712:	f1a0 0210 	sub.w	r2, r0, #16
 23fd716:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 23fd71a:	f7ff ff68 	bl	23fd5ee <__hexdig_fun>
 23fd71e:	1e43      	subs	r3, r0, #1
 23fd720:	b2db      	uxtb	r3, r3
 23fd722:	2b18      	cmp	r3, #24
 23fd724:	d91d      	bls.n	23fd762 <__gethex+0x14a>
 23fd726:	f1b9 0f00 	cmp.w	r9, #0
 23fd72a:	d000      	beq.n	23fd72e <__gethex+0x116>
 23fd72c:	4252      	negs	r2, r2
 23fd72e:	4415      	add	r5, r2
 23fd730:	f8cb 1000 	str.w	r1, [fp]
 23fd734:	b1e4      	cbz	r4, 23fd770 <__gethex+0x158>
 23fd736:	9b00      	ldr	r3, [sp, #0]
 23fd738:	2b00      	cmp	r3, #0
 23fd73a:	bf14      	ite	ne
 23fd73c:	2700      	movne	r7, #0
 23fd73e:	2706      	moveq	r7, #6
 23fd740:	4638      	mov	r0, r7
 23fd742:	b009      	add	sp, #36	; 0x24
 23fd744:	ecbd 8b02 	vpop	{d8}
 23fd748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd74c:	463e      	mov	r6, r7
 23fd74e:	4625      	mov	r5, r4
 23fd750:	2401      	movs	r4, #1
 23fd752:	e7ca      	b.n	23fd6ea <__gethex+0xd2>
 23fd754:	f04f 0900 	mov.w	r9, #0
 23fd758:	1cb1      	adds	r1, r6, #2
 23fd75a:	e7d3      	b.n	23fd704 <__gethex+0xec>
 23fd75c:	f04f 0901 	mov.w	r9, #1
 23fd760:	e7fa      	b.n	23fd758 <__gethex+0x140>
 23fd762:	230a      	movs	r3, #10
 23fd764:	fb03 0202 	mla	r2, r3, r2, r0
 23fd768:	3a10      	subs	r2, #16
 23fd76a:	e7d4      	b.n	23fd716 <__gethex+0xfe>
 23fd76c:	4631      	mov	r1, r6
 23fd76e:	e7df      	b.n	23fd730 <__gethex+0x118>
 23fd770:	1bf3      	subs	r3, r6, r7
 23fd772:	4621      	mov	r1, r4
 23fd774:	3b01      	subs	r3, #1
 23fd776:	2b07      	cmp	r3, #7
 23fd778:	dc0b      	bgt.n	23fd792 <__gethex+0x17a>
 23fd77a:	ee18 0a10 	vmov	r0, s16
 23fd77e:	f000 fa69 	bl	23fdc54 <_Balloc>
 23fd782:	4604      	mov	r4, r0
 23fd784:	b940      	cbnz	r0, 23fd798 <__gethex+0x180>
 23fd786:	4b5d      	ldr	r3, [pc, #372]	; (23fd8fc <__gethex+0x2e4>)
 23fd788:	4602      	mov	r2, r0
 23fd78a:	21de      	movs	r1, #222	; 0xde
 23fd78c:	485c      	ldr	r0, [pc, #368]	; (23fd900 <__gethex+0x2e8>)
 23fd78e:	f7fc fd45 	bl	23fa21c <__assert_func>
 23fd792:	3101      	adds	r1, #1
 23fd794:	105b      	asrs	r3, r3, #1
 23fd796:	e7ee      	b.n	23fd776 <__gethex+0x15e>
 23fd798:	f100 0914 	add.w	r9, r0, #20
 23fd79c:	f04f 0b00 	mov.w	fp, #0
 23fd7a0:	f1ca 0301 	rsb	r3, sl, #1
 23fd7a4:	f8cd 9008 	str.w	r9, [sp, #8]
 23fd7a8:	f8cd b000 	str.w	fp, [sp]
 23fd7ac:	9306      	str	r3, [sp, #24]
 23fd7ae:	42b7      	cmp	r7, r6
 23fd7b0:	d340      	bcc.n	23fd834 <__gethex+0x21c>
 23fd7b2:	9802      	ldr	r0, [sp, #8]
 23fd7b4:	9b00      	ldr	r3, [sp, #0]
 23fd7b6:	f840 3b04 	str.w	r3, [r0], #4
 23fd7ba:	eba0 0009 	sub.w	r0, r0, r9
 23fd7be:	1080      	asrs	r0, r0, #2
 23fd7c0:	0146      	lsls	r6, r0, #5
 23fd7c2:	6120      	str	r0, [r4, #16]
 23fd7c4:	4618      	mov	r0, r3
 23fd7c6:	f000 fb39 	bl	23fde3c <__hi0bits>
 23fd7ca:	1a30      	subs	r0, r6, r0
 23fd7cc:	f8d8 6000 	ldr.w	r6, [r8]
 23fd7d0:	42b0      	cmp	r0, r6
 23fd7d2:	dd63      	ble.n	23fd89c <__gethex+0x284>
 23fd7d4:	1b87      	subs	r7, r0, r6
 23fd7d6:	4620      	mov	r0, r4
 23fd7d8:	4639      	mov	r1, r7
 23fd7da:	f000 fedf 	bl	23fe59c <__any_on>
 23fd7de:	4682      	mov	sl, r0
 23fd7e0:	b1a8      	cbz	r0, 23fd80e <__gethex+0x1f6>
 23fd7e2:	1e7b      	subs	r3, r7, #1
 23fd7e4:	f04f 0a01 	mov.w	sl, #1
 23fd7e8:	1159      	asrs	r1, r3, #5
 23fd7ea:	f003 021f 	and.w	r2, r3, #31
 23fd7ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 23fd7f2:	fa0a f202 	lsl.w	r2, sl, r2
 23fd7f6:	420a      	tst	r2, r1
 23fd7f8:	d009      	beq.n	23fd80e <__gethex+0x1f6>
 23fd7fa:	4553      	cmp	r3, sl
 23fd7fc:	dd05      	ble.n	23fd80a <__gethex+0x1f2>
 23fd7fe:	1eb9      	subs	r1, r7, #2
 23fd800:	4620      	mov	r0, r4
 23fd802:	f000 fecb 	bl	23fe59c <__any_on>
 23fd806:	2800      	cmp	r0, #0
 23fd808:	d145      	bne.n	23fd896 <__gethex+0x27e>
 23fd80a:	f04f 0a02 	mov.w	sl, #2
 23fd80e:	443d      	add	r5, r7
 23fd810:	4639      	mov	r1, r7
 23fd812:	4620      	mov	r0, r4
 23fd814:	f7ff fe9a 	bl	23fd54c <rshift>
 23fd818:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fd81c:	42ab      	cmp	r3, r5
 23fd81e:	da4c      	bge.n	23fd8ba <__gethex+0x2a2>
 23fd820:	4621      	mov	r1, r4
 23fd822:	ee18 0a10 	vmov	r0, s16
 23fd826:	f000 fa55 	bl	23fdcd4 <_Bfree>
 23fd82a:	2300      	movs	r3, #0
 23fd82c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fd82e:	27a3      	movs	r7, #163	; 0xa3
 23fd830:	6013      	str	r3, [r2, #0]
 23fd832:	e785      	b.n	23fd740 <__gethex+0x128>
 23fd834:	1e73      	subs	r3, r6, #1
 23fd836:	9a05      	ldr	r2, [sp, #20]
 23fd838:	9303      	str	r3, [sp, #12]
 23fd83a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 23fd83e:	4293      	cmp	r3, r2
 23fd840:	d019      	beq.n	23fd876 <__gethex+0x25e>
 23fd842:	f1bb 0f20 	cmp.w	fp, #32
 23fd846:	d107      	bne.n	23fd858 <__gethex+0x240>
 23fd848:	9b02      	ldr	r3, [sp, #8]
 23fd84a:	9a00      	ldr	r2, [sp, #0]
 23fd84c:	f843 2b04 	str.w	r2, [r3], #4
 23fd850:	9302      	str	r3, [sp, #8]
 23fd852:	2300      	movs	r3, #0
 23fd854:	469b      	mov	fp, r3
 23fd856:	9300      	str	r3, [sp, #0]
 23fd858:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 23fd85c:	f7ff fec7 	bl	23fd5ee <__hexdig_fun>
 23fd860:	f000 000f 	and.w	r0, r0, #15
 23fd864:	9b00      	ldr	r3, [sp, #0]
 23fd866:	fa00 f00b 	lsl.w	r0, r0, fp
 23fd86a:	f10b 0b04 	add.w	fp, fp, #4
 23fd86e:	4303      	orrs	r3, r0
 23fd870:	9300      	str	r3, [sp, #0]
 23fd872:	9b03      	ldr	r3, [sp, #12]
 23fd874:	e00d      	b.n	23fd892 <__gethex+0x27a>
 23fd876:	9b03      	ldr	r3, [sp, #12]
 23fd878:	9a06      	ldr	r2, [sp, #24]
 23fd87a:	4413      	add	r3, r2
 23fd87c:	42bb      	cmp	r3, r7
 23fd87e:	d3e0      	bcc.n	23fd842 <__gethex+0x22a>
 23fd880:	4618      	mov	r0, r3
 23fd882:	4652      	mov	r2, sl
 23fd884:	9901      	ldr	r1, [sp, #4]
 23fd886:	9307      	str	r3, [sp, #28]
 23fd888:	f7fe ff1b 	bl	23fc6c2 <strncmp>
 23fd88c:	9b07      	ldr	r3, [sp, #28]
 23fd88e:	2800      	cmp	r0, #0
 23fd890:	d1d7      	bne.n	23fd842 <__gethex+0x22a>
 23fd892:	461e      	mov	r6, r3
 23fd894:	e78b      	b.n	23fd7ae <__gethex+0x196>
 23fd896:	f04f 0a03 	mov.w	sl, #3
 23fd89a:	e7b8      	b.n	23fd80e <__gethex+0x1f6>
 23fd89c:	da0a      	bge.n	23fd8b4 <__gethex+0x29c>
 23fd89e:	1a37      	subs	r7, r6, r0
 23fd8a0:	4621      	mov	r1, r4
 23fd8a2:	ee18 0a10 	vmov	r0, s16
 23fd8a6:	463a      	mov	r2, r7
 23fd8a8:	1bed      	subs	r5, r5, r7
 23fd8aa:	f000 fc2f 	bl	23fe10c <__lshift>
 23fd8ae:	4604      	mov	r4, r0
 23fd8b0:	f100 0914 	add.w	r9, r0, #20
 23fd8b4:	f04f 0a00 	mov.w	sl, #0
 23fd8b8:	e7ae      	b.n	23fd818 <__gethex+0x200>
 23fd8ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 23fd8be:	42a8      	cmp	r0, r5
 23fd8c0:	dd72      	ble.n	23fd9a8 <__gethex+0x390>
 23fd8c2:	1b45      	subs	r5, r0, r5
 23fd8c4:	42ae      	cmp	r6, r5
 23fd8c6:	dc35      	bgt.n	23fd934 <__gethex+0x31c>
 23fd8c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fd8cc:	2b02      	cmp	r3, #2
 23fd8ce:	d029      	beq.n	23fd924 <__gethex+0x30c>
 23fd8d0:	2b03      	cmp	r3, #3
 23fd8d2:	d02b      	beq.n	23fd92c <__gethex+0x314>
 23fd8d4:	2b01      	cmp	r3, #1
 23fd8d6:	d11b      	bne.n	23fd910 <__gethex+0x2f8>
 23fd8d8:	42ae      	cmp	r6, r5
 23fd8da:	d119      	bne.n	23fd910 <__gethex+0x2f8>
 23fd8dc:	2e01      	cmp	r6, #1
 23fd8de:	d111      	bne.n	23fd904 <__gethex+0x2ec>
 23fd8e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fd8e4:	2762      	movs	r7, #98	; 0x62
 23fd8e6:	9a04      	ldr	r2, [sp, #16]
 23fd8e8:	6013      	str	r3, [r2, #0]
 23fd8ea:	2301      	movs	r3, #1
 23fd8ec:	6123      	str	r3, [r4, #16]
 23fd8ee:	f8c9 3000 	str.w	r3, [r9]
 23fd8f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fd8f4:	601c      	str	r4, [r3, #0]
 23fd8f6:	e723      	b.n	23fd740 <__gethex+0x128>
 23fd8f8:	023ffe5c 	.word	0x023ffe5c
 23fd8fc:	023ffde9 	.word	0x023ffde9
 23fd900:	023ffdfa 	.word	0x023ffdfa
 23fd904:	1e71      	subs	r1, r6, #1
 23fd906:	4620      	mov	r0, r4
 23fd908:	f000 fe48 	bl	23fe59c <__any_on>
 23fd90c:	2800      	cmp	r0, #0
 23fd90e:	d1e7      	bne.n	23fd8e0 <__gethex+0x2c8>
 23fd910:	4621      	mov	r1, r4
 23fd912:	ee18 0a10 	vmov	r0, s16
 23fd916:	f000 f9dd 	bl	23fdcd4 <_Bfree>
 23fd91a:	2300      	movs	r3, #0
 23fd91c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fd91e:	2750      	movs	r7, #80	; 0x50
 23fd920:	6013      	str	r3, [r2, #0]
 23fd922:	e70d      	b.n	23fd740 <__gethex+0x128>
 23fd924:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fd926:	2b00      	cmp	r3, #0
 23fd928:	d1f2      	bne.n	23fd910 <__gethex+0x2f8>
 23fd92a:	e7d9      	b.n	23fd8e0 <__gethex+0x2c8>
 23fd92c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fd92e:	2b00      	cmp	r3, #0
 23fd930:	d1d6      	bne.n	23fd8e0 <__gethex+0x2c8>
 23fd932:	e7ed      	b.n	23fd910 <__gethex+0x2f8>
 23fd934:	1e6f      	subs	r7, r5, #1
 23fd936:	f1ba 0f00 	cmp.w	sl, #0
 23fd93a:	d132      	bne.n	23fd9a2 <__gethex+0x38a>
 23fd93c:	b127      	cbz	r7, 23fd948 <__gethex+0x330>
 23fd93e:	4639      	mov	r1, r7
 23fd940:	4620      	mov	r0, r4
 23fd942:	f000 fe2b 	bl	23fe59c <__any_on>
 23fd946:	4682      	mov	sl, r0
 23fd948:	117b      	asrs	r3, r7, #5
 23fd94a:	2101      	movs	r1, #1
 23fd94c:	f007 071f 	and.w	r7, r7, #31
 23fd950:	4620      	mov	r0, r4
 23fd952:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 23fd956:	1b76      	subs	r6, r6, r5
 23fd958:	fa01 f707 	lsl.w	r7, r1, r7
 23fd95c:	4629      	mov	r1, r5
 23fd95e:	421f      	tst	r7, r3
 23fd960:	f04f 0702 	mov.w	r7, #2
 23fd964:	bf18      	it	ne
 23fd966:	f04a 0a02 	orrne.w	sl, sl, #2
 23fd96a:	f7ff fdef 	bl	23fd54c <rshift>
 23fd96e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23fd972:	f1ba 0f00 	cmp.w	sl, #0
 23fd976:	d048      	beq.n	23fda0a <__gethex+0x3f2>
 23fd978:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fd97c:	2b02      	cmp	r3, #2
 23fd97e:	d015      	beq.n	23fd9ac <__gethex+0x394>
 23fd980:	2b03      	cmp	r3, #3
 23fd982:	d017      	beq.n	23fd9b4 <__gethex+0x39c>
 23fd984:	2b01      	cmp	r3, #1
 23fd986:	d109      	bne.n	23fd99c <__gethex+0x384>
 23fd988:	f01a 0f02 	tst.w	sl, #2
 23fd98c:	d006      	beq.n	23fd99c <__gethex+0x384>
 23fd98e:	f8d9 0000 	ldr.w	r0, [r9]
 23fd992:	ea4a 0a00 	orr.w	sl, sl, r0
 23fd996:	f01a 0f01 	tst.w	sl, #1
 23fd99a:	d10e      	bne.n	23fd9ba <__gethex+0x3a2>
 23fd99c:	f047 0710 	orr.w	r7, r7, #16
 23fd9a0:	e033      	b.n	23fda0a <__gethex+0x3f2>
 23fd9a2:	f04f 0a01 	mov.w	sl, #1
 23fd9a6:	e7cf      	b.n	23fd948 <__gethex+0x330>
 23fd9a8:	2701      	movs	r7, #1
 23fd9aa:	e7e2      	b.n	23fd972 <__gethex+0x35a>
 23fd9ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fd9ae:	f1c3 0301 	rsb	r3, r3, #1
 23fd9b2:	9315      	str	r3, [sp, #84]	; 0x54
 23fd9b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fd9b6:	2b00      	cmp	r3, #0
 23fd9b8:	d0f0      	beq.n	23fd99c <__gethex+0x384>
 23fd9ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 23fd9be:	f104 0314 	add.w	r3, r4, #20
 23fd9c2:	f04f 0c00 	mov.w	ip, #0
 23fd9c6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 23fd9ca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 23fd9ce:	4618      	mov	r0, r3
 23fd9d0:	f853 2b04 	ldr.w	r2, [r3], #4
 23fd9d4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 23fd9d8:	d01c      	beq.n	23fda14 <__gethex+0x3fc>
 23fd9da:	3201      	adds	r2, #1
 23fd9dc:	6002      	str	r2, [r0, #0]
 23fd9de:	2f02      	cmp	r7, #2
 23fd9e0:	f104 0314 	add.w	r3, r4, #20
 23fd9e4:	d13f      	bne.n	23fda66 <__gethex+0x44e>
 23fd9e6:	f8d8 2000 	ldr.w	r2, [r8]
 23fd9ea:	3a01      	subs	r2, #1
 23fd9ec:	42b2      	cmp	r2, r6
 23fd9ee:	d10a      	bne.n	23fda06 <__gethex+0x3ee>
 23fd9f0:	1171      	asrs	r1, r6, #5
 23fd9f2:	2201      	movs	r2, #1
 23fd9f4:	f006 061f 	and.w	r6, r6, #31
 23fd9f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23fd9fc:	fa02 f606 	lsl.w	r6, r2, r6
 23fda00:	421e      	tst	r6, r3
 23fda02:	bf18      	it	ne
 23fda04:	4617      	movne	r7, r2
 23fda06:	f047 0720 	orr.w	r7, r7, #32
 23fda0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fda0c:	601c      	str	r4, [r3, #0]
 23fda0e:	9b04      	ldr	r3, [sp, #16]
 23fda10:	601d      	str	r5, [r3, #0]
 23fda12:	e695      	b.n	23fd740 <__gethex+0x128>
 23fda14:	4299      	cmp	r1, r3
 23fda16:	f843 cc04 	str.w	ip, [r3, #-4]
 23fda1a:	d8d8      	bhi.n	23fd9ce <__gethex+0x3b6>
 23fda1c:	68a3      	ldr	r3, [r4, #8]
 23fda1e:	459b      	cmp	fp, r3
 23fda20:	db19      	blt.n	23fda56 <__gethex+0x43e>
 23fda22:	6861      	ldr	r1, [r4, #4]
 23fda24:	ee18 0a10 	vmov	r0, s16
 23fda28:	3101      	adds	r1, #1
 23fda2a:	f000 f913 	bl	23fdc54 <_Balloc>
 23fda2e:	4681      	mov	r9, r0
 23fda30:	b918      	cbnz	r0, 23fda3a <__gethex+0x422>
 23fda32:	4b1b      	ldr	r3, [pc, #108]	; (23fdaa0 <__gethex+0x488>)
 23fda34:	4602      	mov	r2, r0
 23fda36:	2184      	movs	r1, #132	; 0x84
 23fda38:	e6a8      	b.n	23fd78c <__gethex+0x174>
 23fda3a:	6922      	ldr	r2, [r4, #16]
 23fda3c:	f104 010c 	add.w	r1, r4, #12
 23fda40:	300c      	adds	r0, #12
 23fda42:	3202      	adds	r2, #2
 23fda44:	0092      	lsls	r2, r2, #2
 23fda46:	f7fe fdb1 	bl	23fc5ac <memcpy>
 23fda4a:	4621      	mov	r1, r4
 23fda4c:	464c      	mov	r4, r9
 23fda4e:	ee18 0a10 	vmov	r0, s16
 23fda52:	f000 f93f 	bl	23fdcd4 <_Bfree>
 23fda56:	6923      	ldr	r3, [r4, #16]
 23fda58:	1c5a      	adds	r2, r3, #1
 23fda5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 23fda5e:	6122      	str	r2, [r4, #16]
 23fda60:	2201      	movs	r2, #1
 23fda62:	615a      	str	r2, [r3, #20]
 23fda64:	e7bb      	b.n	23fd9de <__gethex+0x3c6>
 23fda66:	6922      	ldr	r2, [r4, #16]
 23fda68:	455a      	cmp	r2, fp
 23fda6a:	dd0b      	ble.n	23fda84 <__gethex+0x46c>
 23fda6c:	2101      	movs	r1, #1
 23fda6e:	4620      	mov	r0, r4
 23fda70:	f7ff fd6c 	bl	23fd54c <rshift>
 23fda74:	3501      	adds	r5, #1
 23fda76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fda7a:	42ab      	cmp	r3, r5
 23fda7c:	f6ff aed0 	blt.w	23fd820 <__gethex+0x208>
 23fda80:	2701      	movs	r7, #1
 23fda82:	e7c0      	b.n	23fda06 <__gethex+0x3ee>
 23fda84:	f016 061f 	ands.w	r6, r6, #31
 23fda88:	d0fa      	beq.n	23fda80 <__gethex+0x468>
 23fda8a:	4453      	add	r3, sl
 23fda8c:	f1c6 0620 	rsb	r6, r6, #32
 23fda90:	f853 0c04 	ldr.w	r0, [r3, #-4]
 23fda94:	f000 f9d2 	bl	23fde3c <__hi0bits>
 23fda98:	42b0      	cmp	r0, r6
 23fda9a:	dbe7      	blt.n	23fda6c <__gethex+0x454>
 23fda9c:	e7f0      	b.n	23fda80 <__gethex+0x468>
 23fda9e:	bf00      	nop
 23fdaa0:	023ffde9 	.word	0x023ffde9

023fdaa4 <L_shift>:
 23fdaa4:	f1c2 0208 	rsb	r2, r2, #8
 23fdaa8:	0092      	lsls	r2, r2, #2
 23fdaaa:	b570      	push	{r4, r5, r6, lr}
 23fdaac:	f1c2 0620 	rsb	r6, r2, #32
 23fdab0:	6843      	ldr	r3, [r0, #4]
 23fdab2:	6804      	ldr	r4, [r0, #0]
 23fdab4:	fa03 f506 	lsl.w	r5, r3, r6
 23fdab8:	40d3      	lsrs	r3, r2
 23fdaba:	432c      	orrs	r4, r5
 23fdabc:	6004      	str	r4, [r0, #0]
 23fdabe:	f840 3f04 	str.w	r3, [r0, #4]!
 23fdac2:	4288      	cmp	r0, r1
 23fdac4:	d3f4      	bcc.n	23fdab0 <L_shift+0xc>
 23fdac6:	bd70      	pop	{r4, r5, r6, pc}

023fdac8 <__match>:
 23fdac8:	6803      	ldr	r3, [r0, #0]
 23fdaca:	3301      	adds	r3, #1
 23fdacc:	b530      	push	{r4, r5, lr}
 23fdace:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fdad2:	b914      	cbnz	r4, 23fdada <__match+0x12>
 23fdad4:	6003      	str	r3, [r0, #0]
 23fdad6:	2001      	movs	r0, #1
 23fdad8:	bd30      	pop	{r4, r5, pc}
 23fdada:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdade:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 23fdae2:	2d19      	cmp	r5, #25
 23fdae4:	bf98      	it	ls
 23fdae6:	3220      	addls	r2, #32
 23fdae8:	42a2      	cmp	r2, r4
 23fdaea:	d0f0      	beq.n	23fdace <__match+0x6>
 23fdaec:	2000      	movs	r0, #0
 23fdaee:	e7f3      	b.n	23fdad8 <__match+0x10>

023fdaf0 <__hexnan>:
 23fdaf0:	680b      	ldr	r3, [r1, #0]
 23fdaf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdaf6:	115e      	asrs	r6, r3, #5
 23fdaf8:	f013 031f 	ands.w	r3, r3, #31
 23fdafc:	f04f 0500 	mov.w	r5, #0
 23fdb00:	b087      	sub	sp, #28
 23fdb02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 23fdb06:	4690      	mov	r8, r2
 23fdb08:	4682      	mov	sl, r0
 23fdb0a:	6802      	ldr	r2, [r0, #0]
 23fdb0c:	bf18      	it	ne
 23fdb0e:	3604      	addne	r6, #4
 23fdb10:	46ab      	mov	fp, r5
 23fdb12:	9301      	str	r3, [sp, #4]
 23fdb14:	1f37      	subs	r7, r6, #4
 23fdb16:	f846 5c04 	str.w	r5, [r6, #-4]
 23fdb1a:	9502      	str	r5, [sp, #8]
 23fdb1c:	46b9      	mov	r9, r7
 23fdb1e:	463c      	mov	r4, r7
 23fdb20:	1c53      	adds	r3, r2, #1
 23fdb22:	7851      	ldrb	r1, [r2, #1]
 23fdb24:	9303      	str	r3, [sp, #12]
 23fdb26:	b341      	cbz	r1, 23fdb7a <__hexnan+0x8a>
 23fdb28:	4608      	mov	r0, r1
 23fdb2a:	9205      	str	r2, [sp, #20]
 23fdb2c:	9104      	str	r1, [sp, #16]
 23fdb2e:	f7ff fd5e 	bl	23fd5ee <__hexdig_fun>
 23fdb32:	2800      	cmp	r0, #0
 23fdb34:	d14f      	bne.n	23fdbd6 <__hexnan+0xe6>
 23fdb36:	9904      	ldr	r1, [sp, #16]
 23fdb38:	9a05      	ldr	r2, [sp, #20]
 23fdb3a:	2920      	cmp	r1, #32
 23fdb3c:	d818      	bhi.n	23fdb70 <__hexnan+0x80>
 23fdb3e:	9b02      	ldr	r3, [sp, #8]
 23fdb40:	459b      	cmp	fp, r3
 23fdb42:	dd13      	ble.n	23fdb6c <__hexnan+0x7c>
 23fdb44:	454c      	cmp	r4, r9
 23fdb46:	d206      	bcs.n	23fdb56 <__hexnan+0x66>
 23fdb48:	2d07      	cmp	r5, #7
 23fdb4a:	dc04      	bgt.n	23fdb56 <__hexnan+0x66>
 23fdb4c:	462a      	mov	r2, r5
 23fdb4e:	4649      	mov	r1, r9
 23fdb50:	4620      	mov	r0, r4
 23fdb52:	f7ff ffa7 	bl	23fdaa4 <L_shift>
 23fdb56:	4544      	cmp	r4, r8
 23fdb58:	d94f      	bls.n	23fdbfa <__hexnan+0x10a>
 23fdb5a:	2300      	movs	r3, #0
 23fdb5c:	f1a4 0904 	sub.w	r9, r4, #4
 23fdb60:	f8cd b008 	str.w	fp, [sp, #8]
 23fdb64:	f844 3c04 	str.w	r3, [r4, #-4]
 23fdb68:	461d      	mov	r5, r3
 23fdb6a:	464c      	mov	r4, r9
 23fdb6c:	9a03      	ldr	r2, [sp, #12]
 23fdb6e:	e7d7      	b.n	23fdb20 <__hexnan+0x30>
 23fdb70:	2929      	cmp	r1, #41	; 0x29
 23fdb72:	d155      	bne.n	23fdc20 <__hexnan+0x130>
 23fdb74:	3202      	adds	r2, #2
 23fdb76:	f8ca 2000 	str.w	r2, [sl]
 23fdb7a:	f1bb 0f00 	cmp.w	fp, #0
 23fdb7e:	d04f      	beq.n	23fdc20 <__hexnan+0x130>
 23fdb80:	454c      	cmp	r4, r9
 23fdb82:	d206      	bcs.n	23fdb92 <__hexnan+0xa2>
 23fdb84:	2d07      	cmp	r5, #7
 23fdb86:	dc04      	bgt.n	23fdb92 <__hexnan+0xa2>
 23fdb88:	462a      	mov	r2, r5
 23fdb8a:	4649      	mov	r1, r9
 23fdb8c:	4620      	mov	r0, r4
 23fdb8e:	f7ff ff89 	bl	23fdaa4 <L_shift>
 23fdb92:	4544      	cmp	r4, r8
 23fdb94:	d933      	bls.n	23fdbfe <__hexnan+0x10e>
 23fdb96:	f1a8 0204 	sub.w	r2, r8, #4
 23fdb9a:	4623      	mov	r3, r4
 23fdb9c:	f853 1b04 	ldr.w	r1, [r3], #4
 23fdba0:	429f      	cmp	r7, r3
 23fdba2:	f842 1f04 	str.w	r1, [r2, #4]!
 23fdba6:	d2f9      	bcs.n	23fdb9c <__hexnan+0xac>
 23fdba8:	1b3b      	subs	r3, r7, r4
 23fdbaa:	3e03      	subs	r6, #3
 23fdbac:	3401      	adds	r4, #1
 23fdbae:	2200      	movs	r2, #0
 23fdbb0:	f023 0303 	bic.w	r3, r3, #3
 23fdbb4:	3304      	adds	r3, #4
 23fdbb6:	42b4      	cmp	r4, r6
 23fdbb8:	bf88      	it	hi
 23fdbba:	2304      	movhi	r3, #4
 23fdbbc:	4443      	add	r3, r8
 23fdbbe:	f843 2b04 	str.w	r2, [r3], #4
 23fdbc2:	429f      	cmp	r7, r3
 23fdbc4:	d2fb      	bcs.n	23fdbbe <__hexnan+0xce>
 23fdbc6:	683b      	ldr	r3, [r7, #0]
 23fdbc8:	b91b      	cbnz	r3, 23fdbd2 <__hexnan+0xe2>
 23fdbca:	4547      	cmp	r7, r8
 23fdbcc:	d126      	bne.n	23fdc1c <__hexnan+0x12c>
 23fdbce:	2301      	movs	r3, #1
 23fdbd0:	603b      	str	r3, [r7, #0]
 23fdbd2:	2005      	movs	r0, #5
 23fdbd4:	e025      	b.n	23fdc22 <__hexnan+0x132>
 23fdbd6:	3501      	adds	r5, #1
 23fdbd8:	f10b 0b01 	add.w	fp, fp, #1
 23fdbdc:	2d08      	cmp	r5, #8
 23fdbde:	dd05      	ble.n	23fdbec <__hexnan+0xfc>
 23fdbe0:	4544      	cmp	r4, r8
 23fdbe2:	d9c3      	bls.n	23fdb6c <__hexnan+0x7c>
 23fdbe4:	2300      	movs	r3, #0
 23fdbe6:	3c04      	subs	r4, #4
 23fdbe8:	2501      	movs	r5, #1
 23fdbea:	6023      	str	r3, [r4, #0]
 23fdbec:	6822      	ldr	r2, [r4, #0]
 23fdbee:	f000 000f 	and.w	r0, r0, #15
 23fdbf2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 23fdbf6:	6022      	str	r2, [r4, #0]
 23fdbf8:	e7b8      	b.n	23fdb6c <__hexnan+0x7c>
 23fdbfa:	2508      	movs	r5, #8
 23fdbfc:	e7b6      	b.n	23fdb6c <__hexnan+0x7c>
 23fdbfe:	9b01      	ldr	r3, [sp, #4]
 23fdc00:	2b00      	cmp	r3, #0
 23fdc02:	d0e0      	beq.n	23fdbc6 <__hexnan+0xd6>
 23fdc04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fdc08:	f1c3 0320 	rsb	r3, r3, #32
 23fdc0c:	fa22 f303 	lsr.w	r3, r2, r3
 23fdc10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 23fdc14:	401a      	ands	r2, r3
 23fdc16:	f846 2c04 	str.w	r2, [r6, #-4]
 23fdc1a:	e7d4      	b.n	23fdbc6 <__hexnan+0xd6>
 23fdc1c:	3f04      	subs	r7, #4
 23fdc1e:	e7d2      	b.n	23fdbc6 <__hexnan+0xd6>
 23fdc20:	2004      	movs	r0, #4
 23fdc22:	b007      	add	sp, #28
 23fdc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fdc28 <__retarget_lock_acquire_recursive>:
 23fdc28:	4770      	bx	lr

023fdc2a <__retarget_lock_release>:
 23fdc2a:	4770      	bx	lr

023fdc2c <__retarget_lock_release_recursive>:
 23fdc2c:	4770      	bx	lr

023fdc2e <__ascii_mbtowc>:
 23fdc2e:	b082      	sub	sp, #8
 23fdc30:	b901      	cbnz	r1, 23fdc34 <__ascii_mbtowc+0x6>
 23fdc32:	a901      	add	r1, sp, #4
 23fdc34:	b142      	cbz	r2, 23fdc48 <__ascii_mbtowc+0x1a>
 23fdc36:	b14b      	cbz	r3, 23fdc4c <__ascii_mbtowc+0x1e>
 23fdc38:	7813      	ldrb	r3, [r2, #0]
 23fdc3a:	600b      	str	r3, [r1, #0]
 23fdc3c:	7812      	ldrb	r2, [r2, #0]
 23fdc3e:	1e10      	subs	r0, r2, #0
 23fdc40:	bf18      	it	ne
 23fdc42:	2001      	movne	r0, #1
 23fdc44:	b002      	add	sp, #8
 23fdc46:	4770      	bx	lr
 23fdc48:	4610      	mov	r0, r2
 23fdc4a:	e7fb      	b.n	23fdc44 <__ascii_mbtowc+0x16>
 23fdc4c:	f06f 0001 	mvn.w	r0, #1
 23fdc50:	e7f8      	b.n	23fdc44 <__ascii_mbtowc+0x16>
	...

023fdc54 <_Balloc>:
 23fdc54:	b570      	push	{r4, r5, r6, lr}
 23fdc56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fdc58:	4604      	mov	r4, r0
 23fdc5a:	460d      	mov	r5, r1
 23fdc5c:	b976      	cbnz	r6, 23fdc7c <_Balloc+0x28>
 23fdc5e:	2010      	movs	r0, #16
 23fdc60:	f7fc fa6c 	bl	23fa13c <malloc>
 23fdc64:	4602      	mov	r2, r0
 23fdc66:	6260      	str	r0, [r4, #36]	; 0x24
 23fdc68:	b920      	cbnz	r0, 23fdc74 <_Balloc+0x20>
 23fdc6a:	4b18      	ldr	r3, [pc, #96]	; (23fdccc <_Balloc+0x78>)
 23fdc6c:	2166      	movs	r1, #102	; 0x66
 23fdc6e:	4818      	ldr	r0, [pc, #96]	; (23fdcd0 <_Balloc+0x7c>)
 23fdc70:	f7fc fad4 	bl	23fa21c <__assert_func>
 23fdc74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fdc78:	6006      	str	r6, [r0, #0]
 23fdc7a:	60c6      	str	r6, [r0, #12]
 23fdc7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23fdc7e:	68f3      	ldr	r3, [r6, #12]
 23fdc80:	b183      	cbz	r3, 23fdca4 <_Balloc+0x50>
 23fdc82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fdc84:	68db      	ldr	r3, [r3, #12]
 23fdc86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 23fdc8a:	b9b8      	cbnz	r0, 23fdcbc <_Balloc+0x68>
 23fdc8c:	2101      	movs	r1, #1
 23fdc8e:	4620      	mov	r0, r4
 23fdc90:	fa01 f605 	lsl.w	r6, r1, r5
 23fdc94:	1d72      	adds	r2, r6, #5
 23fdc96:	0092      	lsls	r2, r2, #2
 23fdc98:	f7fe fcb7 	bl	23fc60a <_calloc_r>
 23fdc9c:	b160      	cbz	r0, 23fdcb8 <_Balloc+0x64>
 23fdc9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 23fdca2:	e00e      	b.n	23fdcc2 <_Balloc+0x6e>
 23fdca4:	2221      	movs	r2, #33	; 0x21
 23fdca6:	2104      	movs	r1, #4
 23fdca8:	4620      	mov	r0, r4
 23fdcaa:	f7fe fcae 	bl	23fc60a <_calloc_r>
 23fdcae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fdcb0:	60f0      	str	r0, [r6, #12]
 23fdcb2:	68db      	ldr	r3, [r3, #12]
 23fdcb4:	2b00      	cmp	r3, #0
 23fdcb6:	d1e4      	bne.n	23fdc82 <_Balloc+0x2e>
 23fdcb8:	2000      	movs	r0, #0
 23fdcba:	bd70      	pop	{r4, r5, r6, pc}
 23fdcbc:	6802      	ldr	r2, [r0, #0]
 23fdcbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 23fdcc2:	2300      	movs	r3, #0
 23fdcc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 23fdcc8:	e7f7      	b.n	23fdcba <_Balloc+0x66>
 23fdcca:	bf00      	nop
 23fdccc:	023ffc21 	.word	0x023ffc21
 23fdcd0:	023ffe6e 	.word	0x023ffe6e

023fdcd4 <_Bfree>:
 23fdcd4:	b570      	push	{r4, r5, r6, lr}
 23fdcd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fdcd8:	4605      	mov	r5, r0
 23fdcda:	460c      	mov	r4, r1
 23fdcdc:	b976      	cbnz	r6, 23fdcfc <_Bfree+0x28>
 23fdcde:	2010      	movs	r0, #16
 23fdce0:	f7fc fa2c 	bl	23fa13c <malloc>
 23fdce4:	4602      	mov	r2, r0
 23fdce6:	6268      	str	r0, [r5, #36]	; 0x24
 23fdce8:	b920      	cbnz	r0, 23fdcf4 <_Bfree+0x20>
 23fdcea:	4b09      	ldr	r3, [pc, #36]	; (23fdd10 <_Bfree+0x3c>)
 23fdcec:	218a      	movs	r1, #138	; 0x8a
 23fdcee:	4809      	ldr	r0, [pc, #36]	; (23fdd14 <_Bfree+0x40>)
 23fdcf0:	f7fc fa94 	bl	23fa21c <__assert_func>
 23fdcf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fdcf8:	6006      	str	r6, [r0, #0]
 23fdcfa:	60c6      	str	r6, [r0, #12]
 23fdcfc:	b13c      	cbz	r4, 23fdd0e <_Bfree+0x3a>
 23fdcfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23fdd00:	6862      	ldr	r2, [r4, #4]
 23fdd02:	68db      	ldr	r3, [r3, #12]
 23fdd04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 23fdd08:	6021      	str	r1, [r4, #0]
 23fdd0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 23fdd0e:	bd70      	pop	{r4, r5, r6, pc}
 23fdd10:	023ffc21 	.word	0x023ffc21
 23fdd14:	023ffe6e 	.word	0x023ffe6e

023fdd18 <__multadd>:
 23fdd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdd1c:	f101 0c14 	add.w	ip, r1, #20
 23fdd20:	4607      	mov	r7, r0
 23fdd22:	460c      	mov	r4, r1
 23fdd24:	461e      	mov	r6, r3
 23fdd26:	690d      	ldr	r5, [r1, #16]
 23fdd28:	2000      	movs	r0, #0
 23fdd2a:	f8dc 3000 	ldr.w	r3, [ip]
 23fdd2e:	3001      	adds	r0, #1
 23fdd30:	b299      	uxth	r1, r3
 23fdd32:	4285      	cmp	r5, r0
 23fdd34:	fb02 6101 	mla	r1, r2, r1, r6
 23fdd38:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fdd3c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 23fdd40:	b289      	uxth	r1, r1
 23fdd42:	fb02 3306 	mla	r3, r2, r6, r3
 23fdd46:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 23fdd4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fdd4e:	f84c 1b04 	str.w	r1, [ip], #4
 23fdd52:	dcea      	bgt.n	23fdd2a <__multadd+0x12>
 23fdd54:	b30e      	cbz	r6, 23fdd9a <__multadd+0x82>
 23fdd56:	68a3      	ldr	r3, [r4, #8]
 23fdd58:	42ab      	cmp	r3, r5
 23fdd5a:	dc19      	bgt.n	23fdd90 <__multadd+0x78>
 23fdd5c:	6861      	ldr	r1, [r4, #4]
 23fdd5e:	4638      	mov	r0, r7
 23fdd60:	3101      	adds	r1, #1
 23fdd62:	f7ff ff77 	bl	23fdc54 <_Balloc>
 23fdd66:	4680      	mov	r8, r0
 23fdd68:	b928      	cbnz	r0, 23fdd76 <__multadd+0x5e>
 23fdd6a:	4602      	mov	r2, r0
 23fdd6c:	4b0c      	ldr	r3, [pc, #48]	; (23fdda0 <__multadd+0x88>)
 23fdd6e:	21b5      	movs	r1, #181	; 0xb5
 23fdd70:	480c      	ldr	r0, [pc, #48]	; (23fdda4 <__multadd+0x8c>)
 23fdd72:	f7fc fa53 	bl	23fa21c <__assert_func>
 23fdd76:	6922      	ldr	r2, [r4, #16]
 23fdd78:	f104 010c 	add.w	r1, r4, #12
 23fdd7c:	300c      	adds	r0, #12
 23fdd7e:	3202      	adds	r2, #2
 23fdd80:	0092      	lsls	r2, r2, #2
 23fdd82:	f7fe fc13 	bl	23fc5ac <memcpy>
 23fdd86:	4621      	mov	r1, r4
 23fdd88:	4644      	mov	r4, r8
 23fdd8a:	4638      	mov	r0, r7
 23fdd8c:	f7ff ffa2 	bl	23fdcd4 <_Bfree>
 23fdd90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 23fdd94:	3501      	adds	r5, #1
 23fdd96:	615e      	str	r6, [r3, #20]
 23fdd98:	6125      	str	r5, [r4, #16]
 23fdd9a:	4620      	mov	r0, r4
 23fdd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fdda0:	023ffde9 	.word	0x023ffde9
 23fdda4:	023ffe6e 	.word	0x023ffe6e

023fdda8 <__s2b>:
 23fdda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fddac:	4615      	mov	r5, r2
 23fddae:	461f      	mov	r7, r3
 23fddb0:	2209      	movs	r2, #9
 23fddb2:	3308      	adds	r3, #8
 23fddb4:	460c      	mov	r4, r1
 23fddb6:	4606      	mov	r6, r0
 23fddb8:	2100      	movs	r1, #0
 23fddba:	fb93 f3f2 	sdiv	r3, r3, r2
 23fddbe:	2201      	movs	r2, #1
 23fddc0:	429a      	cmp	r2, r3
 23fddc2:	db09      	blt.n	23fddd8 <__s2b+0x30>
 23fddc4:	4630      	mov	r0, r6
 23fddc6:	f7ff ff45 	bl	23fdc54 <_Balloc>
 23fddca:	b940      	cbnz	r0, 23fddde <__s2b+0x36>
 23fddcc:	4602      	mov	r2, r0
 23fddce:	4b19      	ldr	r3, [pc, #100]	; (23fde34 <__s2b+0x8c>)
 23fddd0:	21ce      	movs	r1, #206	; 0xce
 23fddd2:	4819      	ldr	r0, [pc, #100]	; (23fde38 <__s2b+0x90>)
 23fddd4:	f7fc fa22 	bl	23fa21c <__assert_func>
 23fddd8:	0052      	lsls	r2, r2, #1
 23fddda:	3101      	adds	r1, #1
 23fdddc:	e7f0      	b.n	23fddc0 <__s2b+0x18>
 23fddde:	9b08      	ldr	r3, [sp, #32]
 23fdde0:	2d09      	cmp	r5, #9
 23fdde2:	6143      	str	r3, [r0, #20]
 23fdde4:	f04f 0301 	mov.w	r3, #1
 23fdde8:	6103      	str	r3, [r0, #16]
 23fddea:	dd16      	ble.n	23fde1a <__s2b+0x72>
 23fddec:	f104 0909 	add.w	r9, r4, #9
 23fddf0:	442c      	add	r4, r5
 23fddf2:	46c8      	mov	r8, r9
 23fddf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 23fddf8:	4601      	mov	r1, r0
 23fddfa:	220a      	movs	r2, #10
 23fddfc:	4630      	mov	r0, r6
 23fddfe:	3b30      	subs	r3, #48	; 0x30
 23fde00:	f7ff ff8a 	bl	23fdd18 <__multadd>
 23fde04:	45a0      	cmp	r8, r4
 23fde06:	d1f5      	bne.n	23fddf4 <__s2b+0x4c>
 23fde08:	f1a5 0408 	sub.w	r4, r5, #8
 23fde0c:	444c      	add	r4, r9
 23fde0e:	1b2d      	subs	r5, r5, r4
 23fde10:	1963      	adds	r3, r4, r5
 23fde12:	42bb      	cmp	r3, r7
 23fde14:	db04      	blt.n	23fde20 <__s2b+0x78>
 23fde16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fde1a:	340a      	adds	r4, #10
 23fde1c:	2509      	movs	r5, #9
 23fde1e:	e7f6      	b.n	23fde0e <__s2b+0x66>
 23fde20:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fde24:	4601      	mov	r1, r0
 23fde26:	220a      	movs	r2, #10
 23fde28:	4630      	mov	r0, r6
 23fde2a:	3b30      	subs	r3, #48	; 0x30
 23fde2c:	f7ff ff74 	bl	23fdd18 <__multadd>
 23fde30:	e7ee      	b.n	23fde10 <__s2b+0x68>
 23fde32:	bf00      	nop
 23fde34:	023ffde9 	.word	0x023ffde9
 23fde38:	023ffe6e 	.word	0x023ffe6e

023fde3c <__hi0bits>:
 23fde3c:	0c03      	lsrs	r3, r0, #16
 23fde3e:	041b      	lsls	r3, r3, #16
 23fde40:	b9d3      	cbnz	r3, 23fde78 <__hi0bits+0x3c>
 23fde42:	0400      	lsls	r0, r0, #16
 23fde44:	2310      	movs	r3, #16
 23fde46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 23fde4a:	bf04      	itt	eq
 23fde4c:	0200      	lsleq	r0, r0, #8
 23fde4e:	3308      	addeq	r3, #8
 23fde50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 23fde54:	bf04      	itt	eq
 23fde56:	0100      	lsleq	r0, r0, #4
 23fde58:	3304      	addeq	r3, #4
 23fde5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 23fde5e:	bf04      	itt	eq
 23fde60:	0080      	lsleq	r0, r0, #2
 23fde62:	3302      	addeq	r3, #2
 23fde64:	2800      	cmp	r0, #0
 23fde66:	db05      	blt.n	23fde74 <__hi0bits+0x38>
 23fde68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 23fde6c:	f103 0301 	add.w	r3, r3, #1
 23fde70:	bf08      	it	eq
 23fde72:	2320      	moveq	r3, #32
 23fde74:	4618      	mov	r0, r3
 23fde76:	4770      	bx	lr
 23fde78:	2300      	movs	r3, #0
 23fde7a:	e7e4      	b.n	23fde46 <__hi0bits+0xa>

023fde7c <__lo0bits>:
 23fde7c:	6803      	ldr	r3, [r0, #0]
 23fde7e:	4601      	mov	r1, r0
 23fde80:	f013 0207 	ands.w	r2, r3, #7
 23fde84:	d00b      	beq.n	23fde9e <__lo0bits+0x22>
 23fde86:	07da      	lsls	r2, r3, #31
 23fde88:	d423      	bmi.n	23fded2 <__lo0bits+0x56>
 23fde8a:	0798      	lsls	r0, r3, #30
 23fde8c:	bf47      	ittee	mi
 23fde8e:	085b      	lsrmi	r3, r3, #1
 23fde90:	2001      	movmi	r0, #1
 23fde92:	089b      	lsrpl	r3, r3, #2
 23fde94:	2002      	movpl	r0, #2
 23fde96:	bf4c      	ite	mi
 23fde98:	600b      	strmi	r3, [r1, #0]
 23fde9a:	600b      	strpl	r3, [r1, #0]
 23fde9c:	4770      	bx	lr
 23fde9e:	b298      	uxth	r0, r3
 23fdea0:	b9a8      	cbnz	r0, 23fdece <__lo0bits+0x52>
 23fdea2:	0c1b      	lsrs	r3, r3, #16
 23fdea4:	2010      	movs	r0, #16
 23fdea6:	b2da      	uxtb	r2, r3
 23fdea8:	b90a      	cbnz	r2, 23fdeae <__lo0bits+0x32>
 23fdeaa:	3008      	adds	r0, #8
 23fdeac:	0a1b      	lsrs	r3, r3, #8
 23fdeae:	071a      	lsls	r2, r3, #28
 23fdeb0:	bf04      	itt	eq
 23fdeb2:	091b      	lsreq	r3, r3, #4
 23fdeb4:	3004      	addeq	r0, #4
 23fdeb6:	079a      	lsls	r2, r3, #30
 23fdeb8:	bf04      	itt	eq
 23fdeba:	089b      	lsreq	r3, r3, #2
 23fdebc:	3002      	addeq	r0, #2
 23fdebe:	07da      	lsls	r2, r3, #31
 23fdec0:	d403      	bmi.n	23fdeca <__lo0bits+0x4e>
 23fdec2:	085b      	lsrs	r3, r3, #1
 23fdec4:	f100 0001 	add.w	r0, r0, #1
 23fdec8:	d005      	beq.n	23fded6 <__lo0bits+0x5a>
 23fdeca:	600b      	str	r3, [r1, #0]
 23fdecc:	4770      	bx	lr
 23fdece:	4610      	mov	r0, r2
 23fded0:	e7e9      	b.n	23fdea6 <__lo0bits+0x2a>
 23fded2:	2000      	movs	r0, #0
 23fded4:	4770      	bx	lr
 23fded6:	2020      	movs	r0, #32
 23fded8:	4770      	bx	lr
	...

023fdedc <__i2b>:
 23fdedc:	b510      	push	{r4, lr}
 23fdede:	460c      	mov	r4, r1
 23fdee0:	2101      	movs	r1, #1
 23fdee2:	f7ff feb7 	bl	23fdc54 <_Balloc>
 23fdee6:	4602      	mov	r2, r0
 23fdee8:	b928      	cbnz	r0, 23fdef6 <__i2b+0x1a>
 23fdeea:	4b05      	ldr	r3, [pc, #20]	; (23fdf00 <__i2b+0x24>)
 23fdeec:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23fdef0:	4804      	ldr	r0, [pc, #16]	; (23fdf04 <__i2b+0x28>)
 23fdef2:	f7fc f993 	bl	23fa21c <__assert_func>
 23fdef6:	2301      	movs	r3, #1
 23fdef8:	6144      	str	r4, [r0, #20]
 23fdefa:	6103      	str	r3, [r0, #16]
 23fdefc:	bd10      	pop	{r4, pc}
 23fdefe:	bf00      	nop
 23fdf00:	023ffde9 	.word	0x023ffde9
 23fdf04:	023ffe6e 	.word	0x023ffe6e

023fdf08 <__multiply>:
 23fdf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdf0c:	4691      	mov	r9, r2
 23fdf0e:	690a      	ldr	r2, [r1, #16]
 23fdf10:	460c      	mov	r4, r1
 23fdf12:	b085      	sub	sp, #20
 23fdf14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23fdf18:	429a      	cmp	r2, r3
 23fdf1a:	bfbe      	ittt	lt
 23fdf1c:	460b      	movlt	r3, r1
 23fdf1e:	464c      	movlt	r4, r9
 23fdf20:	4699      	movlt	r9, r3
 23fdf22:	6927      	ldr	r7, [r4, #16]
 23fdf24:	68a3      	ldr	r3, [r4, #8]
 23fdf26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 23fdf2a:	6861      	ldr	r1, [r4, #4]
 23fdf2c:	eb07 060a 	add.w	r6, r7, sl
 23fdf30:	42b3      	cmp	r3, r6
 23fdf32:	bfb8      	it	lt
 23fdf34:	3101      	addlt	r1, #1
 23fdf36:	f7ff fe8d 	bl	23fdc54 <_Balloc>
 23fdf3a:	b930      	cbnz	r0, 23fdf4a <__multiply+0x42>
 23fdf3c:	4602      	mov	r2, r0
 23fdf3e:	4b44      	ldr	r3, [pc, #272]	; (23fe050 <__multiply+0x148>)
 23fdf40:	f240 115d 	movw	r1, #349	; 0x15d
 23fdf44:	4843      	ldr	r0, [pc, #268]	; (23fe054 <__multiply+0x14c>)
 23fdf46:	f7fc f969 	bl	23fa21c <__assert_func>
 23fdf4a:	f100 0514 	add.w	r5, r0, #20
 23fdf4e:	2200      	movs	r2, #0
 23fdf50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23fdf54:	462b      	mov	r3, r5
 23fdf56:	4543      	cmp	r3, r8
 23fdf58:	d321      	bcc.n	23fdf9e <__multiply+0x96>
 23fdf5a:	f104 0314 	add.w	r3, r4, #20
 23fdf5e:	f104 0115 	add.w	r1, r4, #21
 23fdf62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 23fdf66:	f109 0314 	add.w	r3, r9, #20
 23fdf6a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 23fdf6e:	9202      	str	r2, [sp, #8]
 23fdf70:	1b3a      	subs	r2, r7, r4
 23fdf72:	3a15      	subs	r2, #21
 23fdf74:	f022 0203 	bic.w	r2, r2, #3
 23fdf78:	3204      	adds	r2, #4
 23fdf7a:	428f      	cmp	r7, r1
 23fdf7c:	bf38      	it	cc
 23fdf7e:	2204      	movcc	r2, #4
 23fdf80:	9201      	str	r2, [sp, #4]
 23fdf82:	9a02      	ldr	r2, [sp, #8]
 23fdf84:	9303      	str	r3, [sp, #12]
 23fdf86:	429a      	cmp	r2, r3
 23fdf88:	d80c      	bhi.n	23fdfa4 <__multiply+0x9c>
 23fdf8a:	2e00      	cmp	r6, #0
 23fdf8c:	dd03      	ble.n	23fdf96 <__multiply+0x8e>
 23fdf8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 23fdf92:	2b00      	cmp	r3, #0
 23fdf94:	d05a      	beq.n	23fe04c <__multiply+0x144>
 23fdf96:	6106      	str	r6, [r0, #16]
 23fdf98:	b005      	add	sp, #20
 23fdf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fdf9e:	f843 2b04 	str.w	r2, [r3], #4
 23fdfa2:	e7d8      	b.n	23fdf56 <__multiply+0x4e>
 23fdfa4:	f8b3 a000 	ldrh.w	sl, [r3]
 23fdfa8:	f1ba 0f00 	cmp.w	sl, #0
 23fdfac:	d024      	beq.n	23fdff8 <__multiply+0xf0>
 23fdfae:	f104 0e14 	add.w	lr, r4, #20
 23fdfb2:	46a9      	mov	r9, r5
 23fdfb4:	f04f 0c00 	mov.w	ip, #0
 23fdfb8:	f85e 2b04 	ldr.w	r2, [lr], #4
 23fdfbc:	f8d9 1000 	ldr.w	r1, [r9]
 23fdfc0:	fa1f fb82 	uxth.w	fp, r2
 23fdfc4:	4577      	cmp	r7, lr
 23fdfc6:	b289      	uxth	r1, r1
 23fdfc8:	fb0a 110b 	mla	r1, sl, fp, r1
 23fdfcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 23fdfd0:	f8d9 2000 	ldr.w	r2, [r9]
 23fdfd4:	4461      	add	r1, ip
 23fdfd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fdfda:	fb0a c20b 	mla	r2, sl, fp, ip
 23fdfde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 23fdfe2:	b289      	uxth	r1, r1
 23fdfe4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fdfe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fdfec:	f849 1b04 	str.w	r1, [r9], #4
 23fdff0:	d8e2      	bhi.n	23fdfb8 <__multiply+0xb0>
 23fdff2:	9a01      	ldr	r2, [sp, #4]
 23fdff4:	f845 c002 	str.w	ip, [r5, r2]
 23fdff8:	9a03      	ldr	r2, [sp, #12]
 23fdffa:	3304      	adds	r3, #4
 23fdffc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 23fe000:	f1b9 0f00 	cmp.w	r9, #0
 23fe004:	d020      	beq.n	23fe048 <__multiply+0x140>
 23fe006:	6829      	ldr	r1, [r5, #0]
 23fe008:	f104 0c14 	add.w	ip, r4, #20
 23fe00c:	46ae      	mov	lr, r5
 23fe00e:	f04f 0a00 	mov.w	sl, #0
 23fe012:	f8bc b000 	ldrh.w	fp, [ip]
 23fe016:	b289      	uxth	r1, r1
 23fe018:	f8be 2002 	ldrh.w	r2, [lr, #2]
 23fe01c:	fb09 220b 	mla	r2, r9, fp, r2
 23fe020:	4492      	add	sl, r2
 23fe022:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 23fe026:	f84e 1b04 	str.w	r1, [lr], #4
 23fe02a:	f85c 2b04 	ldr.w	r2, [ip], #4
 23fe02e:	f8be 1000 	ldrh.w	r1, [lr]
 23fe032:	0c12      	lsrs	r2, r2, #16
 23fe034:	4567      	cmp	r7, ip
 23fe036:	fb09 1102 	mla	r1, r9, r2, r1
 23fe03a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 23fe03e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 23fe042:	d8e6      	bhi.n	23fe012 <__multiply+0x10a>
 23fe044:	9a01      	ldr	r2, [sp, #4]
 23fe046:	50a9      	str	r1, [r5, r2]
 23fe048:	3504      	adds	r5, #4
 23fe04a:	e79a      	b.n	23fdf82 <__multiply+0x7a>
 23fe04c:	3e01      	subs	r6, #1
 23fe04e:	e79c      	b.n	23fdf8a <__multiply+0x82>
 23fe050:	023ffde9 	.word	0x023ffde9
 23fe054:	023ffe6e 	.word	0x023ffe6e

023fe058 <__pow5mult>:
 23fe058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fe05c:	4615      	mov	r5, r2
 23fe05e:	f012 0203 	ands.w	r2, r2, #3
 23fe062:	4606      	mov	r6, r0
 23fe064:	460f      	mov	r7, r1
 23fe066:	d007      	beq.n	23fe078 <__pow5mult+0x20>
 23fe068:	3a01      	subs	r2, #1
 23fe06a:	4c25      	ldr	r4, [pc, #148]	; (23fe100 <__pow5mult+0xa8>)
 23fe06c:	2300      	movs	r3, #0
 23fe06e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fe072:	f7ff fe51 	bl	23fdd18 <__multadd>
 23fe076:	4607      	mov	r7, r0
 23fe078:	10ad      	asrs	r5, r5, #2
 23fe07a:	d03d      	beq.n	23fe0f8 <__pow5mult+0xa0>
 23fe07c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 23fe07e:	b97c      	cbnz	r4, 23fe0a0 <__pow5mult+0x48>
 23fe080:	2010      	movs	r0, #16
 23fe082:	f7fc f85b 	bl	23fa13c <malloc>
 23fe086:	4602      	mov	r2, r0
 23fe088:	6270      	str	r0, [r6, #36]	; 0x24
 23fe08a:	b928      	cbnz	r0, 23fe098 <__pow5mult+0x40>
 23fe08c:	4b1d      	ldr	r3, [pc, #116]	; (23fe104 <__pow5mult+0xac>)
 23fe08e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 23fe092:	481d      	ldr	r0, [pc, #116]	; (23fe108 <__pow5mult+0xb0>)
 23fe094:	f7fc f8c2 	bl	23fa21c <__assert_func>
 23fe098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fe09c:	6004      	str	r4, [r0, #0]
 23fe09e:	60c4      	str	r4, [r0, #12]
 23fe0a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 23fe0a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 23fe0a8:	b94c      	cbnz	r4, 23fe0be <__pow5mult+0x66>
 23fe0aa:	f240 2171 	movw	r1, #625	; 0x271
 23fe0ae:	4630      	mov	r0, r6
 23fe0b0:	f7ff ff14 	bl	23fdedc <__i2b>
 23fe0b4:	2300      	movs	r3, #0
 23fe0b6:	4604      	mov	r4, r0
 23fe0b8:	f8c8 0008 	str.w	r0, [r8, #8]
 23fe0bc:	6003      	str	r3, [r0, #0]
 23fe0be:	f04f 0900 	mov.w	r9, #0
 23fe0c2:	07eb      	lsls	r3, r5, #31
 23fe0c4:	d50a      	bpl.n	23fe0dc <__pow5mult+0x84>
 23fe0c6:	4639      	mov	r1, r7
 23fe0c8:	4622      	mov	r2, r4
 23fe0ca:	4630      	mov	r0, r6
 23fe0cc:	f7ff ff1c 	bl	23fdf08 <__multiply>
 23fe0d0:	4680      	mov	r8, r0
 23fe0d2:	4639      	mov	r1, r7
 23fe0d4:	4630      	mov	r0, r6
 23fe0d6:	4647      	mov	r7, r8
 23fe0d8:	f7ff fdfc 	bl	23fdcd4 <_Bfree>
 23fe0dc:	106d      	asrs	r5, r5, #1
 23fe0de:	d00b      	beq.n	23fe0f8 <__pow5mult+0xa0>
 23fe0e0:	6820      	ldr	r0, [r4, #0]
 23fe0e2:	b938      	cbnz	r0, 23fe0f4 <__pow5mult+0x9c>
 23fe0e4:	4622      	mov	r2, r4
 23fe0e6:	4621      	mov	r1, r4
 23fe0e8:	4630      	mov	r0, r6
 23fe0ea:	f7ff ff0d 	bl	23fdf08 <__multiply>
 23fe0ee:	6020      	str	r0, [r4, #0]
 23fe0f0:	f8c0 9000 	str.w	r9, [r0]
 23fe0f4:	4604      	mov	r4, r0
 23fe0f6:	e7e4      	b.n	23fe0c2 <__pow5mult+0x6a>
 23fe0f8:	4638      	mov	r0, r7
 23fe0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fe0fe:	bf00      	nop
 23fe100:	023fffb8 	.word	0x023fffb8
 23fe104:	023ffc21 	.word	0x023ffc21
 23fe108:	023ffe6e 	.word	0x023ffe6e

023fe10c <__lshift>:
 23fe10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe110:	460c      	mov	r4, r1
 23fe112:	4607      	mov	r7, r0
 23fe114:	4691      	mov	r9, r2
 23fe116:	ea4f 1a62 	mov.w	sl, r2, asr #5
 23fe11a:	6923      	ldr	r3, [r4, #16]
 23fe11c:	6849      	ldr	r1, [r1, #4]
 23fe11e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 23fe122:	68a3      	ldr	r3, [r4, #8]
 23fe124:	f108 0601 	add.w	r6, r8, #1
 23fe128:	42b3      	cmp	r3, r6
 23fe12a:	db0b      	blt.n	23fe144 <__lshift+0x38>
 23fe12c:	4638      	mov	r0, r7
 23fe12e:	f7ff fd91 	bl	23fdc54 <_Balloc>
 23fe132:	4605      	mov	r5, r0
 23fe134:	b948      	cbnz	r0, 23fe14a <__lshift+0x3e>
 23fe136:	4602      	mov	r2, r0
 23fe138:	4b2a      	ldr	r3, [pc, #168]	; (23fe1e4 <__lshift+0xd8>)
 23fe13a:	f240 11d9 	movw	r1, #473	; 0x1d9
 23fe13e:	482a      	ldr	r0, [pc, #168]	; (23fe1e8 <__lshift+0xdc>)
 23fe140:	f7fc f86c 	bl	23fa21c <__assert_func>
 23fe144:	3101      	adds	r1, #1
 23fe146:	005b      	lsls	r3, r3, #1
 23fe148:	e7ee      	b.n	23fe128 <__lshift+0x1c>
 23fe14a:	2300      	movs	r3, #0
 23fe14c:	f100 0114 	add.w	r1, r0, #20
 23fe150:	f100 0210 	add.w	r2, r0, #16
 23fe154:	4618      	mov	r0, r3
 23fe156:	4553      	cmp	r3, sl
 23fe158:	db37      	blt.n	23fe1ca <__lshift+0xbe>
 23fe15a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 23fe15e:	f104 0314 	add.w	r3, r4, #20
 23fe162:	6920      	ldr	r0, [r4, #16]
 23fe164:	f019 091f 	ands.w	r9, r9, #31
 23fe168:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 23fe16c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23fe170:	d02f      	beq.n	23fe1d2 <__lshift+0xc6>
 23fe172:	f1c9 0e20 	rsb	lr, r9, #32
 23fe176:	468a      	mov	sl, r1
 23fe178:	f04f 0c00 	mov.w	ip, #0
 23fe17c:	681a      	ldr	r2, [r3, #0]
 23fe17e:	fa02 f209 	lsl.w	r2, r2, r9
 23fe182:	ea42 020c 	orr.w	r2, r2, ip
 23fe186:	f84a 2b04 	str.w	r2, [sl], #4
 23fe18a:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe18e:	4298      	cmp	r0, r3
 23fe190:	fa22 fc0e 	lsr.w	ip, r2, lr
 23fe194:	d8f2      	bhi.n	23fe17c <__lshift+0x70>
 23fe196:	1b03      	subs	r3, r0, r4
 23fe198:	f104 0215 	add.w	r2, r4, #21
 23fe19c:	3b15      	subs	r3, #21
 23fe19e:	f023 0303 	bic.w	r3, r3, #3
 23fe1a2:	3304      	adds	r3, #4
 23fe1a4:	4290      	cmp	r0, r2
 23fe1a6:	bf38      	it	cc
 23fe1a8:	2304      	movcc	r3, #4
 23fe1aa:	f841 c003 	str.w	ip, [r1, r3]
 23fe1ae:	f1bc 0f00 	cmp.w	ip, #0
 23fe1b2:	d001      	beq.n	23fe1b8 <__lshift+0xac>
 23fe1b4:	f108 0602 	add.w	r6, r8, #2
 23fe1b8:	3e01      	subs	r6, #1
 23fe1ba:	4638      	mov	r0, r7
 23fe1bc:	4621      	mov	r1, r4
 23fe1be:	612e      	str	r6, [r5, #16]
 23fe1c0:	f7ff fd88 	bl	23fdcd4 <_Bfree>
 23fe1c4:	4628      	mov	r0, r5
 23fe1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe1ca:	3301      	adds	r3, #1
 23fe1cc:	f842 0f04 	str.w	r0, [r2, #4]!
 23fe1d0:	e7c1      	b.n	23fe156 <__lshift+0x4a>
 23fe1d2:	3904      	subs	r1, #4
 23fe1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe1d8:	4298      	cmp	r0, r3
 23fe1da:	f841 2f04 	str.w	r2, [r1, #4]!
 23fe1de:	d8f9      	bhi.n	23fe1d4 <__lshift+0xc8>
 23fe1e0:	e7ea      	b.n	23fe1b8 <__lshift+0xac>
 23fe1e2:	bf00      	nop
 23fe1e4:	023ffde9 	.word	0x023ffde9
 23fe1e8:	023ffe6e 	.word	0x023ffe6e

023fe1ec <__mcmp>:
 23fe1ec:	6902      	ldr	r2, [r0, #16]
 23fe1ee:	b530      	push	{r4, r5, lr}
 23fe1f0:	690c      	ldr	r4, [r1, #16]
 23fe1f2:	1b12      	subs	r2, r2, r4
 23fe1f4:	d10e      	bne.n	23fe214 <__mcmp+0x28>
 23fe1f6:	f100 0314 	add.w	r3, r0, #20
 23fe1fa:	3114      	adds	r1, #20
 23fe1fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23fe200:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 23fe204:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 23fe208:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 23fe20c:	42a5      	cmp	r5, r4
 23fe20e:	d003      	beq.n	23fe218 <__mcmp+0x2c>
 23fe210:	d305      	bcc.n	23fe21e <__mcmp+0x32>
 23fe212:	2201      	movs	r2, #1
 23fe214:	4610      	mov	r0, r2
 23fe216:	bd30      	pop	{r4, r5, pc}
 23fe218:	4283      	cmp	r3, r0
 23fe21a:	d3f3      	bcc.n	23fe204 <__mcmp+0x18>
 23fe21c:	e7fa      	b.n	23fe214 <__mcmp+0x28>
 23fe21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fe222:	e7f7      	b.n	23fe214 <__mcmp+0x28>

023fe224 <__mdiff>:
 23fe224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe228:	460c      	mov	r4, r1
 23fe22a:	4606      	mov	r6, r0
 23fe22c:	4611      	mov	r1, r2
 23fe22e:	4692      	mov	sl, r2
 23fe230:	4620      	mov	r0, r4
 23fe232:	f7ff ffdb 	bl	23fe1ec <__mcmp>
 23fe236:	1e05      	subs	r5, r0, #0
 23fe238:	d110      	bne.n	23fe25c <__mdiff+0x38>
 23fe23a:	4629      	mov	r1, r5
 23fe23c:	4630      	mov	r0, r6
 23fe23e:	f7ff fd09 	bl	23fdc54 <_Balloc>
 23fe242:	b930      	cbnz	r0, 23fe252 <__mdiff+0x2e>
 23fe244:	4b3d      	ldr	r3, [pc, #244]	; (23fe33c <__mdiff+0x118>)
 23fe246:	4602      	mov	r2, r0
 23fe248:	f240 2132 	movw	r1, #562	; 0x232
 23fe24c:	483c      	ldr	r0, [pc, #240]	; (23fe340 <__mdiff+0x11c>)
 23fe24e:	f7fb ffe5 	bl	23fa21c <__assert_func>
 23fe252:	2301      	movs	r3, #1
 23fe254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 23fe258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe25c:	bfa4      	itt	ge
 23fe25e:	4653      	movge	r3, sl
 23fe260:	46a2      	movge	sl, r4
 23fe262:	4630      	mov	r0, r6
 23fe264:	bfa8      	it	ge
 23fe266:	2500      	movge	r5, #0
 23fe268:	f8da 1004 	ldr.w	r1, [sl, #4]
 23fe26c:	bfac      	ite	ge
 23fe26e:	461c      	movge	r4, r3
 23fe270:	2501      	movlt	r5, #1
 23fe272:	f7ff fcef 	bl	23fdc54 <_Balloc>
 23fe276:	b920      	cbnz	r0, 23fe282 <__mdiff+0x5e>
 23fe278:	4b30      	ldr	r3, [pc, #192]	; (23fe33c <__mdiff+0x118>)
 23fe27a:	4602      	mov	r2, r0
 23fe27c:	f44f 7110 	mov.w	r1, #576	; 0x240
 23fe280:	e7e4      	b.n	23fe24c <__mdiff+0x28>
 23fe282:	f8da 7010 	ldr.w	r7, [sl, #16]
 23fe286:	f104 0914 	add.w	r9, r4, #20
 23fe28a:	6926      	ldr	r6, [r4, #16]
 23fe28c:	f100 0814 	add.w	r8, r0, #20
 23fe290:	60c5      	str	r5, [r0, #12]
 23fe292:	f10a 0514 	add.w	r5, sl, #20
 23fe296:	f10a 0210 	add.w	r2, sl, #16
 23fe29a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 23fe29e:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 23fe2a2:	46c2      	mov	sl, r8
 23fe2a4:	f04f 0c00 	mov.w	ip, #0
 23fe2a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 23fe2ac:	f859 3b04 	ldr.w	r3, [r9], #4
 23fe2b0:	fa1f f18b 	uxth.w	r1, fp
 23fe2b4:	454e      	cmp	r6, r9
 23fe2b6:	448c      	add	ip, r1
 23fe2b8:	b299      	uxth	r1, r3
 23fe2ba:	ea4f 4313 	mov.w	r3, r3, lsr #16
 23fe2be:	ebac 0101 	sub.w	r1, ip, r1
 23fe2c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 23fe2c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 23fe2ca:	b289      	uxth	r1, r1
 23fe2cc:	ea4f 4c23 	mov.w	ip, r3, asr #16
 23fe2d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 23fe2d4:	f84a 3b04 	str.w	r3, [sl], #4
 23fe2d8:	d8e6      	bhi.n	23fe2a8 <__mdiff+0x84>
 23fe2da:	1b33      	subs	r3, r6, r4
 23fe2dc:	3415      	adds	r4, #21
 23fe2de:	3b15      	subs	r3, #21
 23fe2e0:	f023 0303 	bic.w	r3, r3, #3
 23fe2e4:	3304      	adds	r3, #4
 23fe2e6:	42a6      	cmp	r6, r4
 23fe2e8:	bf38      	it	cc
 23fe2ea:	2304      	movcc	r3, #4
 23fe2ec:	441d      	add	r5, r3
 23fe2ee:	4443      	add	r3, r8
 23fe2f0:	462c      	mov	r4, r5
 23fe2f2:	461e      	mov	r6, r3
 23fe2f4:	4574      	cmp	r4, lr
 23fe2f6:	d30e      	bcc.n	23fe316 <__mdiff+0xf2>
 23fe2f8:	f10e 0203 	add.w	r2, lr, #3
 23fe2fc:	1b52      	subs	r2, r2, r5
 23fe2fe:	3d03      	subs	r5, #3
 23fe300:	f022 0203 	bic.w	r2, r2, #3
 23fe304:	45ae      	cmp	lr, r5
 23fe306:	bf38      	it	cc
 23fe308:	2200      	movcc	r2, #0
 23fe30a:	441a      	add	r2, r3
 23fe30c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 23fe310:	b18b      	cbz	r3, 23fe336 <__mdiff+0x112>
 23fe312:	6107      	str	r7, [r0, #16]
 23fe314:	e7a0      	b.n	23fe258 <__mdiff+0x34>
 23fe316:	f854 8b04 	ldr.w	r8, [r4], #4
 23fe31a:	fa1f f288 	uxth.w	r2, r8
 23fe31e:	4462      	add	r2, ip
 23fe320:	1411      	asrs	r1, r2, #16
 23fe322:	b292      	uxth	r2, r2
 23fe324:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 23fe328:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 23fe32c:	ea4f 4c21 	mov.w	ip, r1, asr #16
 23fe330:	f846 2b04 	str.w	r2, [r6], #4
 23fe334:	e7de      	b.n	23fe2f4 <__mdiff+0xd0>
 23fe336:	3f01      	subs	r7, #1
 23fe338:	e7e8      	b.n	23fe30c <__mdiff+0xe8>
 23fe33a:	bf00      	nop
 23fe33c:	023ffde9 	.word	0x023ffde9
 23fe340:	023ffe6e 	.word	0x023ffe6e

023fe344 <__ulp>:
 23fe344:	b082      	sub	sp, #8
 23fe346:	4913      	ldr	r1, [pc, #76]	; (23fe394 <__ulp+0x50>)
 23fe348:	ed8d 0b00 	vstr	d0, [sp]
 23fe34c:	9b01      	ldr	r3, [sp, #4]
 23fe34e:	4019      	ands	r1, r3
 23fe350:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 23fe354:	2900      	cmp	r1, #0
 23fe356:	dd05      	ble.n	23fe364 <__ulp+0x20>
 23fe358:	2200      	movs	r2, #0
 23fe35a:	460b      	mov	r3, r1
 23fe35c:	ec43 2b10 	vmov	d0, r2, r3
 23fe360:	b002      	add	sp, #8
 23fe362:	4770      	bx	lr
 23fe364:	4249      	negs	r1, r1
 23fe366:	2200      	movs	r2, #0
 23fe368:	2300      	movs	r3, #0
 23fe36a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 23fe36e:	ea4f 5021 	mov.w	r0, r1, asr #20
 23fe372:	da04      	bge.n	23fe37e <__ulp+0x3a>
 23fe374:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 23fe378:	fa41 f300 	asr.w	r3, r1, r0
 23fe37c:	e7ee      	b.n	23fe35c <__ulp+0x18>
 23fe37e:	f1a0 0114 	sub.w	r1, r0, #20
 23fe382:	291e      	cmp	r1, #30
 23fe384:	bfd6      	itet	le
 23fe386:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 23fe38a:	2101      	movgt	r1, #1
 23fe38c:	fa20 f101 	lsrle.w	r1, r0, r1
 23fe390:	460a      	mov	r2, r1
 23fe392:	e7e3      	b.n	23fe35c <__ulp+0x18>
 23fe394:	7ff00000 	.word	0x7ff00000

023fe398 <__b2d>:
 23fe398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe39a:	6905      	ldr	r5, [r0, #16]
 23fe39c:	f100 0714 	add.w	r7, r0, #20
 23fe3a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 23fe3a4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 23fe3a8:	1f2e      	subs	r6, r5, #4
 23fe3aa:	4620      	mov	r0, r4
 23fe3ac:	f7ff fd46 	bl	23fde3c <__hi0bits>
 23fe3b0:	f1c0 0320 	rsb	r3, r0, #32
 23fe3b4:	280a      	cmp	r0, #10
 23fe3b6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 23fe434 <__b2d+0x9c>
 23fe3ba:	600b      	str	r3, [r1, #0]
 23fe3bc:	dc15      	bgt.n	23fe3ea <__b2d+0x52>
 23fe3be:	f1c0 0e0b 	rsb	lr, r0, #11
 23fe3c2:	42b7      	cmp	r7, r6
 23fe3c4:	f100 0015 	add.w	r0, r0, #21
 23fe3c8:	fa24 f10e 	lsr.w	r1, r4, lr
 23fe3cc:	fa04 f000 	lsl.w	r0, r4, r0
 23fe3d0:	ea41 030c 	orr.w	r3, r1, ip
 23fe3d4:	bf34      	ite	cc
 23fe3d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fe3da:	2100      	movcs	r1, #0
 23fe3dc:	fa21 f10e 	lsr.w	r1, r1, lr
 23fe3e0:	ea40 0201 	orr.w	r2, r0, r1
 23fe3e4:	ec43 2b10 	vmov	d0, r2, r3
 23fe3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe3ea:	42b7      	cmp	r7, r6
 23fe3ec:	bf3a      	itte	cc
 23fe3ee:	f1a5 0608 	subcc.w	r6, r5, #8
 23fe3f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fe3f6:	2100      	movcs	r1, #0
 23fe3f8:	380b      	subs	r0, #11
 23fe3fa:	d017      	beq.n	23fe42c <__b2d+0x94>
 23fe3fc:	f1c0 0c20 	rsb	ip, r0, #32
 23fe400:	fa04 f500 	lsl.w	r5, r4, r0
 23fe404:	42be      	cmp	r6, r7
 23fe406:	fa01 f000 	lsl.w	r0, r1, r0
 23fe40a:	fa21 f40c 	lsr.w	r4, r1, ip
 23fe40e:	ea45 0504 	orr.w	r5, r5, r4
 23fe412:	bf8c      	ite	hi
 23fe414:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 23fe418:	2400      	movls	r4, #0
 23fe41a:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 23fe41e:	fa24 f40c 	lsr.w	r4, r4, ip
 23fe422:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 23fe426:	ea40 0204 	orr.w	r2, r0, r4
 23fe42a:	e7db      	b.n	23fe3e4 <__b2d+0x4c>
 23fe42c:	ea44 030c 	orr.w	r3, r4, ip
 23fe430:	460a      	mov	r2, r1
 23fe432:	e7d7      	b.n	23fe3e4 <__b2d+0x4c>
 23fe434:	3ff00000 	.word	0x3ff00000

023fe438 <__d2b>:
 23fe438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fe43c:	4689      	mov	r9, r1
 23fe43e:	2101      	movs	r1, #1
 23fe440:	4690      	mov	r8, r2
 23fe442:	ec57 6b10 	vmov	r6, r7, d0
 23fe446:	f7ff fc05 	bl	23fdc54 <_Balloc>
 23fe44a:	4604      	mov	r4, r0
 23fe44c:	b930      	cbnz	r0, 23fe45c <__d2b+0x24>
 23fe44e:	4602      	mov	r2, r0
 23fe450:	4b25      	ldr	r3, [pc, #148]	; (23fe4e8 <__d2b+0xb0>)
 23fe452:	f240 310a 	movw	r1, #778	; 0x30a
 23fe456:	4825      	ldr	r0, [pc, #148]	; (23fe4ec <__d2b+0xb4>)
 23fe458:	f7fb fee0 	bl	23fa21c <__assert_func>
 23fe45c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 23fe460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 23fe464:	bb35      	cbnz	r5, 23fe4b4 <__d2b+0x7c>
 23fe466:	2e00      	cmp	r6, #0
 23fe468:	9301      	str	r3, [sp, #4]
 23fe46a:	d028      	beq.n	23fe4be <__d2b+0x86>
 23fe46c:	4668      	mov	r0, sp
 23fe46e:	9600      	str	r6, [sp, #0]
 23fe470:	f7ff fd04 	bl	23fde7c <__lo0bits>
 23fe474:	9900      	ldr	r1, [sp, #0]
 23fe476:	b300      	cbz	r0, 23fe4ba <__d2b+0x82>
 23fe478:	9a01      	ldr	r2, [sp, #4]
 23fe47a:	f1c0 0320 	rsb	r3, r0, #32
 23fe47e:	fa02 f303 	lsl.w	r3, r2, r3
 23fe482:	40c2      	lsrs	r2, r0
 23fe484:	430b      	orrs	r3, r1
 23fe486:	9201      	str	r2, [sp, #4]
 23fe488:	6163      	str	r3, [r4, #20]
 23fe48a:	9b01      	ldr	r3, [sp, #4]
 23fe48c:	2b00      	cmp	r3, #0
 23fe48e:	61a3      	str	r3, [r4, #24]
 23fe490:	bf14      	ite	ne
 23fe492:	2202      	movne	r2, #2
 23fe494:	2201      	moveq	r2, #1
 23fe496:	6122      	str	r2, [r4, #16]
 23fe498:	b1d5      	cbz	r5, 23fe4d0 <__d2b+0x98>
 23fe49a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 23fe49e:	4405      	add	r5, r0
 23fe4a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 23fe4a4:	f8c9 5000 	str.w	r5, [r9]
 23fe4a8:	f8c8 0000 	str.w	r0, [r8]
 23fe4ac:	4620      	mov	r0, r4
 23fe4ae:	b003      	add	sp, #12
 23fe4b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fe4b8:	e7d5      	b.n	23fe466 <__d2b+0x2e>
 23fe4ba:	6161      	str	r1, [r4, #20]
 23fe4bc:	e7e5      	b.n	23fe48a <__d2b+0x52>
 23fe4be:	a801      	add	r0, sp, #4
 23fe4c0:	f7ff fcdc 	bl	23fde7c <__lo0bits>
 23fe4c4:	9b01      	ldr	r3, [sp, #4]
 23fe4c6:	2201      	movs	r2, #1
 23fe4c8:	3020      	adds	r0, #32
 23fe4ca:	6163      	str	r3, [r4, #20]
 23fe4cc:	6122      	str	r2, [r4, #16]
 23fe4ce:	e7e3      	b.n	23fe498 <__d2b+0x60>
 23fe4d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 23fe4d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 23fe4d8:	f8c9 0000 	str.w	r0, [r9]
 23fe4dc:	6918      	ldr	r0, [r3, #16]
 23fe4de:	f7ff fcad 	bl	23fde3c <__hi0bits>
 23fe4e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 23fe4e6:	e7df      	b.n	23fe4a8 <__d2b+0x70>
 23fe4e8:	023ffde9 	.word	0x023ffde9
 23fe4ec:	023ffe6e 	.word	0x023ffe6e

023fe4f0 <__ratio>:
 23fe4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe4f4:	4688      	mov	r8, r1
 23fe4f6:	4681      	mov	r9, r0
 23fe4f8:	4669      	mov	r1, sp
 23fe4fa:	f7ff ff4d 	bl	23fe398 <__b2d>
 23fe4fe:	a901      	add	r1, sp, #4
 23fe500:	4640      	mov	r0, r8
 23fe502:	ec55 4b10 	vmov	r4, r5, d0
 23fe506:	f7ff ff47 	bl	23fe398 <__b2d>
 23fe50a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23fe50e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 23fe512:	462f      	mov	r7, r5
 23fe514:	eba3 0c02 	sub.w	ip, r3, r2
 23fe518:	e9dd 3200 	ldrd	r3, r2, [sp]
 23fe51c:	ec51 0b10 	vmov	r0, r1, d0
 23fe520:	1a9b      	subs	r3, r3, r2
 23fe522:	468b      	mov	fp, r1
 23fe524:	4620      	mov	r0, r4
 23fe526:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 23fe52a:	2b00      	cmp	r3, #0
 23fe52c:	bfd5      	itete	le
 23fe52e:	460a      	movle	r2, r1
 23fe530:	462a      	movgt	r2, r5
 23fe532:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 23fe536:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 23fe53a:	bfd8      	it	le
 23fe53c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 23fe540:	ee10 2a10 	vmov	r2, s0
 23fe544:	4639      	mov	r1, r7
 23fe546:	465b      	mov	r3, fp
 23fe548:	f7f7 fc70 	bl	23f5e2c <__aeabi_ddiv>
 23fe54c:	ec41 0b10 	vmov	d0, r0, r1
 23fe550:	b003      	add	sp, #12
 23fe552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe556 <__copybits>:
 23fe556:	3901      	subs	r1, #1
 23fe558:	f102 0314 	add.w	r3, r2, #20
 23fe55c:	1149      	asrs	r1, r1, #5
 23fe55e:	b570      	push	{r4, r5, r6, lr}
 23fe560:	3101      	adds	r1, #1
 23fe562:	6914      	ldr	r4, [r2, #16]
 23fe564:	1f05      	subs	r5, r0, #4
 23fe566:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 23fe56a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23fe56e:	42a3      	cmp	r3, r4
 23fe570:	d30c      	bcc.n	23fe58c <__copybits+0x36>
 23fe572:	1aa3      	subs	r3, r4, r2
 23fe574:	3211      	adds	r2, #17
 23fe576:	3b11      	subs	r3, #17
 23fe578:	f023 0303 	bic.w	r3, r3, #3
 23fe57c:	42a2      	cmp	r2, r4
 23fe57e:	bf88      	it	hi
 23fe580:	2300      	movhi	r3, #0
 23fe582:	4418      	add	r0, r3
 23fe584:	2300      	movs	r3, #0
 23fe586:	4288      	cmp	r0, r1
 23fe588:	d305      	bcc.n	23fe596 <__copybits+0x40>
 23fe58a:	bd70      	pop	{r4, r5, r6, pc}
 23fe58c:	f853 6b04 	ldr.w	r6, [r3], #4
 23fe590:	f845 6f04 	str.w	r6, [r5, #4]!
 23fe594:	e7eb      	b.n	23fe56e <__copybits+0x18>
 23fe596:	f840 3b04 	str.w	r3, [r0], #4
 23fe59a:	e7f4      	b.n	23fe586 <__copybits+0x30>

023fe59c <__any_on>:
 23fe59c:	f100 0214 	add.w	r2, r0, #20
 23fe5a0:	114b      	asrs	r3, r1, #5
 23fe5a2:	6900      	ldr	r0, [r0, #16]
 23fe5a4:	4298      	cmp	r0, r3
 23fe5a6:	b510      	push	{r4, lr}
 23fe5a8:	db11      	blt.n	23fe5ce <__any_on+0x32>
 23fe5aa:	dd0a      	ble.n	23fe5c2 <__any_on+0x26>
 23fe5ac:	f011 011f 	ands.w	r1, r1, #31
 23fe5b0:	d007      	beq.n	23fe5c2 <__any_on+0x26>
 23fe5b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 23fe5b6:	fa24 f001 	lsr.w	r0, r4, r1
 23fe5ba:	fa00 f101 	lsl.w	r1, r0, r1
 23fe5be:	428c      	cmp	r4, r1
 23fe5c0:	d10b      	bne.n	23fe5da <__any_on+0x3e>
 23fe5c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23fe5c6:	4293      	cmp	r3, r2
 23fe5c8:	d803      	bhi.n	23fe5d2 <__any_on+0x36>
 23fe5ca:	2000      	movs	r0, #0
 23fe5cc:	bd10      	pop	{r4, pc}
 23fe5ce:	4603      	mov	r3, r0
 23fe5d0:	e7f7      	b.n	23fe5c2 <__any_on+0x26>
 23fe5d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 23fe5d6:	2900      	cmp	r1, #0
 23fe5d8:	d0f5      	beq.n	23fe5c6 <__any_on+0x2a>
 23fe5da:	2001      	movs	r0, #1
 23fe5dc:	e7f6      	b.n	23fe5cc <__any_on+0x30>

023fe5de <__ascii_wctomb>:
 23fe5de:	b149      	cbz	r1, 23fe5f4 <__ascii_wctomb+0x16>
 23fe5e0:	2aff      	cmp	r2, #255	; 0xff
 23fe5e2:	bf8d      	iteet	hi
 23fe5e4:	238a      	movhi	r3, #138	; 0x8a
 23fe5e6:	2001      	movls	r0, #1
 23fe5e8:	700a      	strbls	r2, [r1, #0]
 23fe5ea:	6003      	strhi	r3, [r0, #0]
 23fe5ec:	bf88      	it	hi
 23fe5ee:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23fe5f2:	4770      	bx	lr
 23fe5f4:	4608      	mov	r0, r1
 23fe5f6:	4770      	bx	lr

023fe5f8 <dynalib_user>:
 23fe5f8:	6689 023f 66b1 023f 66b5 023f 0000 0000     .f?..f?..f?.....
 23fe608:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fe618:	7574 6c61 6d00 6165 736e 203a 6100 6978     tual.means: .axi
 23fe628:	3a73 2520 0a69 2500 2066 7600 696f 2064     s: %i..%f .void 
 23fe638:	617b 6f6e 796e 6f6d 7375 3a7d 653a 5f69     {anonymous}::ei_
 23fe648:	6c61 6769 656e 5f64 7266 6565 7628 696f     aligned_free(voi
 23fe658:	2a64 0029 552f 6573 7372 652f 6972 2f63     d*)./Users/eric/
 23fe668:	6f44 7563 656d 746e 2f73 7270 6a6f 6365     Documents/projec
 23fe678:	7374 6c2f 616f 6364 6c65 2d6c 6f63 706d     ts/loadcell-comp
 23fe688:	6e65 6173 6974 6e6f 692d 666e 7265 6e65     ensation-inferen
 23fe698:	6963 676e 2f2f 7273 2f63 6465 6567 692d     cing//src/edge-i
 23fe6a8:	706d 6c75 6573 732d 6b64 632f 616c 7373     mpulse-sdk/class
 23fe6b8:	6669 6569 2f72 6965 615f 696c 6e67 6465     ifier/ei_aligned
 23fe6c8:	6d5f 6c61 6f6c 2e63 0068 6128 696c 6e67     _malloc.h.(align
 23fe6d8:	2620 2820 6c61 6769 206e 202d 2931 2029      & (align - 1)) 
 23fe6e8:	3d3d 3020 7600 696f 2a64 7b20 6e61 6e6f     == 0.void* {anon
 23fe6f8:	6d79 756f 7d73 3a3a 6965 615f 696c 6e67     ymous}::ei_align
 23fe708:	6465 635f 6c61 6f6c 2863 6973 657a 745f     ed_calloc(size_t
 23fe718:	202c 6973 657a 745f 0029 6146 6c69 6465     , size_t).Failed
 23fe728:	7420 206f 6e69 7469 6169 696c 657a 7420      to initialize t
 23fe738:	6568 6d20 646f 6c65 2820 7265 6f72 2072     he model (error 
 23fe748:	6f63 6564 2520 2964 000a 5245 3a52 4320     code %d)..ERR: C
 23fe758:	6e61 6f6e 2074 6168 646e 656c 6920 706e     annot handle inp
 23fe768:	7475 7420 7079 2065 2528 2964 000a 5245     ut type (%d)..ER
 23fe778:	3a52 6920 706e 7475 7420 6e65 6f73 2072     R: input tensor 
 23fe788:	6168 2073 6973 657a 2520 2064 7962 6574     has size %d byte
 23fe798:	2c73 6220 7475 6920 706e 7475 6d20 7461     s, but input mat
 23fe7a8:	6972 2078 6168 2073 6168 2073 6973 657a     rix has has size
 23fe7b8:	2520 2064 7962 6574 0a73 4500 5252 203a      %d bytes..ERR: 
 23fe7c8:	756f 7074 7475 7420 6e65 6f73 2072 6168     output tensor ha
 23fe7d8:	2073 6973 657a 2520 2c64 6220 7475 6920     s size %d, but i
 23fe7e8:	706e 7475 6d20 7461 6972 2078 6168 2073     nput matrix has 
 23fe7f8:	6168 2073 6973 657a 2520 0a64 4500 5252     has size %d..ERR
 23fe808:	203a 6143 6e6e 746f 6820 6e61 6c64 2065     : Cannot handle 
 23fe818:	756f 7074 7475 7420 7079 2065 2528 2964     output type (%d)
 23fe828:	000a 5245 3a52 4d20 626f 6c69 4e65 7465     ..ERR: MobileNet
 23fe838:	5320 4453 6920 2073 6f6e 2074 7573 7070      SSD is not supp
 23fe848:	726f 6574 2064 6e69 4520 4e4f 6f20 2072     orted in EON or 
 23fe858:	6554 736e 726f 6c46 776f 4c20 7469 2065     TensorFlow Lite 
 23fe868:	694d 7263 0a6f 4500 5252 203a 6e49 6176     Micro..ERR: Inva
 23fe878:	696c 2064 756f 7074 7475 7420 7079 2065     lid output type 
 23fe888:	2528 2964 6620 726f 5920 4c4f 764f 2035     (%d) for YOLOv5 
 23fe898:	616c 7473 6c20 7961 7265 000a 5245 3a52     last layer..ERR:
 23fe8a8:	5920 4c4f 584f 6420 656f 2073 6f6e 2074      YOLOX does not 
 23fe8b8:	7573 7070 726f 2074 7571 6e61 6974 657a     support quantize
 23fe8c8:	2064 6e69 6566 6572 636e 0a65 4500 5252     d inference..ERR
 23fe8d8:	203a 4f59 4f4c 3756 6420 656f 2073 6f6e     : YOLOV7 does no
 23fe8e8:	2074 7573 7070 726f 2074 7571 6e61 6974     t support quanti
 23fe8f8:	657a 2064 6e69 6566 6572 636e 0a65 4500     zed inference..E
 23fe908:	5252 203a 6e49 6176 696c 2064 756f 7074     RR: Invalid outp
 23fe918:	7475 7420 7079 2065 2528 2964 6620 726f     ut type (%d) for
 23fe928:	5420 4f41 6c20 7361 2074 616c 6579 0a72      TAO last layer.
 23fe938:	4500 5252 203a 6e49 6176 696c 2064 756f     .ERR: Invalid ou
 23fe948:	7074 7475 7420 7079 2065 2528 2964 6620     tput type (%d) f
 23fe958:	726f 5420 4f41 5920 4c4f 764f 2033 616c     or TAO YOLOv3 la
 23fe968:	6579 0a72 4500 5252 203a 6e49 6176 696c     yer..ERR: Invali
 23fe978:	2064 756f 7074 7475 7420 7079 2065 2528     d output type (%
 23fe988:	2964 6620 726f 5420 4f41 5920 4c4f 764f     d) for TAO YOLOv
 23fe998:	2034 616c 6579 0a72 4500 5252 203a 6e55     4 layer..ERR: Un
 23fe9a8:	7573 7070 726f 6574 2064 626f 656a 7463     supported object
 23fe9b8:	6420 7465 6365 6974 6e6f 6c20 7361 2074      detection last 
 23fe9c8:	616c 6579 2072 2528 2964 000a 7325 093a     layer (%d)..%s:.
 23fe9d8:	5000 6572 6964 7463 6f69 736e 2820 6974     .Predictions (ti
 23fe9e8:	656d 203a 6425 6d20 2e73 3a29 000a 6445     me: %d ms.):..Ed
 23fe9f8:	6567 4920 706d 6c75 6573 6920 666e 7265     ge Impulse infer
 23fea08:	6e65 6563 7220 6e75 656e 2072 6f66 2072     ence runner for 
 23fea18:	6150 7472 6369 656c 6420 7665 6369 7365     Particle devices
 23fea28:	0a0d 4700 6172 7379 6163 656c 4500 5252     ...Grayscale.ERR
 23fea38:	203a 6f57 6c75 2064 7277 7469 2065 756f     : Would write ou
 23fea48:	7374 6469 2065 6566 7461 7275 2065 7562     tside feature bu
 23fea58:	6666 7265 000a 5245 3a52 5520 6b6e 6f6e     ffer..ERR: Unkno
 23fea68:	6e77 6520 7478 6172 7463 6620 6e75 7463     wn extract funct
 23fea78:	6f69 2c6e 6f20 6c6e 2079 464d 4343 202c     ion, only MFCC, 
 23fea88:	464d 2045 6e61 2064 7073 6365 7274 676f     MFE and spectrog
 23fea98:	6172 206d 7573 7070 726f 6574 0a64 4500     ram supported..E
 23feaa8:	5252 203a 6146 6c69 6465 7420 206f 7572     RR: Failed to ru
 23feab8:	206e 5344 2050 7270 636f 7365 2073 2528     n DSP process (%
 23feac8:	2964 000a 5245 3a52 6320 766d 776e 6620     d)..ERR: cmvnw f
 23fead8:	6961 656c 2064 2528 2964 000a 5245 3a52     ailed (%d)..ERR:
 23feae8:	6e20 726f 616d 696c 617a 6974 6e6f 6620      normalization f
 23feaf8:	6961 656c 2064 2528 2964 000a 6546 7461     ailed (%d)..Feat
 23feb08:	7275 2065 614d 7274 7869 203a 000a 7552     ure Matrix: ..Ru
 23feb18:	6e6e 6e69 2067 6d69 7570 736c 2e65 2e2e     nning impulse...
 23feb28:	000a 6546 7461 7275 7365 2820 6425 6d20     ..Features (%d m
 23feb38:	2e73 3a29 0020 4e49 4f46 2500 3a73 0020     s.): .INFO.%s: .
 23feb48:	6d49 7570 736c 2065 616d 6e69 6174 6e69     Impulse maintain
 23feb58:	2073 7473 7461 2e65 4320 6c61 206c 7572     s state. Call ru
 23feb68:	5f6e 6c63 7361 6973 6966 7265 695f 696e     n_classifier_ini
 23feb78:	2874 2029 6f74 7220 7365 7465 7320 6174     t() to reset sta
 23feb88:	6574 2820 2e65 2e67 6920 2066 6164 6174     te (e.g. if data
 23feb98:	7320 7274 6165 206d 7369 6920 746e 7265      stream is inter
 23feba8:	7572 7470 6465 292e 000a 0043 0073 5245     rupted.)..C.s.ER
 23febb8:	3a52 4620 6961 656c 2064 6f74 7220 6e75     R: Failed to run
 23febc8:	6320 616c 7373 6669 6569 2072 2528 2964      classifier (%d)
 23febd8:	000a 6c25 2c64 6c25 2c64 6625 252c 2c66     ..%ld,%ld,%f,%f,
 23febe8:	6625 252c 0066 0000                         %f,%f...

023febf0 <_ZTVN5spark10LogHandlerE>:
	...
 23fec00:	66d9 023f 6a29 023f                         .f?.)j?.

023fec08 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fec10:	6bcd 023f 6c01 023f b5f5 023f b79d 023f     .k?..l?...?...?.
 23fec20:	7245 6369 5020 6569 7274 776f 6369 007a     Eric Pietrowicz.
 23fec30:	6f6c 6461 6563 6c6c 632d 6d6f 6570 736e     loadcell-compens
 23fec40:	7461 6f69 2d6e 3276 4900 706d 6c75 6573     ation-v2.Impulse
 23fec50:	2320 0033 6163 636c 6c75 7461 6465 775f      #3.calculated_w
 23fec60:	6965 6867 0074 6176 756c 0065               eight.value.

023fec6c <_ZL16impulse_553255_0>:
 23fec6c:	7127 0008 ec20 023f ec30 023f 0003 0000     'q.. .?.0.?.....
 23fec7c:	ec49 023f 0004 0000 0011 0000 0011 0000     I.?.............
 23fec8c:	0001 0000 0011 0000 0000 0000 0000 0000     ................
 23fec9c:	0000 0000 0000 4390 38e4 405e 0001 0000     .......C.8^@....
 23fecac:	a2f4 1007 0000 0000 0000 0000 0000 0000     ................
 23fecbc:	0001 0000 0001 0000 ecec 023f 0000 0000     ..........?.....
 23feccc:	0000 0000 0602 0000 ec54 023f 0004 0000     ........T.?.....
 23fecdc:	0004 0001 a2f0 1007 0000 0000 cccd 3e4c     ..............L>

023fecec <_ZL18ei_learning_blocks>:
 23fecec:	0009 0000 0000 0000 7585 023f ed28 023f     .........u?.(.?.
 23fecfc:	0000 0000 ed24 023f 0001 0000 0001 0000     ....$.?.........

023fed0c <_ZL24ei_config_tflite_graph_9>:
 23fed0c:	0001 0000 97a5 023f 9941 023f 9989 023f     ......?.A.?...?.
 23fed1c:	9929 023f 9935 023f                         ).?.5.?.

023fed24 <_ZL26ei_learning_block_9_inputs>:
 23fed24:	0008 0000                                   ....

023fed28 <_ZL26ei_learning_block_config_9>:
 23fed28:	0001 0002 0009 0000 ff00 0100 0002 0000     ................
 23fed38:	0000 0000 0101 0000 ed0c 023f 616e 006e     ..........?.nan.
 23fed48:	6e69 0066 766f 0066 6e55 6e6b 776f 206e     inf.ovf.Unknown 
 23fed58:	7974 6570 4e00 544f 5059 0045 4c46 414f     type.NOTYPE.FLOA
 23fed68:	3354 0032 4955 544e 0038 5453 4952 474e     T32.UINT8.STRING
 23fed78:	4200 4f4f 004c 4f43 504d 454c 3658 0034     .BOOL.COMPLEX64.
 23fed88:	4c46 414f 3154 0036 4c46 414f 3654 0034     FLOAT16.FLOAT64.
 23fed98:	4f43 504d 454c 3158 3832 5500 4e49 3654     COMPLEX128.UINT6
 23feda8:	0034 4552 4f53 5255 4543 5600 5241 4149     4.RESOURCE.VARIA
 23fedb8:	544e 5500 4e49 3354 0032 4955 544e 3631     NT.UINT32.UINT16
 23fedc8:	4900 544e 0034 0000                         .INT4...

023fedd0 <CSWTCH.28>:
 23fedd0:	ed5d 023f ed64 023f edbc 023f ed6c 023f     ].?.d.?...?.l.?.
 23fede0:	eda4 023f ed72 023f ed79 023f edc3 023f     ..?.r.?.y.?...?.
 23fedf0:	ed7e 023f ed6d 023f ed88 023f ed90 023f     ~.?.m.?...?...?.
 23fee00:	ed98 023f eda3 023f edaa 023f edb3 023f     ..?...?...?...?.
 23fee10:	edbb 023f edc2 023f edc9 023f 552f 6573     ..?...?...?./Use
 23fee20:	7372 652f 6972 2f63 6f44 7563 656d 746e     rs/eric/Document
 23fee30:	2f73 7270 6a6f 6365 7374 6c2f 616f 6364     s/projects/loadc
 23fee40:	6c65 2d6c 6f63 706d 6e65 6173 6974 6e6f     ell-compensation
 23fee50:	692d 666e 7265 6e65 6963 676e 2f2f 7273     -inferencing//sr
 23fee60:	2f63 6465 6567 692d 706d 6c75 6573 732d     c/edge-impulse-s
 23fee70:	6b64 742f 6e65 6f73 6672 6f6c 2f77 696c     dk/tensorflow/li
 23fee80:	6574 6b2f 7265 656e 736c 6b2f 7265 656e     te/kernels/kerne
 23fee90:	5f6c 7475 6c69 6c5f 7469 2e65 7063 0070     l_util_lite.cpp.
 23feea0:	7325 253a 2064 7325 7720 7361 6e20 746f     %s:%d %s was not
 23feeb0:	7420 7572 2e65 6e00 5f6f 6e69 6574 6567      true..no_intege
 23feec0:	5f72 766f 7265 6c66 776f 665f 6f72 5f6d     r_overflow_from_
 23feed0:	7571 6e61 6974 617a 6974 6e6f 6900 706e     quantization.inp
 23feee0:	7475 705f 6f72 7564 7463 735f 6163 656c     ut_product_scale
 23feef0:	3e20 203d 0030 6373 6c61 5f65 6964 6666      >= 0.scale_diff
 23fef00:	2f20 6f20 7475 7570 5f74 6373 6c61 2065      / output_scale 
 23fef10:	3d3c 3020 302e 0032 6166 736c 0065 0000     <= 0.02.false...

023fef20 <_ZTVN6tflite12MicroContextE>:
	...
 23fef28:	86a5 023f 86ef 023f 86a7 023f 86fd 023f     ..?...?...?...?.
 23fef38:	86af 023f 86b7 023f 873d 023f 8763 023f     ..?...?.=.?.c.?.
 23fef48:	8789 023f 86d3 023f 86db 023f 552f 6573     ..?...?...?./Use
 23fef58:	7372 652f 6972 2f63 6f44 7563 656d 746e     rs/eric/Document
 23fef68:	2f73 7270 6a6f 6365 7374 6c2f 616f 6364     s/projects/loadc
 23fef78:	6c65 2d6c 6f63 706d 6e65 6173 6974 6e6f     ell-compensation
 23fef88:	692d 666e 7265 6e65 6963 676e 2f2f 7273     -inferencing//sr
 23fef98:	2f63 6465 6567 692d 706d 6c75 6573 732d     c/edge-impulse-s
 23fefa8:	6b64 742f 6e65 6f73 6672 6f6c 2f77 696c     dk/tensorflow/li
 23fefb8:	6574 6d2f 6369 6f72 6b2f 7265 656e 736c     te/micro/kernels
 23fefc8:	662f 6c75 796c 635f 6e6f 656e 7463 6465     /fully_connected
 23fefd8:	632e 7070 2500 3a73 6425 2520 2073 3d21     .cpp.%s:%d %s !=
 23fefe8:	2520 2073 2528 2064 3d21 2520 2964 4100      %s (%d != %d).A
 23feff8:	4d52 435f 534d 5349 4e5f 5f4e 5553 4343     RM_CMSIS_NN_SUCC
 23ff008:	5345 0053 7261 5f6d 7566 6c6c 5f79 6f63     ESS.arm_fully_co
 23ff018:	6e6e 6365 6574 5f64 3873 2028 6326 7874     nnected_s8( &ctx
 23ff028:	202c 6626 5f63 6170 6172 736d 202c 7126     , &fc_params, &q
 23ff038:	6175 746e 705f 7261 6d61 2c73 2620 6e69     uant_params, &in
 23ff048:	7570 5f74 6964 736d 202c 6674 696c 6574     put_dims, tflite
 23ff058:	3a3a 696d 7263 3a6f 473a 7465 6554 736e     ::micro::GetTens
 23ff068:	726f 6144 6174 693c 746e 5f38 3e74 6928     orData<int8_t>(i
 23ff078:	706e 7475 2c29 2620 6966 746c 7265 645f     nput), &filter_d
 23ff088:	6d69 2c73 7420 6c66 7469 3a65 6d3a 6369     ims, tflite::mic
 23ff098:	6f72 3a3a 6547 5474 6e65 6f73 4472 7461     ro::GetTensorDat
 23ff0a8:	3c61 6e69 3874 745f 283e 6966 746c 7265     a<int8_t>(filter
 23ff0b8:	2c29 2620 6962 7361 645f 6d69 2c73 6220     ), &bias_dims, b
 23ff0c8:	6169 5f73 6164 6174 202c 6f26 7475 7570     ias_data, &outpu
 23ff0d8:	5f74 6964 736d 202c 6674 696c 6574 3a3a     t_dims, tflite::
 23ff0e8:	696d 7263 3a6f 473a 7465 6554 736e 726f     micro::GetTensor
 23ff0f8:	6144 6174 693c 746e 5f38 3e74 6f28 7475     Data<int8_t>(out
 23ff108:	7570 2974 0029 6e69 7570 2074 3d21 6e20     put)).input != n
 23ff118:	6c75 706c 7274 6600 6c69 6574 2072 3d21     ullptr.filter !=
 23ff128:	6e20 6c75 706c 7274 6f00 7475 7570 2074      nullptr.output 
 23ff138:	3d21 6e20 6c75 706c 7274 2500 3a73 6425     != nullptr.%s:%d
 23ff148:	2520 2073 3d21 2520 2073 2528 2073 3d21      %s != %s (%s !=
 23ff158:	2520 2973 6f00 7475 7570 2d74 743e 7079      %s).output->typ
 23ff168:	0065 6e69 7570 2d74 743e 7079 0065 0000     e.input->type...

023ff178 <_ZN6tflite25kFullyConnectedBiasTensorE>:
 23ff178:	0002 0000                                   ....

023ff17c <_ZN6tflite26kFullyConnectedInputTensorE>:
 23ff17c:	0000 0000                                   ....

023ff180 <_ZN6tflite27kFullyConnectedOutputTensorE>:
 23ff180:	0000 0000                                   ....

023ff184 <_ZN6tflite28kFullyConnectedWeightsTensorE>:
 23ff184:	0001 0000 6954 656d 2064 756f 2074 6567     ....Timed out ge
 23ff194:	7474 6e69 2067 7661 7265 6761 0065 6f4e     tting average.No
 23ff1a4:	6320 6c61 6269 6172 6974 6e6f 6620 6361      calibration fac
 23ff1b4:	6f74 2072 6f66 6e75 2c64 7320 7465 6974     tor found, setti
 23ff1c4:	676e 6420 6665 7561 746c 5300 7465 6974     ng default.Setti
 23ff1d4:	676e 6320 6c61 6269 6172 6974 6e6f 6620     ng calibration f
 23ff1e4:	6361 6f74 3a72 2520 0066 6143 696c 7262     actor: %f.Calibr
 23ff1f4:	7461 6e69 2067 6977 6874 7720 6965 6867     ating with weigh
 23ff204:	2e74 2e2e 2520 0066 6143 696c 7262 7461     t... %f.Calibrat
 23ff214:	6465 2021 6625 5300 6163 656c 6e20 746f     ed! %f.Scale not
 23ff224:	6420 7465 6365 6574 2e64 5020 656c 7361      detected. Pleas
 23ff234:	2065 6863 6365 206b 6977 6972 676e 202e     e check wiring. 
 23ff244:	7246 6565 697a 676e 2e2e 002e 5245 3a52     Freezing....ERR:
 23ff254:	4720 7465 6554 736e 726f 6320 6c61 656c      GetTensor calle
 23ff264:	2064 6562 6f79 646e 4d20 5841 545f 4c46     d beyond MAX_TFL
 23ff274:	455f 4156 5f4c 4f43 4e55 2054 2528 2964     _EVAL_COUNT (%d)
 23ff284:	000a 5245 3a52 4720 7465 6554 736e 726f     ..ERR: GetTensor
 23ff294:	6320 6c61 656c 2064 6562 6f79 646e 4d20      called beyond M
 23ff2a4:	5841 545f 4c46 545f 4e45 4f53 5f52 4f43     AX_TFL_TENSOR_CO
 23ff2b4:	4e55 2054 2528 2964 000a 5245 3a52 4620     UNT (%d)..ERR: F
 23ff2c4:	6961 656c 2064 6f74 6120 6c6c 636f 7461     ailed to allocat
 23ff2d4:	2065 6570 7372 7369 6574 746e 6220 6675     e persistent buf
 23ff2e4:	6566 2072 666f 7320 7a69 2065 6425 202c     fer of size %d, 
 23ff2f4:	6f64 7365 6e20 746f 6620 7469 6920 206e     does not fit in 
 23ff304:	6574 736e 726f 6120 6572 616e 6120 646e     tensor arena and
 23ff314:	7220 6165 6863 6465 4520 5f49 414d 5f58      reached EI_MAX_
 23ff324:	564f 5245 4c46 574f 425f 4655 4546 5f52     OVERFLOW_BUFFER_
 23ff334:	4f43 4e55 0a54 4500 5252 203a 6146 6c69     COUNT..ERR: Fail
 23ff344:	6465 7420 206f 6c61 6f6c 6163 6574 7020     ed to allocate p
 23ff354:	7265 6973 7473 6e65 2074 7562 6666 7265     ersistent buffer
 23ff364:	6f20 2066 6973 657a 2520 0a64 4500 5252      of size %d..ERR
 23ff374:	203a 6146 6c69 6465 7420 206f 6c61 6f6c     : Failed to allo
 23ff384:	6163 6574 7320 7263 7461 6863 6220 6675     cate scratch buf
 23ff394:	6566 2072 666f 7320 7a69 2065 6425 202c     fer of size %d, 
 23ff3a4:	6572 6361 6568 2064 4945 4d5f 5841 535f     reached EI_MAX_S
 23ff3b4:	5243 5441 4843 425f 4655 4546 5f52 4f43     CRATCH_BUFFER_CO
 23ff3c4:	4e55 0a54 4500 5252 203a 6146 6c69 6465     UNT..ERR: Failed
 23ff3d4:	7420 206f 6c61 6f6c 6163 6574 7320 7263      to allocate scr
 23ff3e4:	7461 6863 6220 6675 6566 2072 666f 7320     atch buffer of s
 23ff3f4:	7a69 2065 6425 000a 5245 3a52 6620 6961     ize %d..ERR: fai
 23ff404:	656c 2064 6f74 6120 6c6c 636f 7461 2065     led to allocate 
 23ff414:	6574 736e 726f 6120 6572 616e 000a 5245     tensor arena..ER
 23ff424:	3a52 7420 6e65 6f73 2072 7261 6e65 2061     R: tensor arena 
 23ff434:	7369 7420 6f6f 7320 616d 6c6c 202c 6f64     is too small, do
 23ff444:	7365 6e20 746f 6620 7469 6d20 646f 6c65     es not fit model
 23ff454:	2d20 6520 6576 206e 6977 6874 756f 2074      - even without 
 23ff464:	6373 6172 6374 2068 7562 6666 7265 0a73     scratch buffers.
 23ff474:	0000 0000                                   ....

023ff478 <_ZN12_GLOBAL__N_12g0L11quant0_zeroE>:
 23ff478:	0001 0000 ff81 ffff                         ........

023ff480 <_ZN12_GLOBAL__N_12g0L11quant1_zeroE>:
 23ff480:	0001 0000 0000 0000                         ........

023ff488 <_ZN12_GLOBAL__N_12g0L11quant2_zeroE>:
 23ff488:	0001 0000 0000 0000                         ........

023ff490 <_ZN12_GLOBAL__N_12g0L11quant3_zeroE>:
 23ff490:	0001 0000 0000 0000                         ........

023ff498 <_ZN12_GLOBAL__N_12g0L11quant4_zeroE>:
 23ff498:	0001 0000 0000 0000                         ........

023ff4a0 <_ZN12_GLOBAL__N_12g0L11quant5_zeroE>:
 23ff4a0:	0001 0000 0000 0000                         ........

023ff4a8 <_ZN12_GLOBAL__N_12g0L11quant6_zeroE>:
 23ff4a8:	0001 0000 0000 0000                         ........

023ff4b0 <_ZN12_GLOBAL__N_12g0L11quant7_zeroE>:
 23ff4b0:	0001 0000 ff80 ffff                         ........

023ff4b8 <_ZN12_GLOBAL__N_12g0L11quant8_zeroE>:
 23ff4b8:	0001 0000 ff80 ffff                         ........

023ff4c0 <_ZN12_GLOBAL__N_12g0L11quant9_zeroE>:
 23ff4c0:	0001 0000 0064 0000                         ....d...

023ff4c8 <_ZN12_GLOBAL__N_12g0L12quant0_scaleE>:
 23ff4c8:	0001 0000 ec12 407e                         ......~@

023ff4d0 <_ZN12_GLOBAL__N_12g0L12quant1_scaleE>:
 23ff4d0:	0001 0000 0ddd 3bc5                         .......;

023ff4d8 <_ZN12_GLOBAL__N_12g0L12quant2_scaleE>:
 23ff4d8:	0001 0000 1903 3c76                         ......v<

023ff4e0 <_ZN12_GLOBAL__N_12g0L12quant3_scaleE>:
 23ff4e0:	0001 0000 ea8e 3d07                         .......=

023ff4e8 <_ZN12_GLOBAL__N_12g0L12quant4_scaleE>:
 23ff4e8:	0001 0000 3e69 3cc9                         ....i>.<

023ff4f0 <_ZN12_GLOBAL__N_12g0L12quant5_scaleE>:
 23ff4f0:	0001 0000 ab87 3cc6                         .......<

023ff4f8 <_ZN12_GLOBAL__N_12g0L12quant6_scaleE>:
 23ff4f8:	0001 0000 8292 3bc7                         .......;

023ff500 <_ZN12_GLOBAL__N_12g0L12quant7_scaleE>:
 23ff500:	0001 0000 e5c5 3fac                         .......?

023ff508 <_ZN12_GLOBAL__N_12g0L12quant8_scaleE>:
 23ff508:	0001 0000 fbab 3ecc                         .......>

023ff510 <_ZN12_GLOBAL__N_12g0L12quant9_scaleE>:
 23ff510:	0001 0000 813c 3d2f                         ....<./=

023ff518 <_ZN12_GLOBAL__N_12g0L12tensor_data1E>:
 23ff518:	00c8 0000 0000 0000                         ........

023ff520 <_ZN12_GLOBAL__N_12g0L12tensor_data2E>:
 23ff520:	0e7f 0b8e f00e fd4e e91c 0000 0000 0000     ......N.........

023ff530 <_ZN12_GLOBAL__N_12g0L12tensor_data3E>:
 23ff530:	001a 0000 fffa ffff 00e2 0000 0073 0000     ............s...
 23ff540:	003d 0000 ffda ffff fffc ffff ffd2 ffff     =...............
 23ff550:	0048 0000 00a6 0000 0000 0000 0000 0000     H...............

023ff560 <_ZN12_GLOBAL__N_12g0L12tensor_data4E>:
 23ff560:	edf6 70fc ff05 f0fe f309 fbf9 fcfc dfef     ...p............
 23ff570:	01ff 08f1 e9e6 09f6 022e 01e4 0cef ecf7     ................
 23ff580:	fafe 0707 00e2 f6d1 f5f6 7f04 eefd 05f9     ................
 23ff590:	f7ff 0bfa e904 f5ed d800 f4f3 0207 020c     ................
 23ff5a0:	0aec fae8 ffff 0800 f7ea f914 f90b 0e04     ................
 23ff5b0:	03f8 faef 09f0 04d6 03f6 0900 0bfd ed05     ................
 23ff5c0:	0eeb 0bf5 0cf3 07f8 f1ff 0ce7 07e7 091a     ................
 23ff5d0:	05f4 f9f9 0aed fee8 f419 edee 1e17 fdf9     ................
 23ff5e0:	fff8 fa08 f8e5 fefa f8f8 f3e9 07fe 0909     ................
 23ff5f0:	1003 ee0e 010b 1105 f70b 0bea 02fe 090b     ................
 23ff600:	0309 0707 0209 fcf5 0801 0401 f3fe 0bfd     ................
 23ff610:	0900 fdf3 fd07 ffff 0f0a 01d7 ea07 07fd     ................
 23ff620:	f4f2 0106 0ee1 09f7 0000 0000 0000 0000     ................

023ff630 <_ZN12_GLOBAL__N_12g0L12tensor_data5E>:
 23ff630:	ffd9 ffff ff21 ffff ffe4 ffff 00c1 0000     ....!...........
 23ff640:	fffb ffff 001c 0000 00b4 0000 ffee ffff     ................
 23ff650:	0076 0000 ffe1 ffff ffc8 ffff 0022 0000     v..........."...
 23ff660:	ffa1 ffff ffd1 ffff fffb ffff ffe4 ffff     ................
 23ff670:	ffcb ffff 00cc 0000 ffbc ffff 0015 0000     ................

023ff680 <_ZN12_GLOBAL__N_12g0L12tensor_data6E>:
 23ff680:	e2eb 21dd 0bfe c1fe b701 04eb d5c6 39f1     ...!...........9
 23ff690:	b80f 2df3 e400 0c02 140b d533 031a 2206     ...-......3...."
 23ff6a0:	2dd7 df12 b9b0 c503 1e0f e125 ebaf feb0     .-........%.....
 23ff6b0:	0cb9 a7f4 bb00 d804 d704 fe1d 13a7 fd12     ................
 23ff6c0:	fa06 accf 0830 d005 c9c6 ea31 20da 14f6     ....0.....1.. ..
 23ff6d0:	e9dd 29d9 df2b fa21 d8e9 f5bb d22f dbfc     ...)+.!...../...
 23ff6e0:	d4f5 243b c712 fa0d fcf9 0302 3f04 13f7     ..;$.........?..
 23ff6f0:	9cbc 2df4 81bb 1cbb feac 2323 fcfd d504     ...-......##....
 23ff700:	d920 d726 c307 d7ae 290d e514 1fbc d2ef      .&......)......
 23ff710:	ecf3 14f3 e120 d801 cd0b cb22 d1f5 c021     .... ....."...!.
 23ff720:	c3ee 179d 8c0f d40a 0c12 e010 92ef b69d     ................
 23ff730:	dbf6 e7cc 1dd1 233d b345 e01f 24ff b7d7     ......=#E....$..
 23ff740:	29ae 19cf 20d8 1424 d225 ce07 c903 f411     .)... $.%.......
 23ff750:	c724 bddb 09ce addb 0ef8 4ae3 0714 d4b6     $..........J....
 23ff760:	33f4 c138 ef35 0708 380b f110 bccf ce41     .38.5....8....A.
 23ff770:	12e2 df0a 1be8 1b24 8606 3dc7 d7b8 fcaf     ......$....=....
 23ff780:	cb33 bebe f20d 1205 f60f d613 1819 042c     3.............,.
 23ff790:	c806 e1d4 cc11 b3c6 98fc 1405 1c12 1fed     ................
 23ff7a0:	d8c9 1a00 1f14 dfe6 1030 e6ed f130 cf2e     ........0...0...
 23ff7b0:	c0db 160e f35c fa26 0cda e12e 1b12 b3ae     ....\.&.........
 23ff7c0:	f2ca edd3 f220 e4cf 03da 1fe7 bb1c 2424     .... .........$$
 23ff7d0:	f6f6 f5dc                                   ....

023ff7d4 <_ZN12_GLOBAL__N_12g0L17tensor_dimension0E>:
 23ff7d4:	0002 0000 0001 0000 0011 0000               ............

023ff7e0 <_ZN12_GLOBAL__N_12g0L17tensor_dimension1E>:
 23ff7e0:	0001 0000 0001 0000                         ........

023ff7e8 <_ZN12_GLOBAL__N_12g0L17tensor_dimension2E>:
 23ff7e8:	0002 0000 0001 0000 000a 0000               ............

023ff7f4 <_ZN12_GLOBAL__N_12g0L17tensor_dimension3E>:
 23ff7f4:	0001 0000 000a 0000                         ........

023ff7fc <_ZN12_GLOBAL__N_12g0L17tensor_dimension4E>:
 23ff7fc:	0002 0000 000a 0000 0014 0000               ............

023ff808 <_ZN12_GLOBAL__N_12g0L17tensor_dimension5E>:
 23ff808:	0001 0000 0014 0000                         ........

023ff810 <_ZN12_GLOBAL__N_12g0L17tensor_dimension6E>:
 23ff810:	0002 0000 0014 0000 0011 0000               ............

023ff81c <_ZN12_GLOBAL__N_12g0L17tensor_dimension7E>:
 23ff81c:	0002 0000 0001 0000 0014 0000               ............

023ff828 <_ZN12_GLOBAL__N_12g0L17tensor_dimension8E>:
 23ff828:	0002 0000 0001 0000 000a 0000               ............

023ff834 <_ZN12_GLOBAL__N_12g0L17tensor_dimension9E>:
 23ff834:	0002 0000 0001 0000 0001 0000               ............

023ff840 <_ZN12_GLOBAL__N_12g0L6quant0E>:
 23ff840:	f4c8 023f f478 023f 0000 0000               ..?.x.?.....

023ff84c <_ZN12_GLOBAL__N_12g0L6quant1E>:
 23ff84c:	f4d0 023f f480 023f 0000 0000               ..?...?.....

023ff858 <_ZN12_GLOBAL__N_12g0L6quant2E>:
 23ff858:	f4d8 023f f488 023f 0000 0000               ..?...?.....

023ff864 <_ZN12_GLOBAL__N_12g0L6quant3E>:
 23ff864:	f4e0 023f f490 023f 0000 0000               ..?...?.....

023ff870 <_ZN12_GLOBAL__N_12g0L6quant4E>:
 23ff870:	f4e8 023f f498 023f 0000 0000               ..?...?.....

023ff87c <_ZN12_GLOBAL__N_12g0L6quant5E>:
 23ff87c:	f4f0 023f f4a0 023f 0000 0000               ..?...?.....

023ff888 <_ZN12_GLOBAL__N_12g0L6quant6E>:
 23ff888:	f4f8 023f f4a8 023f 0000 0000               ..?...?.....

023ff894 <_ZN12_GLOBAL__N_12g0L6quant7E>:
 23ff894:	f500 023f f4b0 023f 0000 0000               ..?...?.....

023ff8a0 <_ZN12_GLOBAL__N_12g0L6quant8E>:
 23ff8a0:	f508 023f f4b8 023f 0000 0000               ..?...?.....

023ff8ac <_ZN12_GLOBAL__N_12g0L6quant9E>:
 23ff8ac:	f510 023f f4c0 023f 0000 0000               ..?...?.....

023ff8b8 <_ZN12_GLOBAL__N_12g0L7inputs0E>:
 23ff8b8:	0003 0000 0000 0000 0006 0000 0005 0000     ................

023ff8c8 <_ZN12_GLOBAL__N_12g0L7inputs1E>:
 23ff8c8:	0003 0000 0007 0000 0004 0000 0003 0000     ................

023ff8d8 <_ZN12_GLOBAL__N_12g0L7inputs2E>:
 23ff8d8:	0003 0000 0008 0000 0002 0000 0001 0000     ................

023ff8e8 <_ZN12_GLOBAL__N_12g0L7opdata0E>:
 23ff8e8:	0001 0000                                   ....

023ff8ec <_ZN12_GLOBAL__N_12g0L7opdata1E>:
 23ff8ec:	0001 0000                                   ....

023ff8f0 <_ZN12_GLOBAL__N_12g0L7opdata2E>:
 23ff8f0:	0000 0000                                   ....

023ff8f4 <_ZN12_GLOBAL__N_12g0L8outputs0E>:
 23ff8f4:	0001 0000 0007 0000                         ........

023ff8fc <_ZN12_GLOBAL__N_12g0L8outputs1E>:
 23ff8fc:	0001 0000 0008 0000                         ........

023ff904 <_ZN12_GLOBAL__N_12g0L8outputs2E>:
 23ff904:	0001 0000 0009 0000                         ........

023ff90c <_ZN12_GLOBAL__N_18used_opsE>:
 23ff90c:	0000 0000                                   ....

023ff910 <_ZN12_GLOBAL__N_1L25tflTensors_subgraph_indexE>:
 23ff910:	0000 0000 000a 0000                         ........

023ff918 <_ZTVN12_GLOBAL__N_115EonMicroContextE>:
	...
 23ff920:	9729 023f 973d 023f 9721 023f 979d 023f     ).?.=.?.!.?...?.
 23ff930:	958d 023f 968d 023f 873d 023f 8763 023f     ..?...?.=.?.c.?.
 23ff940:	8789 023f 9593 023f 961d 023f               ..?...?...?.

023ff94c <_ZTVN5spark13CellularClassE>:
	...
 23ff954:	a343 023f a339 023f a32f 023f a2e5 023f     C.?.9.?./.?...?.
 23ff964:	a323 023f a317 023f b989 023f b991 023f     #.?...?...?...?.
 23ff974:	a30b 023f a303 023f a2f9 023f a2ef 023f     ..?...?...?...?.
 23ff984:	bab9 023f b9c1 023f b9c9 023f               ..?...?...?.

023ff990 <_ZTVN5spark13EthernetClassE>:
	...
 23ff998:	a3db 023f a3d1 023f a3c7 023f a3bd 023f     ..?...?...?...?.
 23ff9a8:	a3b1 023f a3a5 023f b989 023f b991 023f     ..?...?...?...?.
 23ff9b8:	a399 023f a391 023f a387 023f a37d 023f     ..?...?...?.}.?.
 23ff9c8:	bab9 023f b9c1 023f b9c9 023f               ..?...?...?.

023ff9d4 <_ZTV7TwoWire>:
	...
 23ff9dc:	a3f9 023f a443 023f a41b 023f a3fb 023f     ..?.C.?...?...?.
 23ff9ec:	a423 023f a42b 023f a433 023f a43b 023f     #.?.+.?.3.?.;.?.
 23ff9fc:	bbdf 023f                                   ..?.

023ffa00 <_ZTV9IPAddress>:
	...
 23ffa08:	a539 023f a529 023f a52b 023f 6425 2500     9.?.).?.+.?.%d.%
 23ffa18:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
 23ffa28:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
 23ffa38:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 23ffa48:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
 23ffa58:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 23ffa68:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 23ffa78:	006d 6e6c 6600 006e 6f63 6564 6400 7465     m.ln.fn.code.det
 23ffa88:	6961 006c                                   ail.

023ffa8c <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffa94:	aa75 023f aa9b 023f aa4d 023f a647 023f     u.?...?.M.?.G.?.

023ffaa4 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffaac:	af01 023f af19 023f b5f5 023f b79d 023f     ..?...?...?...?.

023ffabc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffac4:	af2d 023f af41 023f b7d5 023f aa61 023f     -.?.A.?...?.a.?.

023ffad4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffadc:	aa73 023f aaa9 023f b559 023f aa63 023f     s.?...?.Y.?.c.?.

023ffaec <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffaf4:	aa71 023f aab7 023f ae69 023f aad9 023f     q.?...?.i.?...?.

023ffb04 <CSWTCH.109>:
 23ffb04:	ae6c 1007 ae3c 1007 af04 1007 aec0 1007     l...<...........

023ffb14 <_ZTVN5spark12NetworkClassE>:
	...
 23ffb1c:	b949 023f b953 023f b95d 023f b967 023f     I.?.S.?.].?.g.?.
 23ffb2c:	b971 023f b97d 023f b989 023f b991 023f     q.?.}.?...?...?.
 23ffb3c:	b999 023f b9a5 023f b9ad 023f b9b7 023f     ..?...?...?...?.
 23ffb4c:	bab9 023f b9c1 023f b9c9 023f 5925 252d     ..?...?...?.%Y-%
 23ffb5c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 23ffb6c:	7361 7463 6d69 0065                         asctime.

023ffb74 <_ZTV11USARTSerial>:
	...
 23ffb7c:	bed1 023f bf3d 023f bf15 023f bae1 023f     ..?.=.?...?...?.
 23ffb8c:	bee5 023f bf01 023f bef3 023f bf0f 023f     ..?...?...?...?.
 23ffb9c:	bbdf 023f bed3 023f bed7 023f               ..?...?...?.

023ffba8 <_ZTV9USBSerial>:
	...
 23ffbb0:	bf95 023f bffd 023f bfd3 023f bae1 023f     ..?...?...?...?.
 23ffbc0:	bfc5 023f bf97 023f bfa7 023f bff7 023f     ..?...?...?...?.
 23ffbd0:	bbdf 023f bfb7 023f bf8f 023f               ..?...?...?.

023ffbdc <_ZTVN5spark9WiFiClassE>:
	...
 23ffbe4:	c0ff 023f c0f5 023f c0eb 023f c0a1 023f     ..?...?...?...?.
 23ffbf4:	c0df 023f c0d3 023f b989 023f b991 023f     ..?...?...?...?.
 23ffc04:	c0c7 023f c0bf 023f c0b5 023f c0ab 023f     ..?...?...?...?.
 23ffc14:	bab9 023f b9c1 023f b9c9 023f               ..?...?...?.

023ffc20 <_ZSt7nothrow>:
 23ffc20:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffc30:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23ffc40:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23ffc50:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23ffc60:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23ffc70:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23ffc80:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
 23ffc90:	6900 696e 7974 0000                         .inity..

023ffc98 <fpi.1>:
 23ffc98:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 23ffca8:	0000 0000                                   ....

023ffcac <fpinan.0>:
 23ffcac:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 23ffcbc:	0000 0000                                   ....

023ffcc0 <tinytens>:
 23ffcc0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 23ffcd0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 23ffce0:	6f43 64ac 0628 1168                         Co.d(.h.

023ffce8 <_ctype_>:
 23ffce8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffcf8:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffd08:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffd18:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23ffd28:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23ffd38:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23ffd48:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23ffd58:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23ffd68:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 23ffde8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
 23ffdf8:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
 23ffe08:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
 23ffe18:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
 23ffe28:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
 23ffe38:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
 23ffe48:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
 23ffe58:	632e 0000                                   .c..

023ffe5c <_C_numeric_locale>:
 23ffe5c:	f24e 023f e9d8 023f a500 1007 4f50 4953     N.?...?.....POSI
 23ffe6c:	0058 742f 706d 6a2f 6e65 696b 736e 472d     X./tmp/jenkins-G
 23ffe7c:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
 23ffe8c:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
 23ffe9c:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
 23ffeac:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
 23ffebc:	696c 2f62 706d 6572 2e63 0063               lib/mprec.c.

023ffec8 <__mprec_bigtens>:
 23ffec8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 23ffed8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 23ffee8:	bf3c 7f73 4fdd 7515                         <.s..O.u

023ffef0 <__mprec_tens>:
 23ffef0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 23fff00:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 23fff10:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 23fff20:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 23fff30:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 23fff40:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 23fff50:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 23fff60:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 23fff70:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 23fff80:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 23fff90:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 23fffa0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 23fffb0:	9db4 79d9 7843 44ea                         ...yCx.D

023fffb8 <p05.0>:
 23fffb8:	0005 0000 0019 0000 007d 0000               ........}...

023fffc4 <link_const_data_end>:
 23fffc4:	023f8079 	.word	0x023f8079
 23fffc8:	023f94d1 	.word	0x023f94d1
 23fffcc:	023f99c5 	.word	0x023f99c5
 23fffd0:	023fa2d5 	.word	0x023fa2d5
 23fffd4:	023fa34d 	.word	0x023fa34d
 23fffd8:	023fa3e5 	.word	0x023fa3e5
 23fffdc:	023fa50d 	.word	0x023fa50d
 23fffe0:	023fb5e5 	.word	0x023fb5e5
 23fffe4:	023fbacd 	.word	0x023fbacd
 23fffe8:	023fbba9 	.word	0x023fbba9
 23fffec:	023fbe99 	.word	0x023fbe99
 23ffff0:	023fbebd 	.word	0x023fbebd
 23ffff4:	023fc109 	.word	0x023fc109
